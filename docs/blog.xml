<?xml version="1.0" encoding="UTF-8"?>
<rss  xmlns:atom="http://www.w3.org/2005/Atom" 
      xmlns:media="http://search.yahoo.com/mrss/" 
      xmlns:content="http://purl.org/rss/1.0/modules/content/" 
      xmlns:dc="http://purl.org/dc/elements/1.1/" 
      version="2.0">
<channel>
<title>Rajesh Karra</title>
<link>https://isaac-flath.tech/blog.html</link>
<atom:link href="https://isaac-flath.tech/blog.xml" rel="self" type="application/rss+xml"/>
<description>Blog for machine learning, programming, computer science and other data science related topics</description>
<generator>quarto-1.5.56</generator>
<lastBuildDate>Fri, 19 Jul 2024 04:00:00 GMT</lastBuildDate>
<item>
  <title>Creating Custom FastHTML Tags for Markdown Rendering</title>
  <dc:creator>Isaac Flath</dc:creator>
  <link>https://isaac-flath.tech/posts/boots/FasthtmlTutorial.html</link>
  <description><![CDATA[ 





<section id="intro" class="level1" data-number="1">
<h1 data-number="1"><span class="header-section-number">1</span> Intro</h1>
<p>This post will cover how to render markdown using zero-md in <a href="https://fastht.ml/">FastHTML</a> in a practical example. This includes:</p>
<ul>
<li>Defining a custom HTML tag in FastHTML</li>
<li>Using external CSS and javascript libraries with FastHTML</li>
<li>Adding CSS styling</li>
<li>Organize UI into columns</li>
</ul>
<p>In this tutorial we will convert a markdown of an <a href="https://www.boot.dev/lessons/d3d50474-d60a-4751-b71e-e145ae95b966?survey_no_sub=true">early lesson</a> in the <a href="https://boot.dev">boot.dev</a> curriculum and a fake conversation between a student and a chatbot about the lesson to HTML. Boot.dev is an online learning platform that offers self-paced, gamified courses for back-end web development.</p>
</section>
<section id="markdown-with-zero-md" class="level1" data-number="2">
<h1 data-number="2"><span class="header-section-number">2</span> Markdown With Zero-md</h1>
<div id="cell-3" class="cell" data-execution_count="1">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb1-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Import style 1 </span></span>
<span id="cb1-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> fasthtml.common <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span></span>
<span id="cb1-3"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> functools <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> partial</span>
<span id="cb1-4"></span>
<span id="cb1-5"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Import style 2</span></span>
<span id="cb1-6"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> fasthtml.core <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> P, Script, Html, Link, Div, Template, Style, to_xml</span>
<span id="cb1-7"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> fasthtml.components <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> show</span></code></pre></div>
</div>
<p>In FastHTML we can use the <code>P</code> function to put text in a paragraph <code>&lt;p&gt;&lt;/p&gt;</code> tag (a common way of displaying text). However, markdown is not rendered properly and is hard to read.</p>
<div id="cell-5" class="cell" data-execution_count="2">
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb2-1"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">with</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">open</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'_readme.md'</span>) <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> f: </span>
<span id="cb2-2">    lesson_content <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> f.read()</span>
<span id="cb2-3">show(P(lesson_content))</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="2">
<p># Startup bug

A new startup has a bug in its server code. The code is supposed to print messages indicating the server has started successfully.

## Challenge

Fix the 2 errors in the code and get it to run!

```python
print("Starting up server...')
prnt("local server is listening on port 8080")
```</p>
</div>
</div>
<p>We need to convert markdown formatting into a format that HTML understands. We can use a javascript library called <a href="https://zerodevx.github.io/zero-md/">zero-md</a> to do this, but this tag does not have a function in FastHTML. There are still two options for using this tag in FastHTML.</p>
<div class="callout callout-style-default callout-tip callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
What is zero-md?
</div>
</div>
<div class="callout-body-container callout-body">
<p>In web development, HTML defines the general structure of a web page. However, HTML alone is usually not sufficient. Javascript allows us to extend what we can do beyond out-of-the-box HTML. <code>zero-md</code> is a Javascript library that adds functionality for displaying markdown content that we can use with an HTML tag.</p>
</div>
</div>
<p>The first option is to write the HTML in a text string and use that.</p>
<div class="sourceCode" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb3-1">NotStr(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f'''&lt;zero-md&gt;&lt;script type="text/markdown"&gt;</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>lesson_content<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">&lt;/script&gt;&lt;/zero-md&gt;'''</span>)</span></code></pre></div>
<div class="callout callout-style-default callout-tip callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Tip
</div>
</div>
<div class="callout-body-container callout-body">
<p><code>NotStr</code> is a FastHTML function designed for passing a string that should be executed as HTML code rather than a string.</p>
<p>In the example above, because <code>NotStr</code> is used, FastHTML will treat it as HTML code rather than a Python string. If we removed the <code>NotStr</code>, all the HTML tags would be displayed on the page just as they are written rather than being rendered nicely for your web application.</p>
</div>
</div>
<p>This is fine for very simple things, but the more you build, the messier and harder it gets to work with. It is better to create a FastHTML style tag that works just like everything else. It’s incredibly simple to create a custom tag. By importing from <code>fasthtml.components</code> the HTML tag will be created automatically (defined in the module’s <code>__getattr__</code>).</p>
<div id="cell-11" class="cell" data-execution_count="3">
<div class="sourceCode cell-code" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb4-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> fasthtml.components <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> Zero_md</span></code></pre></div>
</div>
<p>Now that we have our custom tag defined, we can use that with the <code>&lt;script&gt;</code> tag (included in FastHTML) to apply the formatting per the <a href="https://zerodevx.github.io/zero-md/">zero-md documentation</a>. For now, we will use the defaults and do nothing with CSS (more details on this later).</p>
<div id="cell-13" class="cell" data-execution_count="4">
<div class="sourceCode cell-code" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb5-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> render_local_md(md, css <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">''</span>):</span>
<span id="cb5-2">    css_template <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Template(Style(css), data_append<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>)</span>
<span id="cb5-3">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> Zero_md(css_template, Script(md, <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">type</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"text/markdown"</span>))</span>
<span id="cb5-4"></span>
<span id="cb5-5">lesson_content_html <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> render_local_md(lesson_content)</span>
<span id="cb5-6">lesson_content_html</span></code></pre></div>
<div class="cell-output cell-output-display cell-output-markdown" data-execution_count="4">
<div class="sourceCode" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode xml code-with-copy"><code class="sourceCode xml"><span id="cb6-1">&lt;<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">zero-md</span>&gt;</span>
<span id="cb6-2">  &lt;<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">template</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;"> data-append</span><span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">&gt;</span></span>
<span id="cb6-3">    <span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">&lt;style&gt;&lt;/style&gt;</span></span>
<span id="cb6-4">  <span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">&lt;/template&gt;</span></span>
<span id="cb6-5">  <span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">&lt;script</span> <span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">type</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"text/markdown"</span>&gt;# Startup bug</span>
<span id="cb6-6"></span>
<span id="cb6-7">A new startup has a bug in its server code. The code is supposed to print messages indicating the server has started successfully.</span>
<span id="cb6-8"></span>
<span id="cb6-9">## Challenge</span>
<span id="cb6-10"></span>
<span id="cb6-11">Fix the 2 errors in the code and get it to run!</span>
<span id="cb6-12"></span>
<span id="cb6-13">```python</span>
<span id="cb6-14">print("Starting up server...')</span>
<span id="cb6-15">prnt("local server is listening on port 8080")</span>
<span id="cb6-16">```&lt;/<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">script</span>&gt;</span>
<span id="cb6-17">&lt;/<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">zero-md</span>&gt;</span></code></pre></div>
</div>
</div>
<p>The last thing we need to do is load zero-md from a CDN. We can do this by adding a <code>&lt;script&gt;</code> tag to the <code>&lt;head&gt;</code> of the HTML, and it all works!</p>
<div id="cell-15" class="cell" data-execution_count="5">
<div class="sourceCode cell-code" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb7-1"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">with</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">open</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'_readme.md'</span>) <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> f:</span>
<span id="cb7-2">    lesson_content <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> f.read()</span>
<span id="cb7-3"></span>
<span id="cb7-4">zeromd_headers <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [Script(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">type</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"module"</span>, src<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"https://cdn.jsdelivr.net/npm/zero-md@3?register"</span>)]</span></code></pre></div>
</div>
<div class="tabset-margin-container"></div><div class="panel-tabset">
<ul class="nav nav-tabs"><li class="nav-item"><a class="nav-link active" id="tabset-1-1-tab" data-bs-toggle="tab" data-bs-target="#tabset-1-1" aria-controls="tabset-1-1" aria-selected="true">Rendered</a></li><li class="nav-item"><a class="nav-link" id="tabset-1-2-tab" data-bs-toggle="tab" data-bs-target="#tabset-1-2" aria-controls="tabset-1-2" aria-selected="false">python</a></li><li class="nav-item"><a class="nav-link" id="tabset-1-3-tab" data-bs-toggle="tab" data-bs-target="#tabset-1-3" aria-controls="tabset-1-3" aria-selected="false">html</a></li></ul>
<div class="tab-content">
<div id="tabset-1-1" class="tab-pane active" aria-labelledby="tabset-1-1-tab">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://isaac-flath.tech/posts/boots/Rendered_Content.png" class="img-fluid figure-img"></p>
<figcaption>image</figcaption>
</figure>
</div>
</div>
<div id="tabset-1-2" class="tab-pane" aria-labelledby="tabset-1-2-tab">
<div id="cell-18" class="cell" data-execution_count="6">
<div class="sourceCode cell-code" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb8-1">Html(<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>zeromd_headers, lesson_content_html)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="6">
<pre><code>(['!doctype', (), {'html': True}],
 ['html',
  (['script',
    ('',),
    {'type': 'module',
     'src': 'https://cdn.jsdelivr.net/npm/zero-md@3?register'}],
   ['zero-md',
    (['template', (['style', ('',), {}],), {'data-append': True}],
     ['script',
      ('# Startup bug\n\nA new startup has a bug in its server code. The code is supposed to print messages indicating the server has started successfully.\n\n## Challenge\n\nFix the 2 errors in the code and get it to run!\n\n```python\nprint("Starting up server...\')\nprnt("local server is listening on port 8080")\n```',),
      {'type': 'text/markdown'}]),
    {}]),
  {}])</code></pre>
</div>
</div>
</div>
<div id="tabset-1-3" class="tab-pane" aria-labelledby="tabset-1-3-tab">
<div id="cell-20" class="cell" data-execution_count="7">
<div class="sourceCode cell-code" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb10-1"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(to_xml(Html(<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>zeromd_headers, lesson_content_html)))</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>&lt;!doctype html&gt;&lt;/!doctype&gt;

&lt;html&gt;
  &lt;script type="module" src="https://cdn.jsdelivr.net/npm/zero-md@3?register"&gt;&lt;/script&gt;
  &lt;zero-md&gt;
    &lt;template data-append&gt;
      &lt;style&gt;&lt;/style&gt;
    &lt;/template&gt;
    &lt;script type="text/markdown"&gt;# Startup bug

A new startup has a bug in its server code. The code is supposed to print messages indicating the server has started successfully.

## Challenge

Fix the 2 errors in the code and get it to run!

```python
print("Starting up server...')
prnt("local server is listening on port 8080")
```&lt;/script&gt;
  &lt;/zero-md&gt;
&lt;/html&gt;
</code></pre>
</div>
</div>
</div>
</div>
</div>
</section>
<section id="markdown-conversation-bubbles" class="level1" data-number="3">
<h1 data-number="3"><span class="header-section-number">3</span> Markdown Conversation Bubbles</h1>
<p>We will start with default DaisyUI chat bubbles. For many types of conversations this is fine, but for this use case we need markdown to render properly for code snippets and structural elements.</p>
<div class="callout callout-style-default callout-note callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Note
</div>
</div>
<div class="callout-body-container callout-body">
<p>This part of the tutorial picks up where the step-by-step <a href="https://fhdocs.answer.ai/by_example.html#full-example-3---chatbot-example-with-daisyui-components">the DaisyUI example</a> in the FastHTML documentation leaves off. For more information, start there!</p>
</div>
</div>
<div id="cell-24" class="cell" data-execution_count="8">
<div class="sourceCode cell-code" id="cb12" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb12-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#loading messages</span></span>
<span id="cb12-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> json</span>
<span id="cb12-3"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">with</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">open</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'conversation.json'</span>) <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> f:</span>
<span id="cb12-4">    messages <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> json.load(f)[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'messages'</span>]</span></code></pre></div>
</div>
<div id="cell-25" class="cell" data-execution_count="9">
<div class="sourceCode cell-code" id="cb13" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb13-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Loading tailwind and daisyui</span></span>
<span id="cb13-2">chat_headers <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [Script(src<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"https://cdn.tailwindcss.com"</span>),</span>
<span id="cb13-3">           Link(rel<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"stylesheet"</span>, href<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"https://cdn.jsdelivr.net/npm/daisyui@4.11.1/dist/full.min.css"</span>)]</span></code></pre></div>
</div>
<p>We re-use the code from the daisyUI example with one change. We are using the <code>render_local_md</code> function we defined.</p>
<div id="cell-27" class="cell" data-execution_count="10">
<div class="sourceCode cell-code" id="cb14" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb14-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Functionality identical to Daisy UI example linked above</span></span>
<span id="cb14-2"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> ChatMessage(msg, render_md_fn<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">lambda</span> x: x):</span>
<span id="cb14-3">    md <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> render_md_fn(msg[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'content'</span>])</span>
<span id="cb14-4">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> Div(</span>
<span id="cb14-5">        Div(msg[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'role'</span>], cls<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"chat-header"</span>),</span>
<span id="cb14-6">        Div(md, cls<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"chat-bubble chat-bubble-</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'primary'</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> msg[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'role'</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'user'</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">else</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'secondary'</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>),</span>
<span id="cb14-7">        cls<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"chat chat-</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'end'</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> msg[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'role'</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'user'</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">else</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'start'</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span></code></pre></div>
</div>
<p>Using this, markdown doesn’t render properly, causing readability issues.</p>
<p>Instead let’s do exactly what we did before with Zero-md. Our markdown renders, however there are some issues with css styles clashing.</p>
<div id="cell-30" class="cell" data-execution_count="11">
<div class="sourceCode cell-code" id="cb15" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb15-1">chat_bubble <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>Html(<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>(chat_headers<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span>zeromd_headers), ChatMessage(messages[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>], render_md_fn<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>render_local_md))</span></code></pre></div>
</div>
<div class="tabset-margin-container"></div><div class="panel-tabset">
<ul class="nav nav-tabs"><li class="nav-item"><a class="nav-link active" id="tabset-2-1-tab" data-bs-toggle="tab" data-bs-target="#tabset-2-1" aria-controls="tabset-2-1" aria-selected="true">Rendered</a></li><li class="nav-item"><a class="nav-link" id="tabset-2-2-tab" data-bs-toggle="tab" data-bs-target="#tabset-2-2" aria-controls="tabset-2-2" aria-selected="false">python</a></li><li class="nav-item"><a class="nav-link" id="tabset-2-3-tab" data-bs-toggle="tab" data-bs-target="#tabset-2-3" aria-controls="tabset-2-3" aria-selected="false">html</a></li></ul>
<div class="tab-content">
<div id="tabset-2-1" class="tab-pane active" aria-labelledby="tabset-2-1-tab">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://isaac-flath.tech/posts/boots/Rendered_Bubble_BadFormat.png" class="img-fluid figure-img"></p>
<figcaption>image</figcaption>
</figure>
</div>
</div>
<div id="tabset-2-2" class="tab-pane" aria-labelledby="tabset-2-2-tab">
<div id="cell-33" class="cell" data-execution_count="12">
<div class="sourceCode cell-code" id="cb16" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb16-1">chat_bubble</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="12">
<pre><code>(['!doctype', (), {'html': True}],
 ['html',
  (['script', ('',), {'src': 'https://cdn.tailwindcss.com'}],
   ['link',
    (),
    {'rel': 'stylesheet',
     'href': 'https://cdn.jsdelivr.net/npm/daisyui@4.11.1/dist/full.min.css'}],
   ['script',
    ('',),
    {'type': 'module',
     'src': 'https://cdn.jsdelivr.net/npm/zero-md@3?register'}],
   ['div',
    (['div', ('assistant',), {'class': 'chat-header'}],
     ['div',
      (['zero-md',
        (['template', (['style', ('',), {}],), {'data-append': True}],
         ['script',
          ('I\'m glad to hear you\'ve made progress and resolved one of the issues! Let\'s review your existing code to proceed further:\n\n```python\nprint("Starting up server...\')\nprnt("local server is listening on port 8080")\n```\nCould you specify which error you\'ve addressed and share the updated code snippet? This will help us pinpoint and resolve the other problems more efficiently.',),
          {'type': 'text/markdown'}]),
        {}],),
      {'class': 'chat-bubble chat-bubble-secondary'}]),
    {'class': 'chat chat-start'}]),
  {}])</code></pre>
</div>
</div>
</div>
<div id="tabset-2-3" class="tab-pane" aria-labelledby="tabset-2-3-tab">
<div id="cell-35" class="cell" data-execution_count="13">
<div class="sourceCode cell-code" id="cb18" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb18-1"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(to_xml(chat_bubble))</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>&lt;!doctype html&gt;&lt;/!doctype&gt;

&lt;html&gt;
  &lt;script src="https://cdn.tailwindcss.com"&gt;&lt;/script&gt;
  &lt;link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/daisyui@4.11.1/dist/full.min.css"&gt;&lt;/link&gt;
  &lt;script type="module" src="https://cdn.jsdelivr.net/npm/zero-md@3?register"&gt;&lt;/script&gt;
  &lt;div class="chat chat-start"&gt;
    &lt;div class="chat-header"&gt;assistant&lt;/div&gt;
    &lt;div class="chat-bubble chat-bubble-secondary"&gt;
      &lt;zero-md&gt;
        &lt;template data-append&gt;
          &lt;style&gt;&lt;/style&gt;
        &lt;/template&gt;
        &lt;script type="text/markdown"&gt;I'm glad to hear you've made progress and resolved one of the issues! Let's review your existing code to proceed further:

```python
print("Starting up server...')
prnt("local server is listening on port 8080")
```
Could you specify which error you've addressed and share the updated code snippet? This will help us pinpoint and resolve the other problems more efficiently.&lt;/script&gt;
      &lt;/zero-md&gt;
    &lt;/div&gt;
  &lt;/div&gt;
&lt;/html&gt;
</code></pre>
</div>
</div>
</div>
</div>
</div>
<p>We can inject CSS styling to handle this issue by telling zero-md to use a template and ignore the default styles to make beautiful properly rendered conversations.</p>
<div class="callout callout-style-default callout-tip callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Tip
</div>
</div>
<div class="callout-body-container callout-body">
<p>CSS allows us to extend what we can do with just HTML by providing a syntax for adding styling to HTML elements in a programmatic way. You may want every header to have a specific text color or every paragraph to have a specific background color. CSS allows us to do that.</p>
</div>
</div>
<div id="cell-38" class="cell" data-execution_count="14">
<div class="sourceCode cell-code" id="cb20" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb20-1"></span>
<span id="cb20-2">css <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'.markdown-body {background-color: unset !important; color: unset !important;}'</span></span>
<span id="cb20-3">_render_local_md <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> partial(render_local_md, css<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>css)</span>
<span id="cb20-4">chat_bubble <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Html(<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>(chat_headers<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span>zeromd_headers), ChatMessage(messages[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>], render_md_fn<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>_render_local_md))</span></code></pre></div>
</div>
<p>Now that it looks good we can apply this style to all messages</p>
<div class="tabset-margin-container"></div><div class="panel-tabset">
<ul class="nav nav-tabs"><li class="nav-item"><a class="nav-link active" id="tabset-3-1-tab" data-bs-toggle="tab" data-bs-target="#tabset-3-1" aria-controls="tabset-3-1" aria-selected="true">rendered</a></li><li class="nav-item"><a class="nav-link" id="tabset-3-2-tab" data-bs-toggle="tab" data-bs-target="#tabset-3-2" aria-controls="tabset-3-2" aria-selected="false">python</a></li><li class="nav-item"><a class="nav-link" id="tabset-3-3-tab" data-bs-toggle="tab" data-bs-target="#tabset-3-3" aria-controls="tabset-3-3" aria-selected="false">html</a></li></ul>
<div class="tab-content">
<div id="tabset-3-1" class="tab-pane active" aria-labelledby="tabset-3-1-tab">
<p><img src="https://isaac-flath.tech/posts/boots/Rendered_Bubble.png" class="img-fluid"></p>
</div>
<div id="tabset-3-2" class="tab-pane" aria-labelledby="tabset-3-2-tab">
<div id="cell-42" class="cell" data-execution_count="15">
<div class="sourceCode cell-code" id="cb21" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb21-1">chat_bubble</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="15">
<pre><code>(['!doctype', (), {'html': True}],
 ['html',
  (['script', ('',), {'src': 'https://cdn.tailwindcss.com'}],
   ['link',
    (),
    {'rel': 'stylesheet',
     'href': 'https://cdn.jsdelivr.net/npm/daisyui@4.11.1/dist/full.min.css'}],
   ['script',
    ('',),
    {'type': 'module',
     'src': 'https://cdn.jsdelivr.net/npm/zero-md@3?register'}],
   ['div',
    (['div', ('assistant',), {'class': 'chat-header'}],
     ['div',
      (['zero-md',
        (['template',
          (['style',
            ('.markdown-body {background-color: unset !important; color: unset !important;}',),
            {}],),
          {'data-append': True}],
         ['script',
          ('I\'m glad to hear you\'ve made progress and resolved one of the issues! Let\'s review your existing code to proceed further:\n\n```python\nprint("Starting up server...\')\nprnt("local server is listening on port 8080")\n```\nCould you specify which error you\'ve addressed and share the updated code snippet? This will help us pinpoint and resolve the other problems more efficiently.',),
          {'type': 'text/markdown'}]),
        {}],),
      {'class': 'chat-bubble chat-bubble-secondary'}]),
    {'class': 'chat chat-start'}]),
  {}])</code></pre>
</div>
</div>
</div>
<div id="tabset-3-3" class="tab-pane" aria-labelledby="tabset-3-3-tab">
<div id="cell-44" class="cell" data-execution_count="16">
<div class="sourceCode cell-code" id="cb23" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb23-1"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(to_xml(chat_bubble))</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>&lt;!doctype html&gt;&lt;/!doctype&gt;

&lt;html&gt;
  &lt;script src="https://cdn.tailwindcss.com"&gt;&lt;/script&gt;
  &lt;link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/daisyui@4.11.1/dist/full.min.css"&gt;&lt;/link&gt;
  &lt;script type="module" src="https://cdn.jsdelivr.net/npm/zero-md@3?register"&gt;&lt;/script&gt;
  &lt;div class="chat chat-start"&gt;
    &lt;div class="chat-header"&gt;assistant&lt;/div&gt;
    &lt;div class="chat-bubble chat-bubble-secondary"&gt;
      &lt;zero-md&gt;
        &lt;template data-append&gt;
          &lt;style&gt;.markdown-body {background-color: unset !important; color: unset !important;}&lt;/style&gt;
        &lt;/template&gt;
        &lt;script type="text/markdown"&gt;I'm glad to hear you've made progress and resolved one of the issues! Let's review your existing code to proceed further:

```python
print("Starting up server...')
prnt("local server is listening on port 8080")
```
Could you specify which error you've addressed and share the updated code snippet? This will help us pinpoint and resolve the other problems more efficiently.&lt;/script&gt;
      &lt;/zero-md&gt;
    &lt;/div&gt;
  &lt;/div&gt;
&lt;/html&gt;
</code></pre>
</div>
</div>
</div>
</div>
</div>
</section>
<section id="putting-it-together" class="level1" data-number="4">
<h1 data-number="4"><span class="header-section-number">4</span> Putting it Together</h1>
<p>We can add FlexBox to organize content on a page to design our UI and see it in action.</p>
<div class="callout callout-style-default callout-tip callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Tip
</div>
</div>
<div class="callout-body-container callout-body">
<p>Like we saw the <code>zero-md</code> javascript library, we can import CSS libraries into our HTML. FlexBox is a CSS library that allows you to define classes on elements and it styles them based on the class names (such as <code>"col-xs-5"</code> to define a column width).</p>
</div>
</div>
<div id="cell-48" class="cell" data-execution_count="17">
<div class="sourceCode cell-code" id="cb25" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb25-1">flexbox <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [Link(rel<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'stylesheet'</span>, href<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'https://cdnjs.cloudflare.com/ajax/libs/flexboxgrid/6.3.1/flexboxgrid.min.css'</span>, <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">type</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'text/css'</span>)]</span>
<span id="cb25-2">all_headers <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> zeromd_headers <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> chat_headers <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> flexbox</span>
<span id="cb25-3"></span>
<span id="cb25-4">chatbox <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [ChatMessage(msg, render_md_fn<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>_render_local_md) <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> msg <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> messages]</span>
<span id="cb25-5">        </span>
<span id="cb25-6">conversation_ui <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Html(<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>all_headers, </span>
<span id="cb25-7">          Div(</span>
<span id="cb25-8">              Div(lesson_content_html, cls<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"col-xs-5"</span>),</span>
<span id="cb25-9">              Div(<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>chatbox, cls<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"col-xs-7"</span>),</span>
<span id="cb25-10">              cls<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"row"</span>))</span></code></pre></div>
</div>
<div class="tabset-margin-container"></div><div class="panel-tabset">
<ul class="nav nav-tabs"><li class="nav-item"><a class="nav-link active" id="tabset-4-1-tab" data-bs-toggle="tab" data-bs-target="#tabset-4-1" aria-controls="tabset-4-1" aria-selected="true">rendered</a></li><li class="nav-item"><a class="nav-link" id="tabset-4-2-tab" data-bs-toggle="tab" data-bs-target="#tabset-4-2" aria-controls="tabset-4-2" aria-selected="false">python</a></li><li class="nav-item"><a class="nav-link" id="tabset-4-3-tab" data-bs-toggle="tab" data-bs-target="#tabset-4-3" aria-controls="tabset-4-3" aria-selected="false">html</a></li></ul>
<div class="tab-content">
<div id="tabset-4-1" class="tab-pane active" aria-labelledby="tabset-4-1-tab">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://isaac-flath.tech/posts/boots/Completed_example.png" class="img-fluid figure-img"></p>
<figcaption>image</figcaption>
</figure>
</div>
</div>
<div id="tabset-4-2" class="tab-pane" aria-labelledby="tabset-4-2-tab">
<div id="cell-51" class="cell" data-execution_count="18">
<div class="sourceCode cell-code" id="cb26" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb26-1">conversation_ui</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="18">
<pre><code>(['!doctype', (), {'html': True}],
 ['html',
  (['script',
    ('',),
    {'type': 'module',
     'src': 'https://cdn.jsdelivr.net/npm/zero-md@3?register'}],
   ['script', ('',), {'src': 'https://cdn.tailwindcss.com'}],
   ['link',
    (),
    {'rel': 'stylesheet',
     'href': 'https://cdn.jsdelivr.net/npm/daisyui@4.11.1/dist/full.min.css'}],
   ['link',
    (),
    {'rel': 'stylesheet',
     'href': 'https://cdnjs.cloudflare.com/ajax/libs/flexboxgrid/6.3.1/flexboxgrid.min.css',
     'type': 'text/css'}],
   ['div',
    (['div',
      (['zero-md',
        (['template', (['style', ('',), {}],), {'data-append': True}],
         ['script',
          ('# Startup bug\n\nA new startup has a bug in its server code. The code is supposed to print messages indicating the server has started successfully.\n\n## Challenge\n\nFix the 2 errors in the code and get it to run!\n\n```python\nprint("Starting up server...\')\nprnt("local server is listening on port 8080")\n```',),
          {'type': 'text/markdown'}]),
        {}],),
      {'class': 'col-xs-5'}],
     ['div',
      (['div',
        (['div', ('user',), {'class': 'chat-header'}],
         ['div',
          (['zero-md',
            (['template',
              (['style',
                ('.markdown-body {background-color: unset !important; color: unset !important;}',),
                {}],),
              {'data-append': True}],
             ['script',
              ("Could you assist me in resolving the remaining two errors in my code? I've managed to correct one already.",),
              {'type': 'text/markdown'}]),
            {}],),
          {'class': 'chat-bubble chat-bubble-primary'}]),
        {'class': 'chat chat-end'}],
       ['div',
        (['div', ('assistant',), {'class': 'chat-header'}],
         ['div',
          (['zero-md',
            (['template',
              (['style',
                ('.markdown-body {background-color: unset !important; color: unset !important;}',),
                {}],),
              {'data-append': True}],
             ['script',
              ('I\'m glad to hear you\'ve made progress and resolved one of the issues! Let\'s review your existing code to proceed further:\n\n```python\nprint("Starting up server...\')\nprnt("local server is listening on port 8080")\n```\nCould you specify which error you\'ve addressed and share the updated code snippet? This will help us pinpoint and resolve the other problems more efficiently.',),
              {'type': 'text/markdown'}]),
            {}],),
          {'class': 'chat-bubble chat-bubble-secondary'}]),
        {'class': 'chat chat-start'}],
       ['div',
        (['div', ('user',), {'class': 'chat-header'}],
         ['div',
          (['zero-md',
            (['template',
              (['style',
                ('.markdown-body {background-color: unset !important; color: unset !important;}',),
                {}],),
              {'data-append': True}],
             ['script',
              ('Here is the corrected line: print("Starting up server...")',),
              {'type': 'text/markdown'}]),
            {}],),
          {'class': 'chat-bubble chat-bubble-primary'}]),
        {'class': 'chat chat-end'}],
       ['div',
        (['div', ('assistant',), {'class': 'chat-header'}],
         ['div',
          (['zero-md',
            (['template',
              (['style',
                ('.markdown-body {background-color: unset !important; color: unset !important;}',),
                {}],),
              {'data-append': True}],
             ['script',
              ('Excellent work on correcting that error! Now let\'s analyze the other line in your code. Here’s what it looks like now:\n\n```python\nprint("Starting up server...")\nprnt("local server is listening on port 8080")\n```\nCan you examine the second line and identify any discrepancies?\n\nReflect on the print functions we usually use in Python. Does anything in that line seem incorrect?',),
              {'type': 'text/markdown'}]),
            {}],),
          {'class': 'chat-bubble chat-bubble-secondary'}]),
        {'class': 'chat chat-start'}]),
      {'class': 'col-xs-7'}]),
    {'class': 'row'}]),
  {}])</code></pre>
</div>
</div>
</div>
<div id="tabset-4-3" class="tab-pane" aria-labelledby="tabset-4-3-tab">
<div id="cell-53" class="cell" data-execution_count="19">
<div class="sourceCode cell-code" id="cb28" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb28-1"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(to_xml(conversation_ui))</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>&lt;!doctype html&gt;&lt;/!doctype&gt;

&lt;html&gt;
  &lt;script type="module" src="https://cdn.jsdelivr.net/npm/zero-md@3?register"&gt;&lt;/script&gt;
  &lt;script src="https://cdn.tailwindcss.com"&gt;&lt;/script&gt;
  &lt;link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/daisyui@4.11.1/dist/full.min.css"&gt;&lt;/link&gt;
  &lt;link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/flexboxgrid/6.3.1/flexboxgrid.min.css" type="text/css"&gt;&lt;/link&gt;
  &lt;div class="row"&gt;
    &lt;div class="col-xs-5"&gt;
      &lt;zero-md&gt;
        &lt;template data-append&gt;
          &lt;style&gt;&lt;/style&gt;
        &lt;/template&gt;
        &lt;script type="text/markdown"&gt;# Startup bug

A new startup has a bug in its server code. The code is supposed to print messages indicating the server has started successfully.

## Challenge

Fix the 2 errors in the code and get it to run!

```python
print("Starting up server...')
prnt("local server is listening on port 8080")
```&lt;/script&gt;
      &lt;/zero-md&gt;
    &lt;/div&gt;
    &lt;div class="col-xs-7"&gt;
      &lt;div class="chat chat-end"&gt;
        &lt;div class="chat-header"&gt;user&lt;/div&gt;
        &lt;div class="chat-bubble chat-bubble-primary"&gt;
          &lt;zero-md&gt;
            &lt;template data-append&gt;
              &lt;style&gt;.markdown-body {background-color: unset !important; color: unset !important;}&lt;/style&gt;
            &lt;/template&gt;
            &lt;script type="text/markdown"&gt;Could you assist me in resolving the remaining two errors in my code? I've managed to correct one already.&lt;/script&gt;
          &lt;/zero-md&gt;
        &lt;/div&gt;
      &lt;/div&gt;
      &lt;div class="chat chat-start"&gt;
        &lt;div class="chat-header"&gt;assistant&lt;/div&gt;
        &lt;div class="chat-bubble chat-bubble-secondary"&gt;
          &lt;zero-md&gt;
            &lt;template data-append&gt;
              &lt;style&gt;.markdown-body {background-color: unset !important; color: unset !important;}&lt;/style&gt;
            &lt;/template&gt;
            &lt;script type="text/markdown"&gt;I'm glad to hear you've made progress and resolved one of the issues! Let's review your existing code to proceed further:

```python
print("Starting up server...')
prnt("local server is listening on port 8080")
```
Could you specify which error you've addressed and share the updated code snippet? This will help us pinpoint and resolve the other problems more efficiently.&lt;/script&gt;
          &lt;/zero-md&gt;
        &lt;/div&gt;
      &lt;/div&gt;
      &lt;div class="chat chat-end"&gt;
        &lt;div class="chat-header"&gt;user&lt;/div&gt;
        &lt;div class="chat-bubble chat-bubble-primary"&gt;
          &lt;zero-md&gt;
            &lt;template data-append&gt;
              &lt;style&gt;.markdown-body {background-color: unset !important; color: unset !important;}&lt;/style&gt;
            &lt;/template&gt;
            &lt;script type="text/markdown"&gt;Here is the corrected line: print("Starting up server...")&lt;/script&gt;
          &lt;/zero-md&gt;
        &lt;/div&gt;
      &lt;/div&gt;
      &lt;div class="chat chat-start"&gt;
        &lt;div class="chat-header"&gt;assistant&lt;/div&gt;
        &lt;div class="chat-bubble chat-bubble-secondary"&gt;
          &lt;zero-md&gt;
            &lt;template data-append&gt;
              &lt;style&gt;.markdown-body {background-color: unset !important; color: unset !important;}&lt;/style&gt;
            &lt;/template&gt;
            &lt;script type="text/markdown"&gt;Excellent work on correcting that error! Now let's analyze the other line in your code. Here’s what it looks like now:

```python
print("Starting up server...")
prnt("local server is listening on port 8080")
```
Can you examine the second line and identify any discrepancies?

Reflect on the print functions we usually use in Python. Does anything in that line seem incorrect?&lt;/script&gt;
          &lt;/zero-md&gt;
        &lt;/div&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/div&gt;
&lt;/html&gt;
</code></pre>
</div>
</div>
</div>
</div>
</div>


</section>

 ]]></description>
  <category>FastHTML</category>
  <category>htmx</category>
  <category>boots</category>
  <guid>https://isaac-flath.tech/posts/boots/FasthtmlTutorial.html</guid>
  <pubDate>Fri, 19 Jul 2024 04:00:00 GMT</pubDate>
  <media:content url="https://isaac-flath.tech/posts/_TopicImages/FastHtml.jpg" medium="image" type="image/jpeg"/>
</item>
<item>
  <title>Adding Subscriptions to a Quarto Blog</title>
  <dc:creator>Salman Naqvi</dc:creator>
  <dc:creator>Isaac Flath</dc:creator>
  <link>https://isaac-flath.tech/posts/Other/QuartoBlogSubscriptions.html</link>
  <description><![CDATA[ 





<p>The <a href="https://quarto.org/docs/websites/website-blog.html#subscriptions">Quarto Documenation</a> covers how to implement website subscriptions at a surface level. This guide goes into the details on how one could do so, with three different options. <strong>That said</strong>, this guide can also be helpful for sites that do not use Quarto.</p>
<p>The three ways this guide will cover:</p>
<ul>
<li><p><strong>Readymade Services</strong></p>
<p>These are services that handle and automate everything for you. MailChimp is mentioned in the Quarto Docs as one option, but is not covered in this guide as it appears they are deprecating the RSS email feed function which is necessary. Instead, we have found MailerLite to be a suitable alternative that is easy to setup and use.</p></li>
<li><p><strong>Online Forms</strong></p>
<p>Though more manual, it’s good for just getting started or if you do not have an alternative address — many services like MailerLite require you to include a physical address in your emails. This options will dive into embedding forms, and gathering emails from there.</p></li>
<li><p><strong>HTML/JS</strong></p>
<p>For when you want to handle the frontend and the backend.</p></li>
</ul>
<p>Switch between the tabs below to view the steps for each option.</p>
<div class="tabset-margin-container"></div><div class="panel-tabset">
<ul class="nav nav-tabs"><li class="nav-item"><a class="nav-link active" id="tabset-1-1-tab" data-bs-toggle="tab" data-bs-target="#tabset-1-1" aria-controls="tabset-1-1" aria-selected="true">Services</a></li><li class="nav-item"><a class="nav-link" id="tabset-1-2-tab" data-bs-toggle="tab" data-bs-target="#tabset-1-2" aria-controls="tabset-1-2" aria-selected="false">Online Forms</a></li><li class="nav-item"><a class="nav-link" id="tabset-1-3-tab" data-bs-toggle="tab" data-bs-target="#tabset-1-3" aria-controls="tabset-1-3" aria-selected="false">HTML &amp; JS</a></li></ul>
<div class="tab-content">
<div id="tabset-1-1" class="tab-pane active" aria-labelledby="tabset-1-1-tab">
<p>The first thing we need to do is create a MailerLite Campaign. That is what will actually send the email.</p>
<section id="quarto-setup" class="level3" data-number="0.1">
<h3 data-number="0.1" class="anchored" data-anchor-id="quarto-setup"><span class="header-section-number">0.1</span> Quarto Setup</h3>
<p>Make sure RSS feeds are enabled on your blog. Instructions for how to do this are in <a href="https://quarto.org/docs/websites/website-blog.html#rss-feed">the Quarto Documentation</a>.</p>
</section>
<section id="mailerlite-campaign-setup" class="level3" data-number="0.2">
<h3 data-number="0.2" class="anchored" data-anchor-id="mailerlite-campaign-setup"><span class="header-section-number">0.2</span> MailerLite Campaign Setup</h3>
<p><a href="https://www.mailerlite.com/signup">Create a MailerLite account</a></p>
<p><img src="https://isaac-flath.tech/posts/Other/images/MailerLite1_signup.png" class="img-fluid"></p>
<p>Once you have an account and are logged in, <a href="https://dashboard.mailerlite.com/campaigns/create">create an RSS Campaign</a>.</p>
<p><img src="https://isaac-flath.tech/posts/Other/images/MailerLite2_NewCampaign.png" class="img-fluid"></p>
<p>As you complete the Campaign creation process there are a few key options to look out for.</p>
<p>As you progress through the signup form you will need to fill in some information and, including the URL of your RSS feed. It should be a URL that ends with <code>.xml</code>.</p>
<p><img src="https://isaac-flath.tech/posts/Other/images/MailerLite3_RssFeedUrl.png" class="img-fluid"></p>
<p>I recommend setting the email to only be sent when you have new blog posts. This ensures that an email is only sent if you’ve published a new post. Otherwise, an email is sent on a regular interval with the latest posts regardless of whether there is new content.</p>
<p><img src="https://isaac-flath.tech/posts/Other/images/MailerLite4_NewPostsOnly.png" class="img-fluid"></p>
<p>On the content page, choose start from scratch (free tier) or select a template (paid) and design your email that will go out.</p>
<p><img src="https://isaac-flath.tech/posts/Other/images/MailerLite5_EmailDesign.png" class="img-fluid"></p>
<div class="callout callout-style-default callout-important callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Important
</div>
</div>
<div class="callout-body-container callout-body">
<p>When you create an RSS campaign there are templates that can be used in the content tab for designing this email. These are paid features that you get for free for the first 30 days. Only use the templates if you intend to pay as they are not included in the free plan.</p>
</div>
</div>
<p>Select All Active Subscribers to send to.</p>
<p><img src="https://isaac-flath.tech/posts/Other/images/MailerLite6_CampaignRecipients.png" class="img-fluid"></p>
<div class="callout callout-style-default callout-tip callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Advanced Subscriber Settings
</div>
</div>
<div class="callout-body-container callout-body">
<p>You can create individual subscriber groups to have different campaigns go to different groups to give subscribers more options. <a href="https://isaac-flath.tech/blog.html">Example here</a>.</p>
<p><img src="https://isaac-flath.tech/posts/Other/images/MailerLite7_Groups.png" class="img-fluid"></p>
</div>
</div>
<p>Continue through to schedule your campaign!</p>
<p><img src="https://isaac-flath.tech/posts/Other/images/MailerLite8_Schedule.png" class="img-fluid"></p>
</section>
<section id="create-subscribe.html" class="level3" data-number="0.3">
<h3 data-number="0.3" class="anchored" data-anchor-id="create-subscribe.html"><span class="header-section-number">0.3</span> Create subscribe.html</h3>
<p>Now that the campaign is set up and will go out to all subscribers, we need to create the widget that allows users to subscribe to the blog. In other words we need a way for users to sign up! In Quarto, this is defined in the <code>subscribe.html</code> file. First, we need to use MailerLite to create the contents.</p>
<p>In MailerLite this is called an <code>embedded form</code>. We can use their GUI to <a href="https://dashboard.mailerlite.com/forms/create?type=embedded">Create an embedded form</a>.</p>
<p><img src="https://isaac-flath.tech/posts/Other/images/MailerLite9_NewForm.png" class="img-fluid"></p>
<p>Once we start the form we can use the GUI form editor to design what we want the form to look like.</p>
<p><img src="https://isaac-flath.tech/posts/Other/images/MailerLite11_FormDesign.png" class="img-fluid"></p>
<div class="callout callout-style-default callout-tip callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Tip
</div>
</div>
<div class="callout-body-container callout-body">
<p>I recommend leaving it with the default design for now, you can always come back and re-style it later if you don’t like how it looks on your blog. But it’s much easier to get something working then improve upon it once it’s working than to try to make something perfect the first time through!</p>
</div>
</div>
<p>Once you created the form it will take you to that forms <code>Overview</code> page. Scroll down to look for the <code>Embed form into your website</code> section. In that section select <code>HTML Code</code> and copy the code provided.</p>
<p><img src="https://isaac-flath.tech/posts/Other/images/MailerLite12_FormHtml.png" class="img-fluid"></p>
<p>Paste this code into a <code>subscribe.html</code> file at the top level of your blog’s directory.</p>
</section>
<section id="modify-_quarto.yml" class="level3" data-number="0.4">
<h3 data-number="0.4" class="anchored" data-anchor-id="modify-_quarto.yml"><span class="header-section-number">0.4</span> Modify _quarto.yml</h3>
<p>Add the <code>subscribe.html</code> file to your <code>_quarto.yml</code> file by adding it to the <code>margin-header</code> attribute. This option will look like this in your <code>_quarto.yml</code> file.</p>
<div class="sourceCode" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode yaml code-with-copy"><code class="sourceCode yaml"><span id="cb1-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">website</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span></span>
<span id="cb1-2"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">  # (additional metadata excluded for brevity)</span></span>
<span id="cb1-3"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">  </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">margin-header</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> subscribe.html</span></span></code></pre></div>
</section>
<section id="conclusion" class="level3" data-number="0.5">
<h3 data-number="0.5" class="anchored" data-anchor-id="conclusion"><span class="header-section-number">0.5</span> Conclusion</h3>
<p>That is all it takes to get subscriptions working on your blog with MailerLite! Everything you just set up is editable so if you don’t like how the email or the subscription widget looks, you can go in and edit your templates.</p>
</section>
<section id="live-example" class="level3" data-number="0.6">
<h3 data-number="0.6" class="anchored" data-anchor-id="live-example"><span class="header-section-number">0.6</span> Live example</h3>
<p>Check out <a href="https://isaac-flath.tech">Isaac Flath’s blog</a> to see the MailerLite widget in action!</p>
</section>
</div>
<div id="tabset-1-2" class="tab-pane" aria-labelledby="tabset-1-2-tab">
<p>Perhaps you don’t have an alternative address. Or perhaps you just want something simple to get started with. There’s still a way to implement blog subscriptions! It requires more manual effort, but gets the job done: embedding online forms (e.g., Google Forms, Microsoft Forms, etc.).</p>
<p>It involves embedding a form in your website, collecting responses from it, creating a mailing list from those responses, and then composing and sending an email with the list.</p>
<p>The example in the steps below use Google Forms, though it would be very similar to Microsoft Forms. The steps below should also generally apply to any other online forms service.</p>
<section id="step-1-create-the-form." class="level3" data-number="0.7">
<h3 data-number="0.7" class="anchored" data-anchor-id="step-1-create-the-form."><span class="header-section-number">0.7</span> Step 1: Create the form.</h3>
<p>Using your online form provider of choice, create your form! A simple form would include a text box for inputting an email, with a simple check to see if the entered email is valid.</p>
<p><img src="https://isaac-flath.tech/posts/Other/images/1.png" class="img-fluid"></p>
<p>On Google Forms, you have an option to implement email checking with the following option.</p>
<p><img src="https://isaac-flath.tech/posts/Other/images/2.png" class="img-fluid"></p>
<p><img src="https://isaac-flath.tech/posts/Other/images/3.png" class="img-fluid"></p>
<div class="callout callout-style-simple callout-note">
<div class="callout-body d-flex">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-body-container">
<p>You may want to allow responses to be edited after submission, create a confirmation message, and disable a link to submit another response.</p>
<p>In Google Forms, these options can be toggled under the ‘Settings’ tab.</p>
</div>
</div>
</div>
</section>
<section id="step-2-obtain-the-embed-snippet." class="level3" data-number="0.8">
<h3 data-number="0.8" class="anchored" data-anchor-id="step-2-obtain-the-embed-snippet."><span class="header-section-number">0.8</span> Step 2: Obtain the embed snippet.</h3>
<p>Obtain the HTML snippet which you can paste into your website’s source.</p>
<p>To do this, press send…</p>
<p><img src="https://isaac-flath.tech/posts/Other/images/4.png" class="img-fluid"></p>
<p>…go to the embed tab…</p>
<p><img src="https://isaac-flath.tech/posts/Other/images/5.png" class="img-fluid"></p>
<p>…and copy the snippet.</p>
</section>
<section id="step-3-embed-the-embed" class="level3" data-number="0.9">
<h3 data-number="0.9" class="anchored" data-anchor-id="step-3-embed-the-embed"><span class="header-section-number">0.9</span> Step 3: Embed the embed</h3>
<p>Paste the snippet wherever you want to put the form on your site!</p>
<p><img src="https://isaac-flath.tech/posts/Other/images/6.png" class="img-fluid"></p>
<p>You can adjust the size of the embed by tweaking these values.</p>
<p><img src="https://isaac-flath.tech/posts/Other/images/7.png" class="img-fluid"></p>
</section>
<section id="step-4-unsubscribing." class="level3" data-number="0.10">
<h3 data-number="0.10" class="anchored" data-anchor-id="step-4-unsubscribing."><span class="header-section-number">0.10</span> Step 4: Unsubscribing.</h3>
<p>Repeat steps 1-3 above and create a form that would allow subscribers to unsubscribe from receiving notifications. Make sure this form is clearly accessible in your site.</p>
</section>
<section id="step-5-gathering-emails." class="level3" data-number="0.11">
<h3 data-number="0.11" class="anchored" data-anchor-id="step-5-gathering-emails."><span class="header-section-number">0.11</span> Step 5: Gathering emails.</h3>
<p>Head to the responses tab of your form.</p>
<p><img src="https://isaac-flath.tech/posts/Other/images/8.png" class="img-fluid"></p>
<p>You can take these email addresses and create a mailing list in the email service of your choice.</p>
<p>You can also download a CSV file containing the responses.</p>
<p><img src="https://isaac-flath.tech/posts/Other/images/9.png" class="img-fluid"></p>
<p>Alternatively, you can also create a spreadsheet by clicking on the spreadsheet icon.</p>
<p><img src="https://isaac-flath.tech/posts/Other/images/10.png" class="img-fluid"></p>
<p><img src="https://isaac-flath.tech/posts/Other/images/11.png" class="img-fluid"></p>
<p><strong>At the same time,</strong> check the responses in your unsubscribe form and tally them against the responses received in your subscribe form. Remove any email addresses that need to be removed.</p>
</section>
<section id="step-6-compose-and-send" class="level3" data-number="0.12">
<h3 data-number="0.12" class="anchored" data-anchor-id="step-6-compose-and-send"><span class="header-section-number">0.12</span> Step 6: Compose and send!</h3>
<p>Now compose the email how you would like to, and hit that send button!</p>
<div class="callout callout-style-simple callout-warning callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Before you hit that send button!
</div>
</div>
<div class="callout-body-container callout-body">
<p>Make sure you include a clearly visible link in your email that would allow recipients to unsubscribe.</p>
</div>
</div>
</section>
<section id="step-0-extras" class="level3" data-number="0.13">
<h3 data-number="0.13" class="anchored" data-anchor-id="step-0-extras"><span class="header-section-number">0.13</span> Step 0: Extras</h3>
<div class="callout callout-style-simple callout-tip">
<div class="callout-body d-flex">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-body-container">
<p>You could combine the subscribe and unsubscribe forms into a single form so it would be easier to manage. The form would initially ask if a user would like to subscribe or unsubscribe. Based on their input, the form would take them to the appropriate section.</p>
<p>Further expanding on this, if your site has multiple feeds, the form could also ask which feed the user would like to subscribe to or unsubscribe from.</p>
</div>
</div>
</div>
</section>
<section id="live-example-1" class="level3" data-number="0.14">
<h3 data-number="0.14" class="anchored" data-anchor-id="live-example-1"><span class="header-section-number">0.14</span> Live example</h3>
<p>Check out <a href="https://forbo7.github.io/forblog/">Salman Naqvi’s ForBlog</a> to see embedded forms in action!</p>
</section>
</div>
<div id="tabset-1-3" class="tab-pane" aria-labelledby="tabset-1-3-tab">
<section id="option-3" class="level2" data-number="1">
<h2 data-number="1" class="anchored" data-anchor-id="option-3"><span class="header-section-number">1</span> Option 3</h2>
<p>Perhaps you know some HTML and JS, or even only JS, and don’t have an alternative address. Instead of creating the frontend with HTML, try using the <a href="https://github.com/jlgraves-ubc/forms">Quarto HTML Forms</a> extension by <a href="https://github.com/jlgraves-ubc">Jonathan Graves</a>.</p>
<p>This extension allows you to implement HTML forms through Quarto Shortcodes and YAML Options. However, you still will need to handle the backend with JavaScript and perhaps a few other technologies. If you’re interested in implementing it this way, you probably already know how to. If not, there are plenty of great guides online!.</p>
</section>
</div>
</div>
</div>
<section id="acknowledgements" class="level2" data-number="2">
<h2 data-number="2" class="anchored" data-anchor-id="acknowledgements"><span class="header-section-number">2</span> Acknowledgements</h2>
<p>Thanks to Salman Naqvi for collaborating with me on this guide! You can view his blog, works, and contact <a href="https://forbo7.github.io/">here</a>.</p>


</section>

 ]]></description>
  <category>Quarto</category>
  <guid>https://isaac-flath.tech/posts/Other/QuartoBlogSubscriptions.html</guid>
  <pubDate>Fri, 23 Dec 2022 05:00:00 GMT</pubDate>
  <media:content url="https://isaac-flath.tech/posts/_TopicImages/Quarto.jpg" medium="image" type="image/jpeg"/>
</item>
<item>
  <title>Advent of Code APL 2022</title>
  <dc:creator>Isaac Flath</dc:creator>
  <link>https://isaac-flath.tech/posts/APL/APLAdventOfCode2022.html</link>
  <description><![CDATA[ 





<div id="60960780-54e0-4ce3-adb9-1e34f5cc34bf" class="cell">
<pre class="apl cell-code"><code>]box on
]rows on</code></pre>
<div class="cell-output cell-output-display">
<pre class="language-APL">Was ON
</pre>
</div>
<div class="cell-output cell-output-display">
<pre class="language-APL">Was OFF
</pre>
</div>
</div>
<p>In this blog post I will supply my solutions to <a href="https://adventofcode.com/2022">Advent of Code 2022</a> as I work through them in APL. I don’t expect to keep up with doing them every day, but will work on them as I have time and keep adding to this post.</p>
<section id="day-1" class="level1" data-number="1">
<h1 data-number="1"><span class="header-section-number">1</span> Day 1</h1>
<section id="solution" class="level2" data-number="1.1">
<h2 data-number="1.1" class="anchored" data-anchor-id="solution"><span class="header-section-number">1.1</span> Solution</h2>
<div id="4725af9f-630d-489e-8e07-3a26834534ab" class="cell">
<pre class="apl cell-code"><code>f ← ,⎕CSV 'day1_input.txt' ⍬4
sums ← {+/¨ (≢¨⍵) ⊆⊢ ⍵} f
part1 ← ⌈/ sums
part2 ← +/ 3↑sums[⍒sums]</code></pre>
</div>
<div id="6e877c5f-5ded-4870-8a78-f7ed07cb500e" class="cell">
<pre class="apl cell-code"><code>'Part 1 Solution : ' part1
'Part 2 Solution : ' part2</code></pre>
<div class="cell-output cell-output-display">
<pre class="language-APL">┌──────────────────┬─────┐
│Part 1 Solution : │71780│
└──────────────────┴─────┘
</pre>
</div>
<div class="cell-output cell-output-display">
<pre class="language-APL">┌──────────────────┬──────┐
│Part 2 Solution : │212489│
└──────────────────┴──────┘
</pre>
</div>
</div>
</section>
<section id="explanation" class="level2" data-number="1.2">
<h2 data-number="1.2" class="anchored" data-anchor-id="explanation"><span class="header-section-number">1.2</span> Explanation</h2>
<p><strong>Shared Code:</strong></p>
<ul>
<li><code>(≢¨f)</code> : Create a mask of items we can use to separate inventories of each elf</li>
<li><code>(≢¨⍵) ⊆⊢ ⍵</code> : Use mask to break data into sub-arrays for each elf</li>
<li><code>+/¨ (≢¨⍵) ⊆⊢ ⍵</code> : Sum inventory of each elf</li>
</ul>
<p><strong>Part 1:</strong></p>
<ul>
<li><code>⌈/</code> : Get maximum value from array created above</li>
</ul>
<p><strong>Part 2:</strong></p>
<ul>
<li><code>sums[⍒sums]</code> : Sort array in descending order</li>
<li><code>3↑sums[⍒sums]</code> : Get first (largest) 3 items in array</li>
<li><code>+/ 3↑sums[⍒sums]</code> : Sum the first (largest) 3 items in array</li>
</ul>
</section>
</section>
<section id="day-2" class="level1" data-number="2">
<h1 data-number="2"><span class="header-section-number">2</span> Day 2</h1>
<section id="solution-1" class="level2" data-number="2.1">
<h2 data-number="2.1" class="anchored" data-anchor-id="solution-1"><span class="header-section-number">2.1</span> Solution</h2>
<div id="5e771a82-0630-49bd-b2e9-e087fb9eee7e" class="cell">
<pre class="apl cell-code"><code>f ← ⎕CSV 'day2_input.txt' ⍬4
lookup ← {+/ S[C ⍳ ,⍵]}

C S←↓⍉9 2⍴'A X' 4 'B X' 1 'C X' 7 'A Y' 8 'B Y' 5 'C Y' 2 'A Z' 3 'B Z' 9 'C Z' 6
C
S
part1 ← lookup f

C S←↓⍉9 2⍴'A X' 3 'A Y' 4 'A Z' 8 'B X' 1 'B Y' 5 'B Z' 9 'C X' 2 'C Y' 6 'C Z' 7
C
S
part2 ← lookup f</code></pre>
<div class="cell-output cell-output-display">
<pre class="language-APL">┌───┬───┬───┬───┬───┬───┬───┬───┬───┐
│A X│B X│C X│A Y│B Y│C Y│A Z│B Z│C Z│
└───┴───┴───┴───┴───┴───┴───┴───┴───┘
</pre>
</div>
<div class="cell-output cell-output-display">
<pre class="language-APL">4 1 7 8 5 2 3 9 6
</pre>
</div>
<div class="cell-output cell-output-display">
<pre class="language-APL">┌───┬───┬───┬───┬───┬───┬───┬───┬───┐
│A X│A Y│A Z│B X│B Y│B Z│C X│C Y│C Z│
└───┴───┴───┴───┴───┴───┴───┴───┴───┘
</pre>
</div>
<div class="cell-output cell-output-display">
<pre class="language-APL">3 4 8 1 5 9 2 6 7
</pre>
</div>
</div>
<div id="9e281222-8328-4442-b5f0-f8bb5ebc3eed" class="cell">
<pre class="apl cell-code"><code>'Part 1 Solution : ' part1
'Part 2 Solution : ' part2</code></pre>
<div class="cell-output cell-output-display">
<pre class="language-APL">┌──────────────────┬─────┐
│Part 1 Solution : │13446│
└──────────────────┴─────┘
</pre>
</div>
<div class="cell-output cell-output-display">
<pre class="language-APL">┌──────────────────┬─────┐
│Part 2 Solution : │13509│
└──────────────────┴─────┘
</pre>
</div>
</div>
</section>
<section id="explanation-1" class="level2" data-number="2.2">
<h2 data-number="2.2" class="anchored" data-anchor-id="explanation-1"><span class="header-section-number">2.2</span> Explanation</h2>
<p><strong>Shared Code:</strong></p>
<ul>
<li><code>C ⍳ ,f</code> : Look up each item in f and find its index location in C</li>
<li><code>S[C ⍳ ,⍵]</code> : Use indexes to get array of scores</li>
<li><code>{+/ S[C ⍳ ,⍵]}</code> : Sum array</li>
</ul>
<p><strong>Part 1:</strong></p>
<ul>
<li>Define mapping of each possibility to score</li>
<li>Use function defined above</li>
</ul>
<p><strong>Part 2:</strong></p>
<ul>
<li>Define mapping of each possibility to score</li>
<li>Use function defined above</li>
</ul>
</section>
</section>
<section id="day-3" class="level1" data-number="3">
<h1 data-number="3"><span class="header-section-number">3</span> Day 3</h1>
<section id="solution-2" class="level2" data-number="3.1">
<h2 data-number="3.1" class="anchored" data-anchor-id="solution-2"><span class="header-section-number">3.1</span> Solution</h2>
<div id="eb6ee9e2-a971-4d6b-8998-8ac7d229bf0c" class="cell">
<pre class="apl cell-code"><code>f ← (⎕A,⍨⎕C ⎕A)∘⍳¨⊃⎕NGET'day3_input.txt'1

part1 ← +/1↑¨{(2÷⍨⍴¨⍵)(↑∩↓)¨⍵}f

part2 ← +/1↑¨∩/{(3÷⍨≢⍵)3⍴⍵}f</code></pre>
</div>
<div id="0257e0b5-7f27-4f55-a3c6-c7bf469af773" class="cell">
<pre class="apl cell-code"><code>'Part 1 Solution : ' part1
'Part 2 Solution : ' part2</code></pre>
<div class="cell-output cell-output-display">
<pre class="language-APL">┌──────────────────┬──────┐
│Part 1 Solution : │┌────┐│
│                  ││7785││
│                  │└────┘│
└──────────────────┴──────┘
</pre>
</div>
<div class="cell-output cell-output-display">
<pre class="language-APL">┌──────────────────┬──────┐
│Part 2 Solution : │┌────┐│
│                  ││2633││
│                  │└────┘│
└──────────────────┴──────┘
</pre>
</div>
</div>
</section>
<section id="explanation-2" class="level2" data-number="3.2">
<h2 data-number="3.2" class="anchored" data-anchor-id="explanation-2"><span class="header-section-number">3.2</span> Explanation</h2>
<p><strong>Shared Code:</strong></p>
<ul>
<li><code>⊃⎕NGET'day3_input.txt'1</code> : Load the data</li>
<li><code>(⎕A,⍨⎕C ⎕A)</code> : Get alphabet (lower and upper case)</li>
<li><code>∘⍳¨</code> : Index into each piece of data to find position in alphabet</li>
</ul>
<p><strong>Part1:</strong></p>
<ul>
<li><code>⍴¨w</code> : Get length of each elf’s inventory</li>
<li><code>(2÷⍨⍴¨w)</code> : Divide by 2 to get half-way point</li>
<li><code>{(2÷⍨⍴¨w) (↑∩↓)¨ ⍵}</code> : Function to the intersection of the first and last halves of each elf’s inventory</li>
<li><code>1↑¨ {(2÷⍨⍴¨w) (↑∩↓)¨ ⍵} f</code> : de-dupe by keeping only 1st result for each elf</li>
<li><code>+/1↑¨∩/{(3÷⍨≢⍵)3⍴⍵}f</code> : Sum</li>
</ul>
<p><strong>Part2:</strong></p>
<ul>
<li><code>(3÷⍨≢⍵)</code> : Get number of groups of elves</li>
<li><code>{(3÷⍨≢⍵)3⍴⍵</code> : Reshape data to be a n_groups x 3 elves matrix</li>
<li><code>∩/{(3÷⍨≢⍵)3⍴⍵}f</code> : Get the intersection (items that all 3 elves have)</li>
<li><code>1↑¨∩/{(3÷⍨≢⍵)3⍴⍵}f</code> : de-dupe by keeping only 1st result for each elf</li>
<li><code>+/1↑¨∩/{(3÷⍨≢⍵)3⍴⍵}f</code> : Sum</li>
</ul>
</section>
</section>
<section id="day-4" class="level1" data-number="4">
<h1 data-number="4"><span class="header-section-number">4</span> Day 4</h1>
<section id="solution-3" class="level2" data-number="4.1">
<h2 data-number="4.1" class="anchored" data-anchor-id="solution-3"><span class="header-section-number">4.1</span> Solution</h2>
<div id="0e184b2a-636f-4601-a3ce-8140c50ec7ef" class="cell">
<pre class="apl cell-code"><code>f ← {⎕csv⍠'Separator' '-'⊢⍵⍬4}¨↓⍉⎕csv'day4_input.txt'
c1 c2 c3 c4 ← ↓⍉⊃,/f
fn ← {a1 a2←⍺ ⋄ w1 w2←⍵ ⋄ a1≤w1 ∧ a2≥w2}

part1 ← +/ (c1 c2 fn c3 c4) ∨ c3 c4 fn c1 c2
part2 ← +/ (c1 c2 fn c3 c3) ∨ c3 c4 fn c1 c1</code></pre>
</div>
<div id="4f3ebe43-9aaa-4dd0-a5b6-c9d1d949ec9f" class="cell">
<pre class="apl cell-code"><code>+/c1 c2 fn c3 c4
+/c3 c4 fn c1 c2</code></pre>
<div class="cell-output cell-output-display">
<pre class="language-APL">293
</pre>
</div>
<div class="cell-output cell-output-display">
<pre class="language-APL">333
</pre>
</div>
</div>
<div id="b600ecfe-45b4-4e36-be17-367c9c9354ff" class="cell">
<pre class="apl cell-code"><code>'Part 1 Solution : ' part1
'Part 2 Solution : ' part2</code></pre>
<div class="cell-output cell-output-display">
<pre class="language-APL">┌──────────────────┬───┐
│Part 1 Solution : │599│
└──────────────────┴───┘
</pre>
</div>
<div class="cell-output cell-output-display">
<pre class="language-APL">┌──────────────────┬───┐
│Part 2 Solution : │928│
└──────────────────┴───┘
</pre>
</div>
</div>
</section>
<section id="explanation-3" class="level2" data-number="4.2">
<h2 data-number="4.2" class="anchored" data-anchor-id="explanation-3"><span class="header-section-number">4.2</span> Explanation</h2>
<p><strong>Shared Code:</strong></p>
<ul>
<li><p>Read File</p>
<ul>
<li><p><code>⎕csv'day4_input.txt' ⍬4</code> : Read CSV file</p></li>
<li><p><code>↓⍉⎕csv'day4_input.txt'</code> Transpose and put into format for processing</p></li>
<li><p><code>{⎕csv⍠'Separator' '-'⊢⍵⍬4}¨↓⍉⎕csv'day4_input.txt'</code> : Process each column as a nested csv with <code>-</code> as the separator to split out start/end numbers</p></li>
<li><p><code>⊃,/{⎕csv⍠'Separator' '-'⊢⍵⍬4}¨↓⍉5↑⎕csv'day4_input.txt'</code> : Convert nested arrays into flat 2d matrix</p></li>
<li><p><code>↓⍉⊃,/{⎕csv⍠'Separator' '-'⊢⍵⍬4}¨↓⍉5↑⎕csv'day4_input.txt'</code> : Reformat into column vectors for destructured assignment</p></li>
</ul></li>
<li><p>Format Matrix</p>
<ul>
<li><code>⊃,/f</code> : Convert nested arrays into flat 2d matrix</li>
<li><code>↓⍉⊃,/f</code> : Create separate column vectors for destructured assignment</li>
</ul></li>
<li><p>Boolean logic</p>
<ul>
<li><code>a1 a2 ← ⍺ ⋄ w1 w2 ← ⍵</code> : Destructured assignment to split out function arguments</li>
<li><code>(a1 ≤ w1 ∧ a2 ≥ w2)</code> : Boolean logic for problem</li>
</ul></li>
</ul>
<p><strong>Part 1:</strong></p>
<ul>
<li><code>c1 c2 fn c3 c4</code> : Does the 1st elf’s assignment fully enclose the 2nd elf’s assignment?</li>
<li><code>c3 c4 fn c1 c2</code> : Does the 2nd elf’s assignment fully enclose the 1st elf’s assignment?</li>
<li><code>(c1 c2 fn c3 c4) ∨ c3 c4 fn c1 c2</code> : Combine with <code>or</code> logic</li>
<li><code>+/ (c1 c2 fn c3 c4) ∨ c3 c4 fn c1 c2</code> : Sum booleans to get part 1 solution</li>
</ul>
<p><strong>Part 2:</strong></p>
<ul>
<li><code>c1 c2 fn c3 c3</code> : Does the 1st elf’s assignment enclose the 2nd elf’s lowest assignment?</li>
<li><code>c3 c4 fn c1 c1</code> : Does the 2nd elf’s assignment enclose the 1st elf’s lowest assignment?</li>
<li><code>(c1 c2 fn c3 c3) ∨ c3 c4 fn c1 c1</code> : Combine with <code>or</code> logic</li>
<li><code>+/ (c1 c2 fn c3 c3) ∨ c3 c4 fn c1 c1</code> : Sum booleans to get part 2 solution</li>
</ul>
</section>
</section>
<section id="day-5" class="level1" data-number="5">
<h1 data-number="5"><span class="header-section-number">5</span> Day 5</h1>
<section id="solution-4" class="level2" data-number="5.1">
<h2 data-number="5.1" class="anchored" data-anchor-id="solution-4"><span class="header-section-number">5.1</span> Solution</h2>
<div id="556a379a-d60c-4000-aaf9-870e8789fb21" class="cell">
<pre class="apl cell-code"><code>board moves ← (∊~0=⍴¨f)⊆(f←⊃⎕NGET'day5_input.txt'1)

moves ← ⌽↓(6⍴0 1)/⎕csv⍠'Separator' ' '⊢moves⍬4

board ← ¯1↓⎕csv⍠'Widths' ((8⍴4),3)⊢board⍬4
board ← ' '∘(1↓,⊢⍤/⍨1(⊢∨⌽)0,≠)¨↓⍉⊃¨1↓¨board

step ← {(move from to)←⍺ ⋄ ((⍺⍺ move↑⊃⍵[from])∘,¨@to)(move∘↓¨@from)⍵}
⎕ ← 'part 1: ',⊃¨⊃ ⌽step/moves,⊂board

⎕ ← 'part 2: ',⊃¨⊃ ⊣step/moves,⊂board</code></pre>
<div class="cell-output cell-output-display">
<pre class="language-APL">part 1: JRVNHHCSJ
</pre>
</div>
<div class="cell-output cell-output-display">
<pre class="language-APL">part 2: GNFBSBJLH
</pre>
</div>
</div>
</section>
<section id="explanation-4" class="level2" data-number="5.2">
<h2 data-number="5.2" class="anchored" data-anchor-id="explanation-4"><span class="header-section-number">5.2</span> Explanation</h2>
<p><strong>Shared Code:</strong></p>
<ul>
<li><p>File Processing</p>
<ul>
<li><code>(f←⊃⎕NGET'day5_input.txt'1)</code> : Read file</li>
<li><code>(∊~0=⍴¨f)</code> Create boolean mask indicating where the board and moves section split is</li>
<li><code>(∊~0=⍴¨f)⊆(f←⊃⎕NGET'day5_input.txt'1)</code> : Use boolean mask to partition board and moves to separate variables</li>
</ul></li>
<li><p>Clean Moves Input</p>
<ul>
<li><code>⎕csv⍠'Separator' ' '⊢moves⍬4</code> : Process moves data as a CSV with space as separator</li>
<li><code>(6⍴0 1)/⎕csv⍠'Separator' ' '⊢moves⍬4</code> : Remove the non-numeric columns with words in them</li>
<li><code>↓(6⍴0 1)/⎕csv⍠'Separator' ' '⊢moves⍬4</code> : Change to vector of columns for processing</li>
<li><code>⌽↓(6⍴0 1)/⎕csv⍠'Separator' ' '⊢moves⍬4</code> : Reverse so we can process as a reduction</li>
</ul></li>
<li><p>Clean Board Input</p>
<ul>
<li><code>⊃¨1↓¨board</code> : Strip brackets and unnest matrix</li>
<li><code>↓⍉⊃¨1↓¨board</code>: Format into vector of columns for processing</li>
<li><code>' '∘(1↓,⊢⍤/⍨1(⊢∨⌽)0,≠)↓⍉⊃¨1↓¨board</code> : Remove leading, trailing and duplicate blanks</li>
</ul></li>
<li><p>Step Function:</p>
<ul>
<li><code>(move from to)←⍺</code> : Break numeric arguments for move instructions into separate variables</li>
<li><code>⍵[from]</code> : Get the items in the “from” location</li>
<li><code>move↑⊃⍵[from]</code> : Take only the move quantity from the items in the from location</li>
<li><code>(⍺⍺ move↑⊃⍵[from])</code> : Apply a function to the items in the from location before doing anything else</li>
<li><code>(⍺⍺ move↑⊃⍵[from])∘,¨@to)</code> : Add the items in the <code>from</code> location to the <code>to</code> location</li>
<li><code>(move∘↓¨@from)</code> : Drop the items being moved from the from location</li>
<li><code>{(move from to)←⍺ ⋄ ((⍺⍺ move↑⊃⍵[from])∘,¨@to)(move∘↓¨@from)⍵}</code> : Combine for function definition</li>
</ul></li>
</ul>
<p><strong>Part 1:</strong></p>
<ul>
<li><code>⌽ step/moves,⊂board</code> : Call the step function using a reduction across the moves. When moving the boxes reverse the lists so it simulates moving one box at a time.</li>
<li><code>⊃¨⊃ ⌽ step/moves,⊂board</code> : Take only the first element in each cell</li>
</ul>
<p><strong>Part 2:</strong></p>
<ul>
<li><code>⌽ step/moves,⊂board</code> : Call the step function using a reduction across the moves. When moving the boxes do not reverse (identity function) so it simulates moving a full stack at a time.</li>
<li><code>⊃¨⊃ ⌽ step/moves,⊂board</code> : Take only the first element in each cell</li>
</ul>
</section>
</section>
<section id="day-6" class="level1" data-number="6">
<h1 data-number="6"><span class="header-section-number">6</span> Day 6</h1>
<section id="solution-5" class="level2" data-number="6.1">
<h2 data-number="6.1" class="anchored" data-anchor-id="solution-5"><span class="header-section-number">6.1</span> Solution</h2>
<div id="b8eeaed5-4dd7-44d0-b4a8-b8bc9e89dbe9" class="cell">
<pre class="apl cell-code"><code>f← ∊⎕CSV'day6_input.txt'
part1 part2 ← {¯1+⍵+⍵⍳⍨≢¨⍵∪/f}¨ 4 14</code></pre>
</div>
<div id="f98b1c07-f871-4997-97a7-54c06a8e3633" class="cell">
<pre class="apl cell-code"><code>'Part 1 Solution : ' part1
'Part 2 Solution : ' part2</code></pre>
<div class="cell-output cell-output-display">
<pre class="language-APL">┌──────────────────┬────┐
│Part 1 Solution : │1760│
└──────────────────┴────┘
</pre>
</div>
<div class="cell-output cell-output-display">
<pre class="language-APL">┌──────────────────┬────┐
│Part 2 Solution : │2974│
└──────────────────┴────┘
</pre>
</div>
</div>
</section>
<section id="explanation-5" class="level2" data-number="6.2">
<h2 data-number="6.2" class="anchored" data-anchor-id="explanation-5"><span class="header-section-number">6.2</span> Explanation</h2>
<p><strong>Shared Code:</strong></p>
<ul>
<li><code>f← ∊⎕CSV'day6_input.txt'</code> : Read data file</li>
<li><code>∪/f</code> : Get unique characters from input data</li>
<li><code>⍵∪/f</code> : Instead of unique characters from input data, unique characters in each group of <code>⍵</code> characters from input data.</li>
<li><code>≢¨⍵∪/f</code> : Get number of unique characters are in each group</li>
<li><code>⍵⍳⍨≢¨⍵∪/f</code> : Look for the first group where the number of unique characters is equal to <code>⍵</code></li>
<li><code>¯1+⍵+⍵⍳⍨≢¨⍵∪/f</code> : Get ending index of group instead of starting location of group</li>
</ul>
<p><strong>Part 1:</strong></p>
<ul>
<li>Apply function to window size of 4</li>
</ul>
<p><strong>Part 2:</strong></p>
<ul>
<li>Apply function to window size of 14</li>
</ul>
</section>
</section>
<section id="the-end" class="level1" data-number="7">
<h1 data-number="7"><span class="header-section-number">7</span> The End</h1>
<p>I have decided not to finish advent of code in APL for now. There are several reasons for this:</p>
<section id="personal" class="level2" data-number="7.1">
<h2 data-number="7.1" class="anchored" data-anchor-id="personal"><span class="header-section-number">7.1</span> Personal</h2>
<ul>
<li>I went to a dance competition for 4 days an won! I had very ambitious plans to keep up while at the competition. In reality I didn’t even open my laptop while there.</li>
<li>My family is visiting and I am spending time with them</li>
</ul>
</section>
<section id="apl" class="level2" data-number="7.2">
<h2 data-number="7.2" class="anchored" data-anchor-id="apl"><span class="header-section-number">7.2</span> APL</h2>
<p>The time it takes to solve each in APL is getting much longer. There are two main things that are super common in advent of code that APL does not handle well. This was a good learning experience.</p>
<ul>
<li><p>APL seems to be clunky at handling data cleaning, which many of these challenges from here on out include.</p></li>
<li><p>APL seems to handle flat (ie numeric) arrays extremely well. Nested arrays such as text are not as clean. Many of the problems require text data as well.</p></li>
</ul>
<p>This is useful to know. Part of the reason I was interested in working on this is APL was to understand what I would and would not use the language for. Many proponents of APL use it for almost everything - that’s not I think is best in my opinion.</p>
<p>I still plan to use APL as a tool for thought when reading and implement research papers. But once I understand the contents of the paper I will move to another language to apply the concept to real world data.</p>


</section>
</section>

 ]]></description>
  <category>APL</category>
  <category>Advent of Code</category>
  <guid>https://isaac-flath.tech/posts/APL/APLAdventOfCode2022.html</guid>
  <pubDate>Fri, 02 Dec 2022 05:00:00 GMT</pubDate>
  <media:content url="https://isaac-flath.tech/posts/_TopicImages/APL.jpg" medium="image" type="image/jpeg"/>
</item>
<item>
  <title>Quarto Document Best Practices</title>
  <dc:creator>Isaac Flath</dc:creator>
  <link>https://isaac-flath.tech/posts/Other/QuartoDocumentsBestPractices.html</link>
  <description><![CDATA[ 





<section id="why-quarto" class="level1" data-number="1">
<h1 data-number="1"><span class="header-section-number">1</span> Why Quarto</h1>
<p>I use quarto documents <strong>every day</strong>. It is used when I am developing, I use it for my website, and I use it for client presentations.</p>
<div class="callout callout-style-default callout-tip callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Quarto Benefits
</div>
</div>
<div class="callout-body-container callout-body">
<ul>
<li>Version control is very nice for presentations</li>
<li>Text, docs, code ouputs, plots, code, tests all in one place.</li>
<li>Easy to make really good looking outputs</li>
<li>Learn one tool for lots of formats - documents, presentations, websites, development</li>
<li>Rendering to html is a option for sharing. It’s more powerful than pdf and everyone can open it in their browser.</li>
</ul>
</div>
</div>
<p>I have some starter Quarto templates <a href="https://github.com/Isaac-Flath/QuartoTemplates">here</a> that will be useful in conjunction with this post.</p>
</section>
<section id="text-formatting" class="level1" data-number="2">
<h1 data-number="2"><span class="header-section-number">2</span> Text Formatting</h1>
<div class="tabset-margin-container"></div><div class="panel-tabset" data-group="setup">
<ul class="nav nav-tabs"><li class="nav-item"><a class="nav-link active" id="tabset-1-1-tab" data-bs-toggle="tab" data-bs-target="#tabset-1-1" aria-controls="tabset-1-1" aria-selected="true">Markdown</a></li><li class="nav-item"><a class="nav-link" id="tabset-1-2-tab" data-bs-toggle="tab" data-bs-target="#tabset-1-2" aria-controls="tabset-1-2" aria-selected="false">Panel Tabsets</a></li><li class="nav-item"><a class="nav-link" id="tabset-1-3-tab" data-bs-toggle="tab" data-bs-target="#tabset-1-3" aria-controls="tabset-1-3" aria-selected="false">Callout Blocks</a></li></ul>
<div class="tab-content" data-group="setup">
<div id="tabset-1-1" class="tab-pane active" aria-labelledby="tabset-1-1-tab">
<p>It’s important to get comfortable with <a href="https://quarto.org//docs/authoring/markdown-basics.html">markdown</a>. I see people use markdown for text. But you need to mix in other features liberally such as:</p>
<ul>
<li>Bulleted or numbered lists</li>
<li>Making accent words <strong>bold</strong> or <em>italized</em></li>
<li>Use single ticks to reference object and <code>function</code> names</li>
<li>Use headings liberally</li>
<li>Use hyperlinks to things you are referencing in <a href="https://quarto.org/">quarto</a></li>
</ul>
<blockquote class="blockquote">
<p>Blockquotes are also useful</p>
</blockquote>
</div>
<div id="tabset-1-2" class="tab-pane" aria-labelledby="tabset-1-2-tab">
<p><a href="https://quarto.org/docs/interactive/layout.html#tabset-panel">Panel tabsets</a> creates the tabs you click through in the <code>Formatting Tips</code> section. This is useful for limiting what’s shows on the screen and gives a really high quality feel above and beyond a pdf document. Use it to organize and make your document clearer and less static.</p>
</div>
<div id="tabset-1-3" class="tab-pane" aria-labelledby="tabset-1-3-tab">
<p><a href="https://quarto.org/docs/authoring/markdown-basics.html#callout-blocks">Callout blocks</a> can be used extremely liberally in documents. In a given document or presentation I use them to organize content in color coded sections based on what I think makes most sense in the context.</p>
<div class="callout callout-style-default callout-note callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Example Document Usage
</div>
</div>
<div class="callout-body-container callout-body">
<ul>
<li>Recommended actions in a blue <code>note</code> callout blocks</li>
<li>Definitions or clarification points in green <code>tip</code> callout blocks</li>
<li>Discussion points or questions in gold <code>warning</code> callout blocks</li>
<li>Problems or issues in red <code>important</code> callout blocsk</li>
</ul>
</div>
</div>
</div>
</div>
</div>
</section>
<section id="code-formatting" class="level1" data-number="3">
<h1 data-number="3"><span class="header-section-number">3</span> Code Formatting</h1>
<p>The most important items for code cell formatting are controlling what’s included and what is hidden. Here are the top ones I use for that.</p>
<ul>
<li>Code
<ul>
<li><code>code-fold</code> - Fold code with option to expand?</li>
<li><code>echo</code> - Include code in your document?</li>
<li><code>include</code> - Include code and outputs?</li>
</ul></li>
<li>Outputs
<ul>
<li><code>output</code> - Include code outputs?</li>
<li><code>include</code> - Include code and outputs?</li>
</ul></li>
</ul>
<div class="callout callout-style-default callout-tip callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Tip
</div>
</div>
<div class="callout-body-container callout-body">
<p>To use a one of these <code>directives</code> start a code cell with <code>#|</code>.</p>
<p>For example <code>#| echo: false</code> will exclude that code cell from the document.</p>
</div>
</div>
</section>
<section id="document-setup" class="level1" data-number="4">
<h1 data-number="4"><span class="header-section-number">4</span> Document Setup</h1>
<section id="front-matter" class="level2" data-number="4.1">
<h2 data-number="4.1" class="anchored" data-anchor-id="front-matter"><span class="header-section-number">4.1</span> Front Matter</h2>
<p>For documents here’s my default front matter. A few things that are important:</p>
<pre><code>---
title: "My Title"
author: "Isaac Flath"
date: "9/20/2022"
format:
  html:
    css: 'styles.css'
    number-sections: true
    toc: true
    theme: cosmo
    highlight-style: tango
    code-fold: true
    self-contained: true
---</code></pre>
<div class="callout callout-style-default callout-tip callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Tip
</div>
</div>
<div class="callout-body-container callout-body">
<ul>
<li><code>number-sections</code> makes the sections stand out more organization wise</li>
<li><code>toc</code> (table of contents) is clickable to jump to sections and I review it as my agenda at the start of meetings</li>
<li><code>code-fold</code> I often like to have all code folded by default and unhide what’s needed.</li>
<li><code>self-contained</code> is critical. This allows you to share the document for anyone to open in their browser with no hassle.</li>
</ul>
</div>
</div>
</section>
<section id="css" class="level2" data-number="4.2">
<h2 data-number="4.2" class="anchored" data-anchor-id="css"><span class="header-section-number">4.2</span> CSS</h2>
<p>There were two things that bothered me about quarto:</p>
<ul>
<li>Table of contents was too light</li>
<li>Major sections didn’t stand out enough</li>
</ul>
<p>These are fixed with a short bit of css. I sometimes add an h2 gradient from <code>lightblue</code> to <code>white</code> as well.</p>
<div class="sourceCode" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode css code-with-copy"><code class="sourceCode css"><span id="cb2-1"></span>
<span id="cb2-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">.title.toc-ignore</span> {</span>
<span id="cb2-3">  <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">font-weight</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">:</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1000</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb2-4">}</span>
<span id="cb2-5">h1<span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:not(</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">.title</span><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span>{</span>
<span id="cb2-6">  <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">background-image</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">:</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">linear-gradient(</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">120</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">deg</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">lightblue</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">blue</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">)</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb2-7">}</span></code></pre></div>
<div class="callout callout-style-default callout-tip callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Tip
</div>
</div>
<div class="callout-body-container callout-body">
<p>In the <code>frontmatter</code> section it references a <code>styles.css</code> where this is stored.</p>
</div>
</div>


</section>
</section>

 ]]></description>
  <category>Quarto</category>
  <guid>https://isaac-flath.tech/posts/Other/QuartoDocumentsBestPractices.html</guid>
  <pubDate>Fri, 11 Nov 2022 05:00:00 GMT</pubDate>
  <media:content url="https://isaac-flath.tech/posts/_TopicImages/Quarto.jpg" medium="image" type="image/jpeg"/>
</item>
<item>
  <title>MeanShift From Scratch</title>
  <dc:creator>Isaac Flath</dc:creator>
  <link>https://isaac-flath.tech/posts/Clustering/MeanShiftFromScratch.html</link>
  <description><![CDATA[ 





<section id="intro" class="level1" data-number="1">
<h1 data-number="1"><span class="header-section-number">1</span> Intro</h1>
<p>Meanshift is a clustering algorithm in the same family as <a href="../../posts/Clustering/KMeansFromScratch.html">K-Means</a>. K-Means is the much more widely known well known clustering algorithm, but is advantageous in a lot of situations.</p>
<p>First, you don’t have to decide how many clusters ahead of time. This is important because in many datasets especially as they get very complex it can be hard to know how many clusters you really should have. Meanshift requires bandwidth which is much easier to select.</p>
<p>Second, k-means looks at circular clusters. You need to do some custom work to make it work for non-circular clusters. Sometimes data doesn’t split nicely into circular clusters. Meanshift can handle clusters of any shape.</p>
<div class="callout callout-style-default callout-note callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Credit
</div>
</div>
<div class="callout-body-container callout-body">
<p>This follows what Jeremy Howard did in a notebook as part of the <a href="https://www.fast.ai/posts/part2-2022.html">2022 part 2 course</a>. I’m changing a few things, explaining things slightly different, and doing a few additional things - but his lecture covers the bulk of what in here and was the inspiration and starting point!</p>
</div>
</div>
</section>
<section id="imports-and-setup" class="level1" data-number="2">
<h1 data-number="2"><span class="header-section-number">2</span> Imports and setup</h1>
<div id="35e9e944-64a9-4afc-a267-448aa9350b02" class="cell" data-execution_count="3">
<details class="code-fold">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb1-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> math, random, matplotlib.pyplot <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> plt, operator, torch</span>
<span id="cb1-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> functools <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> partial</span>
<span id="cb1-3"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> fastcore.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">all</span> <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span></span>
<span id="cb1-4"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> torch.distributions.multivariate_normal <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> MultivariateNormal</span>
<span id="cb1-5"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> torch <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> tensor</span>
<span id="cb1-6"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> numpy <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> np</span></code></pre></div>
</details>
</div>
<div id="0d6c60d9" class="cell" data-execution_count="4">
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb2-1">plt.style.use(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'dark_background'</span>)</span></code></pre></div>
</div>
<div id="3746980b-e0f9-41f3-92c5-d0f6edf49550" class="cell" data-execution_count="5">
<details class="code-fold">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb3-1">torch.manual_seed(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">42</span>)</span>
<span id="cb3-2">torch.set_printoptions(precision<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>, linewidth<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">140</span>, sci_mode<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span>)</span></code></pre></div>
</details>
</div>
<div id="52ebf418-5f4e-45eb-8edf-5cc9eba80988" class="cell" data-execution_count="6">
<details class="code-fold">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb4-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> plot_data(centroids:torch.Tensor,<span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Centroid coordinates</span></span>
<span id="cb4-2">              data:torch.Tensor, <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Data Coordinates</span></span>
<span id="cb4-3">              n_samples:<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">int</span>, <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Number of samples</span></span>
<span id="cb4-4">              ax:plt.Axes<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span> <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Matplotlib Axes object</span></span>
<span id="cb4-5">             )<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-&gt;</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>:</span>
<span id="cb4-6">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">'''Creates a visualization of centroids and data points for clustering problems'''</span></span>
<span id="cb4-7">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> ax <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">is</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>: _,ax <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> plt.subplots()</span>
<span id="cb4-8">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> i, centroid <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">enumerate</span>(centroids):</span>
<span id="cb4-9">        samples <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> data[i<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>n_samples:(i<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>n_samples]</span>
<span id="cb4-10">        ax.scatter(samples[:,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>], samples[:,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>], s<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb4-11">        ax.plot(<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>centroid, markersize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>, marker<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"x"</span>, color<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'k'</span>, mew<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>)</span>
<span id="cb4-12">        ax.plot(<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>centroid, markersize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>, marker<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"x"</span>, color<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'m'</span>, mew<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>)</span></code></pre></div>
</details>
</div>
</section>
<section id="generate-dataset" class="level1" data-number="3">
<h1 data-number="3"><span class="header-section-number">3</span> Generate Dataset</h1>
<p>I’m using the same generated data that Jeremy did. I refactored a bit, but it’s the same thing.</p>
<div id="cee9ffac-fcaf-4bca-aa35-045b005b0fcb" class="cell" data-execution_count="7">
<div class="sourceCode cell-code" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb5-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> create_dataset(n_clusters,n_samples):</span>
<span id="cb5-2">    centroids <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.rand(n_clusters, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">70</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">35</span> <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Points between -35 and 35</span></span>
<span id="cb5-3">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> sample(m): <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> MultivariateNormal(m, torch.diag(tensor([<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">5.</span>,<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">5.</span>]))).sample((n_samples,))</span>
<span id="cb5-4">    data <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.cat([sample(c) <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> c <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> centroids])</span>
<span id="cb5-5">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> data,centroids</span></code></pre></div>
</div>
<div id="189ac354-be7a-48e1-87dd-312947bbe5a6" class="cell" data-execution_count="8">
<div class="sourceCode cell-code" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb6-1">n_clusters <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">6</span></span>
<span id="cb6-2">n_samples <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">250</span></span>
<span id="cb6-3">data,centroids <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> create_dataset(n_clusters,n_samples)</span></code></pre></div>
</div>
<div id="9b943133-498d-4947-9d51-026f2ae1809a" class="cell" data-execution_count="9">
<div class="sourceCode cell-code" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb7-1">plot_data(centroids, data, n_samples)</span></code></pre></div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://isaac-flath.tech/posts/Clustering/MeanShiftFromScratch_files/figure-html/cell-8-output-1.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
</div>
</section>
<section id="meanshift" class="level1" data-number="4">
<h1 data-number="4"><span class="header-section-number">4</span> Meanshift</h1>
<p>MeanShift is a clustering algorithm. There’s 3 main steps to the process.</p>
<div class="callout callout-style-default callout-tip callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Meanshift Algorithm
</div>
</div>
<div class="callout-body-container callout-body">
<ol type="1">
<li>Calculate distances between every point</li>
<li>Calculate weights based on distance and bandwidth</li>
<li>Update centroid predictions using weights and distances to calculate weighted average</li>
</ol>
</div>
</div>
<p>Once you have those steps, you can repeat them until you have your final centroid locations</p>
<section id="calculate-distance" class="level2" data-number="4.1">
<h2 data-number="4.1" class="anchored" data-anchor-id="calculate-distance"><span class="header-section-number">4.1</span> Calculate Distance</h2>
<p>In K-Means, you calculate the distance between each point and the cluster centroids. In meanshift we calculate the distance between each point and every other point. Given a tensor of centroid coordinates and a tensor of data coordinates we calculate distance.</p>
<div class="callout callout-style-default callout-tip callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Distance Calculation Steps
</div>
</div>
<div class="callout-body-container callout-body">
<ul>
<li>Subtract data points coordinates from all other data point coordinates</li>
<li>Take absolute value of distances</li>
<li>Pythagorean Calculation
<ul>
<li>Square coordinates</li>
<li>Add them together</li>
<li>Take the Square Root</li>
</ul></li>
</ul>
</div>
</div>
<p>Let’s put that in a function.</p>
<div id="5fb6c6c8-26b3-49f1-907e-e392ecb10887" class="cell" data-execution_count="10">
<div class="sourceCode cell-code" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb8-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> calculate_distances(data:torch.Tensor <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Data points you want to cluster</span></span>
<span id="cb8-2">                       )<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-&gt;</span> torch.Tensor: <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Tensor containing euclidean distance between each centroid and data point    </span></span>
<span id="cb8-3">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">'''Calculate distance between centroids and each datapoint'''</span></span>
<span id="cb8-4">    axis_distances <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> data.reshape(<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>).sub(data.reshape(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>,<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>))<span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#.abs()</span></span>
<span id="cb8-5">    euclid_distances <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> axis_distances.square().<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">sum</span>(axis<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>).sqrt()</span>
<span id="cb8-6">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> euclid_distances</span></code></pre></div>
</div>
</section>
<section id="calculate-weights" class="level2" data-number="4.2">
<h2 data-number="4.2" class="anchored" data-anchor-id="calculate-weights"><span class="header-section-number">4.2</span> Calculate weights</h2>
<p>Next we need to create the weights. There are 2 factors that go into calculating weights</p>
<ul>
<li>How far away is this point from the other point?</li>
<li>What’s the bandwidth?</li>
</ul>
<p>The way we use this is we create a gaussian function to determine the weight based on distance. That looks like this.</p>
<div id="0f56e972-3e04-4f62-ba90-2606d328fc09" class="cell" data-execution_count="11">
<div class="sourceCode cell-code" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb9-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> gaussian(x): <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> torch.exp(<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.5</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>((x))<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">**</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> (math.sqrt(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>math.pi))</span></code></pre></div>
</div>
<div id="dc6c2d0f-91d6-4e88-b2fa-f3590fd7e3aa" class="cell" data-execution_count="12">
<div class="sourceCode cell-code" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb10-1">_x<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>torch.linspace(<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span>)</span>
<span id="cb10-2">plt.plot(_x,gaussian(_x))<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span> plt.show()</span></code></pre></div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://isaac-flath.tech/posts/Clustering/MeanShiftFromScratch_files/figure-html/cell-11-output-1.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
</div>
<p>We modify the above slightly by adding a parameter called the bandwidth. By adjusting the bandwidth we can adjust how fast or slow the weights decay as the distance increases. A Gaussian with a bandwidth of 1 (middle chart) is just the normal distribution we saw above.</p>
<p>Because distance is never negative, we don’t need negative values</p>
<div class="callout callout-style-default callout-tip callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Tip
</div>
</div>
<div class="callout-body-container callout-body">
<p>The bandwidth is the standard deviation of the gaussian</p>
</div>
</div>
<div id="d41a1b8d-17ae-410d-a2a1-904ce03b56cc" class="cell" data-execution_count="13">
<div class="sourceCode cell-code" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb11-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> gaussian(x, bw): <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> torch.exp(<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.5</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>((x<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span>bw))<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">**</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> (bw<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>math.sqrt(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>torch.pi))</span></code></pre></div>
</div>
<div id="ca2e6a47-18a2-44d6-a546-5fd2b8cfb293" class="cell" data-execution_count="14">
<div class="sourceCode cell-code" id="cb12" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb12-1">_x<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>torch.linspace(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span>)</span>
<span id="cb12-2">fig,ax <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> plt.subplots(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>,figsize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">15</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>))</span>
<span id="cb12-3"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> a,bw <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">zip</span>(ax,[<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">.5</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>]):</span>
<span id="cb12-4">    a.plot(_x, gaussian(_x, bw))</span>
<span id="cb12-5">    a.set_title(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"Gaussian with bandwidth=</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>bw<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb12-6">    a.set_xlabel(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Distance'</span>)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span> a.set_ylabel(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Weight'</span>)</span>
<span id="cb12-7">plt.show()</span></code></pre></div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://isaac-flath.tech/posts/Clustering/MeanShiftFromScratch_files/figure-html/cell-13-output-1.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
</div>
</section>
<section id="update-centroids" class="level2" data-number="4.3">
<h2 data-number="4.3" class="anchored" data-anchor-id="update-centroids"><span class="header-section-number">4.3</span> Update Centroids</h2>
<p>Now that we have our distance and weights we can update our centroid predictions and loop through until the points converge to give us cluster locations. We do this by taking a weighted average of all the other points based (using the weights calculated previously).</p>
<div id="db6a5401-6814-48a4-a4be-c09a02470f02" class="cell" data-execution_count="15">
<div class="sourceCode cell-code" id="cb13" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb13-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> meanshift(X):</span>
<span id="cb13-2">    dist <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> calculate_distances(X)</span>
<span id="cb13-3">    weight <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> gaussian(dist, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">2.5</span>)</span>
<span id="cb13-4">    X <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> weight<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">@</span>X<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span>weight.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">sum</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>,keepdim<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>)</span>
<span id="cb13-5">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> X</span></code></pre></div>
</div>
</section>
<section id="all-together" class="level2" data-number="4.4">
<h2 data-number="4.4" class="anchored" data-anchor-id="all-together"><span class="header-section-number">4.4</span> All Together</h2>
<p>Now that we have our meanshift function, we can create a function to run the model for several epochs and a function to plot the results. A few nuances here:</p>
<ul>
<li>I am making <code>run_exp</code> a higher order function so it’s easy to try tweaks to the algorithm</li>
<li>I am testing if the coordinates change. If coordinates do not change I consider it converged and stop the training. I will run the model until it converges or after 100 epochs.</li>
</ul>
<div id="5b8fad82-1c9b-433b-923c-dc4b35eab9e1" class="cell" data-execution_count="16">
<div class="sourceCode cell-code" id="cb14" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb14-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> run_exp(data,fn,max_epochs<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span>):</span>
<span id="cb14-2">    coord <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> data.clone() </span>
<span id="cb14-3">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> i <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(max_epochs):</span>
<span id="cb14-4">        _coord <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> fn(coord)</span>
<span id="cb14-5">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> (i<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>) <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">and</span> (coord<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span>_coord).<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">all</span>()<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>: <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">break</span></span>
<span id="cb14-6">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">else</span>:</span>
<span id="cb14-7">            coord <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> _coord</span>
<span id="cb14-8">            p_centroids <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.unique(coord,dim<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>)</span>
<span id="cb14-9">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> p_centroids,coord,i</span></code></pre></div>
</div>
<p>Next I create a couple functions to help me try things quickly and not have to scroll through duplicate print/plot code lines.</p>
<div id="a0a66f1d-563d-490d-ac23-d9a548389425" class="cell" data-execution_count="17">
<div class="sourceCode cell-code" id="cb15" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb15-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> plot_results(centroids,p_centroids):</span>
<span id="cb15-2">    _,ax <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> plt.subplots()</span>
<span id="cb15-3">    ax.scatter(p_centroids[:,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>],p_centroids[:,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>],label<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Predicted'</span>,marker<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'x'</span>,s<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">200</span>)</span>
<span id="cb15-4">    ax.scatter(centroids[:,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>],centroids[:,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>],label<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Target'</span>,marker<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'o'</span>,s<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">200</span>,alpha<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.5</span>)</span>
<span id="cb15-5">    ax.legend()</span>
<span id="cb15-6">    plt.show()</span></code></pre></div>
</div>
<div id="c4a37b6f-0a0d-4792-a3e9-377f7d0093e8" class="cell" data-execution_count="18">
<div class="sourceCode cell-code" id="cb16" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb16-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> print_results(fn,data):</span>
<span id="cb16-2">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%</span>timeit p_centroids,p_coord,p_epochs <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> run_exp(data,fn)</span>
<span id="cb16-3">    p_centroids,p_coord,p_epochs <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> run_exp(data,fn)</span>
<span id="cb16-4">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"Algorithm found </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>p_centroids<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>shape[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>]<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;"> Centroids in </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>p_epochs<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;"> epochs"</span>)</span>
<span id="cb16-5">    plot_results(centroids,p_centroids)</span></code></pre></div>
</div>
</section>
</section>
<section id="train-algorithm" class="level1" data-number="5">
<h1 data-number="5"><span class="header-section-number">5</span> Train Algorithm</h1>
<section id="baseline" class="level2" data-number="5.1">
<h2 data-number="5.1" class="anchored" data-anchor-id="baseline"><span class="header-section-number">5.1</span> Baseline</h2>
<div class="callout callout-style-default callout-note callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Algorithm Results
</div>
</div>
<div class="callout-body-container callout-body">
<ul>
<li>Found the right number of centroids (6)</li>
<li>Converged in 9 epochs</li>
<li>Plot looks good - centroids are accurately placed</li>
</ul>
</div>
</div>
<div id="637016a1-749d-4b81-85b4-a0210262880a" class="cell" data-execution_count="19">
<div class="sourceCode cell-code" id="cb17" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb17-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> meanshift1(X):</span>
<span id="cb17-2">    dist <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> calculate_distances(X)</span>
<span id="cb17-3">    weight <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> gaussian(dist, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">2.5</span>)</span>
<span id="cb17-4">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> weight<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">@</span>X<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span>weight.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">sum</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>,keepdim<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>)</span></code></pre></div>
</div>
<div id="6f038e3d-b91e-47bd-927e-83b7c0d88679" class="cell" data-execution_count="20">
<div class="sourceCode cell-code" id="cb18" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb18-1">print_results(meanshift1,data)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>171 ms ± 6.79 ms per loop (mean ± std. dev. of 7 runs, 10 loops each)
Algorithm found 6 Centroids in 9 epochs</code></pre>
</div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://isaac-flath.tech/posts/Clustering/MeanShiftFromScratch_files/figure-html/cell-19-output-2.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
</div>
</section>
<section id="ramp" class="level2" data-number="5.2">
<h2 data-number="5.2" class="anchored" data-anchor-id="ramp"><span class="header-section-number">5.2</span> Ramp</h2>
<p>I tried using a linear decline then flat at 0 instead of a gaussian to see if that speeds things up. This was from Jeremy’s lecture as an idea to try that seemed to work.</p>
<div class="callout callout-style-default callout-note callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Algorithm Results
</div>
</div>
<div class="callout-body-container callout-body">
<ul>
<li>Found the right number of centroids (6)</li>
<li>Converged in 9 epochs</li>
<li>Plot looks good - centroids are accurately placed</li>
<li>Ran in same speed as the gaussian. I figure that might change if scaled up and put on a GPU with lots of data. Worth more testing!</li>
</ul>
</div>
</div>
<div id="ec13d65d-3913-480c-ae28-61275b343c58" class="cell" data-execution_count="21">
<div class="sourceCode cell-code" id="cb20" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb20-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> tri(d, i): <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> (<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>d<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span>i).clamp_min(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span>i</span></code></pre></div>
</div>
<div id="c97f37dc-5faa-4430-80d9-dab9e43f8344" class="cell" data-execution_count="22">
<div class="sourceCode cell-code" id="cb21" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb21-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> meanshift2(X):</span>
<span id="cb21-2">    dist <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> calculate_distances(X)</span>
<span id="cb21-3">    weight <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> tri(dist, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">8</span>)</span>
<span id="cb21-4">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> weight<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">@</span>X<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span>weight.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">sum</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>,keepdim<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>)</span></code></pre></div>
</div>
<div id="80919b71-f2d0-49de-8ddc-43c5206f43eb" class="cell" data-execution_count="23">
<div class="sourceCode cell-code" id="cb22" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb22-1">print_results(meanshift1,data)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>161 ms ± 10.7 ms per loop (mean ± std. dev. of 7 runs, 1 loop each)
Algorithm found 6 Centroids in 9 epochs</code></pre>
</div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://isaac-flath.tech/posts/Clustering/MeanShiftFromScratch_files/figure-html/cell-22-output-2.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
</div>
</section>
<section id="sampling" class="level2" data-number="5.3">
<h2 data-number="5.3" class="anchored" data-anchor-id="sampling"><span class="header-section-number">5.3</span> Sampling</h2>
<p>This is the original meanshift (with gaussian) with a random sample of the data. Even with 20% of the data it got really good centroids (though not perfect) but run much faster. It also converged to 6 cluster in 8 epochs. This seems useful.</p>
<div class="callout callout-style-default callout-note callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Algorithm Results
</div>
</div>
<div class="callout-body-container callout-body">
<ul>
<li>Found the right number of centroids (6)</li>
<li>Converged in 8 epochs</li>
<li>Plot looks good - centroids are reasonably accurately (but not perfectly) placed</li>
<li>Ran in less than 10% of the time of the original</li>
<li>Can control size of random sample based on needs (ie if more accuracy needed)</li>
</ul>
</div>
</div>
<div id="9d5e6ec5-7cdb-4284-9046-aa80d0d38da1" class="cell" data-execution_count="24">
<div class="sourceCode cell-code" id="cb24" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb24-1">print_results(meanshift1,data[np.random.choice(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(data),<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">300</span>)])</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>31.4 ms ± 1.64 ms per loop (mean ± std. dev. of 7 runs, 10 loops each)
Algorithm found 6 Centroids in 9 epochs</code></pre>
</div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://isaac-flath.tech/posts/Clustering/MeanShiftFromScratch_files/figure-html/cell-23-output-2.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
</div>


</section>
</section>

 ]]></description>
  <category>Clustering</category>
  <guid>https://isaac-flath.tech/posts/Clustering/MeanShiftFromScratch.html</guid>
  <pubDate>Thu, 10 Nov 2022 05:00:00 GMT</pubDate>
  <media:content url="https://isaac-flath.tech/posts/_TopicImages/clustering.jpg" medium="image" type="image/jpeg"/>
</item>
<item>
  <title>Python Programming Tips</title>
  <dc:creator>Isaac Flath</dc:creator>
  <link>https://isaac-flath.tech/posts/Python/Python.html</link>
  <description><![CDATA[ 





<section id="setup" class="level1" data-number="1">
<h1 data-number="1"><span class="header-section-number">1</span> Setup</h1>
<div id="1cb7ab0b-6390-429f-8c0c-d37ba9284246" class="cell">
<details class="code-fold">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb1-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> functools <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> partial</span>
<span id="cb1-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> datetime <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> datetime</span>
<span id="cb1-3"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> logging, string, pandas <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> pd, sqlparse</span>
<span id="cb1-4"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> fastcore.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">all</span> <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span></span>
<span id="cb1-5"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> fastcore.docments <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span></span>
<span id="cb1-6"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> IPython.display <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> Markdown,display, HTML</span>
<span id="cb1-7"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> pandas <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> pd</span>
<span id="cb1-8"></span>
<span id="cb1-9"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> pygments <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> highlight</span>
<span id="cb1-10"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> pygments.lexers <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> PythonLexer</span>
<span id="cb1-11"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> pygments.formatters <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> HtmlFormatter</span>
<span id="cb1-12"></span>
<span id="cb1-13"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> print_function_source(fn):</span>
<span id="cb1-14">    fn <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> print_decorator</span>
<span id="cb1-15">    formatter <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> HtmlFormatter()</span>
<span id="cb1-16">    display(HTML(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'&lt;style type="text/css"&gt;</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{}</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">&lt;/style&gt;</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{}</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span>.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">format</span>(</span>
<span id="cb1-17">        formatter.get_style_defs(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'.highlight'</span>),</span>
<span id="cb1-18">        highlight(inspect.getsource(fn), PythonLexer(), formatter))))</span></code></pre></div>
</details>
</div>
</section>
<section id="purpose" class="level1" data-number="2">
<h1 data-number="2"><span class="header-section-number">2</span> Purpose</h1>
<p>The purpose of this is to introduce concepts I believe data scientists could benefit from knowing.</p>
<p>I am assuming that the reader knows the basics of programming. I will cover concepts I frequently see that I think are not used enough or appropriately, regardless of how basic or advanced they may be.</p>
</section>
<section id="comprehensions" class="level1" data-number="3">
<h1 data-number="3"><span class="header-section-number">3</span> Comprehensions</h1>
<p>Comprehensions in python should be used when possible. They are faster than forloops and require less code when they fit</p>
<div id="13cc31e8-b952-413b-a025-f54309a2c337" class="cell">
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb2-1">x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>]</span></code></pre></div>
</div>
<div id="0af15228-0b09-446b-8bb9-3d6e6a0a7c05" class="cell">
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb3-1">out<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[]</span>
<span id="cb3-2"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%</span>timeit <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> i <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1000000</span>): out.append(i<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>87.2 ms ± 647 µs per loop (mean ± std. dev. of 7 runs, 10 loops each)</code></pre>
</div>
</div>
<div id="36051273-833e-4393-b5b4-7d35e80da55d" class="cell">
<div class="sourceCode cell-code" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb5-1"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%</span>timeit [i<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> i <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1000000</span>)]</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>56.8 ms ± 584 µs per loop (mean ± std. dev. of 7 runs, 10 loops each)</code></pre>
</div>
</div>
<p>This is basically special syntax for a forloop, and are useful in a subset of forloops. Basically any time you see the pattern where you initialize something, then modify or build it in the forloop you can likely use a comprehension</p>
<div id="ccf4b836-548a-45fe-be18-75c479765d6e" class="cell">
<div class="sourceCode cell-code" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb7-1">out <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> []</span>
<span id="cb7-2"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> o <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>): out.append(o<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">**</span>o)</span>
<span id="cb7-3">out</span></code></pre></div>
<div class="cell-output cell-output-display">
<pre><code>[1, 1, 4, 27, 256]</code></pre>
</div>
</div>
<div id="54da223e-072d-44d3-aa7f-05ecc6ce66a2" class="cell">
<div class="sourceCode cell-code" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb9-1">[o<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">**</span>o <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> o <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>)]</span></code></pre></div>
<div class="cell-output cell-output-display">
<pre><code>[1, 1, 4, 27, 256]</code></pre>
</div>
</div>
<p>List comprehensions are most common but you can also do tuple comprehension, set comprehension, dict comprehension, or other data types.</p>
<div id="72e08b13-1d06-4217-a706-c33773ecd4e0" class="cell">
<div class="sourceCode cell-code" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb11-1"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">set</span>(o<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">**</span>o <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> o <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>))</span></code></pre></div>
<div class="cell-output cell-output-display">
<pre><code>{1, 4, 27, 256}</code></pre>
</div>
</div>
<div id="feb37ec0-8958-4df0-a8f8-2fec2874eb0f" class="cell">
<div class="sourceCode cell-code" id="cb13" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb13-1">{<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">str</span>(o):o<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">**</span>o <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> o <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>)}</span></code></pre></div>
<div class="cell-output cell-output-display">
<pre><code>{'0': 1, '1': 1, '2': 4, '3': 27, '4': 256}</code></pre>
</div>
</div>
<p>A few handy patterns are:</p>
<ul>
<li>Reversing a dictionary</li>
<li>Combining lists</li>
<li>All unique combos from multiple lists (nested comprehension)</li>
</ul>
<div id="1b8c30e1-d31e-4971-9d45-aba2e1648ea7" class="cell">
<div class="sourceCode cell-code" id="cb15" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb15-1">adict <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> {<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"a"</span>:<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>,<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"b"</span>:<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>}</span>
<span id="cb15-2">{v:k <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> k,v <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> adict.items()}</span></code></pre></div>
<div class="cell-output cell-output-display">
<pre><code>{1: 'a', 2: 'b'}</code></pre>
</div>
</div>
<div id="12b6f82b-b949-4b4e-a254-21d8fe38d53d" class="cell">
<div class="sourceCode cell-code" id="cb17" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb17-1">x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>]</span>
<span id="cb17-2">y <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">6</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">7</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">8</span>]</span></code></pre></div>
</div>
<div id="7dfb483f-9adf-499f-865a-0b012391f9bd" class="cell">
<div class="sourceCode cell-code" id="cb18" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb18-1">[a<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span>b <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> a,b <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">zip</span>(x,y)]</span></code></pre></div>
<div class="cell-output cell-output-display">
<pre><code>[6, 8, 10, 12]</code></pre>
</div>
</div>
<div id="dcbb6272-9ad2-443d-8ef0-6098e458459c" class="cell">
<div class="sourceCode cell-code" id="cb20" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb20-1">unique_combos <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> L((a,b) <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> a <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> x <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> b <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> y)</span>
<span id="cb20-2">unique_combos</span></code></pre></div>
<div class="cell-output cell-output-display">
<pre><code>(#16) [(1, 5),(1, 6),(1, 7),(1, 8),(2, 5),(2, 6),(2, 7),(2, 8),(3, 5),(3, 6)...]</code></pre>
</div>
</div>
</section>
<section id="destructuring" class="level1" data-number="4">
<h1 data-number="4"><span class="header-section-number">4</span> Destructuring</h1>
<p>Destructured assignments mean to can break up iterables when you assign. This is handy to reduce pointless lines of code.</p>
<div id="f3ee1ad4-45ac-4810-a9c7-77ef7835481c" class="cell">
<div class="sourceCode cell-code" id="cb22" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb22-1">a,b <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">6</span></span>
<span id="cb22-2">a,b,c <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [],[],{}</span></code></pre></div>
</div>
<p>Another use is to break up lists to create lists where we take all the first elements out into it’s own list, and the second elements out into their own lists.</p>
<p>I often see this done with multiple list comprehension, doing <code>[o[0] for o in [x,y,z]]</code> to get the first element, then repeating for other elements.</p>
<p>However, we can do this easier with the help of zip and destructured assignments</p>
<div id="6667ec23-81b0-4b5c-864e-3a37c259cd8e" class="cell">
<div class="sourceCode cell-code" id="cb23" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb23-1">nested_list <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>],[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">6</span>],[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">7</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">8</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">9</span>]]</span>
<span id="cb23-2">nested_list</span></code></pre></div>
<div class="cell-output cell-output-display">
<pre><code>[[1, 2, 3], [4, 5, 6], [7, 8, 9]]</code></pre>
</div>
</div>
<div id="5cdc9ea3-60a3-448c-bc91-174e5380217c" class="cell">
<div class="sourceCode cell-code" id="cb25" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb25-1">first_elements, second_elements, third_elements <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">list</span>(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">zip</span>(<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>nested_list))</span></code></pre></div>
</div>
<div id="5ccf1abd-118f-4716-af2b-7f07c28795af" class="cell">
<div class="sourceCode cell-code" id="cb26" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb26-1"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>first_elements<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb26-2"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>second_elements<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb26-3"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>third_elements<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>first_elements=(1, 4, 7)
second_elements=(2, 5, 8)
third_elements=(3, 6, 9)</code></pre>
</div>
</div>
</section>
<section id="fastcore" class="level1" data-number="5">
<h1 data-number="5"><span class="header-section-number">5</span> Fastcore</h1>
<p>Fastcore is a great library to know. It’s got a lot of useful features and extensions to the python standard library and it’s designed to be used in live environments like jupyter notebooks.</p>
<section id="parallel-processing" class="level2" data-number="5.1">
<h2 data-number="5.1" class="anchored" data-anchor-id="parallel-processing"><span class="header-section-number">5.1</span> Parallel Processing</h2>
<p>See <a href="../../posts/Python/PythonConcurrency.html">this blog post</a></p>
<section id="docments" class="level3" data-number="5.1.1">
<h3 data-number="5.1.1" class="anchored" data-anchor-id="docments"><span class="header-section-number">5.1.1</span> Docments</h3>
<p>Nice way of documenting code concisely and being able to access info from code. It’s concise, easy to manipulate to display how you want, and easy to read. I much prefer it over the large numpy style docstrings that are big string blocks</p>
<div id="f1b49c8e-5c90-4c35-8a08-16b725a9a257" class="cell">
<div class="sourceCode cell-code" id="cb28" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb28-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> fastcore.docments <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span></span>
<span id="cb28-2"></span>
<span id="cb28-3"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> distance(pointa:<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">tuple</span>,  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># tuple representing the coordinates of the first point (x,y)</span></span>
<span id="cb28-4">             pointb:<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">tuple</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>) <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># tuple representing the coordinates of the first point (x,y)</span></span>
<span id="cb28-5">            )<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-&gt;</span><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">float</span>: <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># float representing distance between pointa and pointb</span></span>
<span id="cb28-6">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">'''Calculates the distance between pointa and pointb'''</span></span>
<span id="cb28-7">    edges <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">abs</span>(np.subtract(pointa,pointa))</span>
<span id="cb28-8">    distance <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.sqrt((edges<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">**</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>).<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">sum</span>())</span>
<span id="cb28-9">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> distance</span></code></pre></div>
</div>
<div id="5b4a4f25-175d-4c65-8b6a-424e77a2dacd" class="cell">
<div class="sourceCode cell-code" id="cb29" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb29-1">docstring(distance)</span></code></pre></div>
<div class="cell-output cell-output-display">
<pre><code>'Calculates the distance between pointa and pointb'</code></pre>
</div>
</div>
<div id="7d022ad3-fffc-4fc1-ab49-219fcbc74cdd" class="cell">
<div class="sourceCode cell-code" id="cb31" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb31-1">docments(distance)</span></code></pre></div>
<div class="cell-output cell-output-display cell-output-markdown">
<div class="sourceCode" id="cb32" style="background: #f1f3f5;"><pre class="sourceCode json code-with-copy"><code class="sourceCode json"><span id="cb32-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">{</span> <span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">'pointa'</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">'tuple</span> <span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">representing</span> <span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">the</span> <span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">coordinates</span> <span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">of</span> <span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">the</span> <span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">first</span> <span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">point</span> <span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">(x</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">,</span><span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">y)'</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb32-2">  <span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">'pointb'</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">'tuple</span> <span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">representing</span> <span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">the</span> <span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">coordinates</span> <span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">of</span> <span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">the</span> <span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">first</span> <span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">point</span> <span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">(x</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">,</span><span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">y)'</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb32-3">  <span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">'return'</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">'float</span> <span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">representing</span> <span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">distance</span> <span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">between</span> <span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">pointa</span> <span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">and</span> <span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">pointb'</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">}</span></span></code></pre></div>
</div>
</div>
<div id="3b67cd28-7f0e-40ec-9888-f5451bba58bd" class="cell">
<div class="sourceCode cell-code" id="cb33" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb33-1">docments(distance,full<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>)</span></code></pre></div>
<div class="cell-output cell-output-display cell-output-markdown">
<div class="sourceCode" id="cb34" style="background: #f1f3f5;"><pre class="sourceCode json code-with-copy"><code class="sourceCode json"><span id="cb34-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">{</span> <span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">'pointa'</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">{</span> <span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">'anno'</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">&lt;class</span> <span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">'tuple'&gt;</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb34-2">              <span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">'default'</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">&lt;class</span> <span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">'inspect._empty'&gt;</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb34-3">              <span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">'docment'</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">'tuple</span> <span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">representing</span> <span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">the</span> <span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">coordinates</span> <span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">of</span> <span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">the</span> <span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">first</span> <span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">'</span></span>
<span id="cb34-4">                         <span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">'point</span> <span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">(x</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">,</span><span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">y)'</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">},</span></span>
<span id="cb34-5">  <span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">'pointb'</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">{</span> <span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">'anno'</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">&lt;class</span> <span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">'tuple'&gt;</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb34-6">              <span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">'default'</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">(</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">,</span> <span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">0)</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb34-7">              <span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">'docment'</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">'tuple</span> <span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">representing</span> <span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">the</span> <span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">coordinates</span> <span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">of</span> <span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">the</span> <span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">first</span> <span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">'</span></span>
<span id="cb34-8">                         <span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">'point</span> <span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">(x</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">,</span><span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">y)'</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">},</span></span>
<span id="cb34-9">  <span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">'return'</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">{</span> <span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">'anno'</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">&lt;class</span> <span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">'float'&gt;</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb34-10">              <span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">'default'</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">&lt;class</span> <span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">'inspect._empty'&gt;</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb34-11">              <span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">'docment'</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">'float</span> <span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">representing</span> <span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">distance</span> <span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">between</span> <span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">pointa</span> <span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">and</span> <span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">'</span></span>
<span id="cb34-12">                         <span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">'pointb'</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">}}</span></span></code></pre></div>
</div>
</div>
</section>
<section id="testing" class="level3" data-number="5.1.2">
<h3 data-number="5.1.2" class="anchored" data-anchor-id="testing"><span class="header-section-number">5.1.2</span> Testing</h3>
<p>Everyone agrees testing is important. But not all testing is equal. The needs for unit testing the google code base are not the same as the needs a data scientist needs for building and deploying models, libraries, and most software.</p>
<p>Fastcore is a great tool for most of my testing needs. Fast and simple enough that I can add tests as I build and as I am exploring and building models. I want testing to enhance my development workflow, not be something I have to painstakingly build at the end.</p>
<p>Sometimes simple assert statements are sufficient, but there’s small annoyances. For example, a small change in type can mean a failed test. Sometimes that change in type should cause a failure, sometimes I’m ok if it’s a different type if the values are the same</p>
<div id="8eaada80-0635-470b-a3c1-0f7fc1ffb757" class="cell">
<div class="sourceCode cell-code" id="cb35" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb35-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> fastcore.test <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span></span></code></pre></div>
</div>
<div id="1d825eb1-19d4-453e-bee6-4b0005e82f05" class="cell">
<div class="sourceCode cell-code" id="cb36" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb36-1">test_eq([<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>],(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>))</span></code></pre></div>
</div>
<p>For floating points it has handy functionality for that, which is very common in data science. For example, we may want <code>.1 + .1 + .1 == .3</code> to be true, because they are close enough based on floating point precision</p>
<div id="9513d738-9773-4d9a-9b8d-9e7f206391d4" class="cell">
<div class="sourceCode cell-code" id="cb37" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb37-1"><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">.1</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">.1</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">.1</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">.3</span></span></code></pre></div>
<div class="cell-output cell-output-display">
<pre><code>False</code></pre>
</div>
</div>
<div id="df75fbcd-22a3-479b-9a54-5e751d3f6d1a" class="cell">
<div class="sourceCode cell-code" id="cb39" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb39-1">test_close(<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">.1</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">.1</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">.1</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">.3</span>)</span></code></pre></div>
</div>
<p>We can test that something fails, if there are particular situation we want to ensure raise errors.</p>
<div id="123d25be-79e1-47f6-b285-80eccae4bb4b" class="cell">
<div class="sourceCode cell-code" id="cb40" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb40-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> _fail(): <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">raise</span> <span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">Exception</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"foobar"</span>)</span>
<span id="cb40-2">test_fail(_fail)</span></code></pre></div>
</div>
<p>We can test if 2 lists have the same values, just in different orders (convenient for testing some situations with random mini-batches).</p>
<div id="69613baf-ff3e-488e-a0ab-b87118eecee9" class="cell">
<div class="sourceCode cell-code" id="cb41" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb41-1">a <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">list</span>(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>))</span>
<span id="cb41-2">b <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> a.copy()</span>
<span id="cb41-3">b.reverse()</span>
<span id="cb41-4">test_shuffled(a,b)</span></code></pre></div>
</div>
<p>There’s more of course, check out the <a href="fastcore.fast.ai">docs</a></p>
</section>
<section id="l" class="level3" data-number="5.1.3">
<h3 data-number="5.1.3" class="anchored" data-anchor-id="l"><span class="header-section-number">5.1.3</span> L</h3>
<p>L is a replacement for a list, but with lots of adding functionality. Some of it are functional programming concepts, some is numpy like stuff, and some is just niceities (like cleaner printing).</p>
<div id="e027a812-3a7b-45f1-a325-4583859b0460" class="cell">
<div class="sourceCode cell-code" id="cb42" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb42-1">alist <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> L(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>)</span></code></pre></div>
</div>
<div id="29312748-81b0-4325-9415-38cc5dd69c9b" class="cell">
<div class="sourceCode cell-code" id="cb43" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb43-1">alist.sort()</span>
<span id="cb43-2">alist.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">sorted</span>()</span></code></pre></div>
<div class="cell-output cell-output-display">
<pre><code>(#5) [1,2,3,3,4]</code></pre>
</div>
</div>
<div id="8eaa55a2-4e8a-4316-a48f-d9d8ba62ac7c" class="cell">
<div class="sourceCode cell-code" id="cb45" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb45-1">alist.unique()</span></code></pre></div>
<div class="cell-output cell-output-display">
<pre><code>(#4) [1,2,3,4]</code></pre>
</div>
</div>
<div id="22bcc1b8-1151-4dad-b802-ff57a6d7326d" class="cell">
<div class="sourceCode cell-code" id="cb47" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb47-1">alist.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">filter</span>(<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">lambda</span> x: x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>)</span></code></pre></div>
<div class="cell-output cell-output-display">
<pre><code>(#2) [1,2]</code></pre>
</div>
</div>
<div id="f7a566f5-768d-4deb-b587-b7092f9fc5c1" class="cell">
<div class="sourceCode cell-code" id="cb49" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb49-1">alist.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">map</span>(<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">lambda</span> x: x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>)</span></code></pre></div>
<div class="cell-output cell-output-display">
<pre><code>(#5) [2,4,6,8,6]</code></pre>
</div>
</div>
</section>
<section id="attrdict" class="level3" data-number="5.1.4">
<h3 data-number="5.1.4" class="anchored" data-anchor-id="attrdict"><span class="header-section-number">5.1.4</span> AttrDict</h3>
<p><code>Attrdict</code> is another nice thing from fastcore, that makes dictionaries a bit nicer to use.</p>
<div id="50614052-b1c4-4093-a7c1-8afd266003f4" class="cell">
<div class="sourceCode cell-code" id="cb51" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb51-1">regdict <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> {<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'a'</span>:<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>,<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'b'</span>:<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>}</span>
<span id="cb51-2">adict <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> AttrDict({<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'a'</span>:<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>,<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'b'</span>:<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>})</span></code></pre></div>
</div>
<div id="1ef70184-d4b0-4688-8d89-3c75c9557a64" class="cell">
<div class="sourceCode cell-code" id="cb52" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb52-1">adict</span></code></pre></div>
<div class="cell-output cell-output-display cell-output-markdown">
<div class="sourceCode" id="cb53" style="background: #f1f3f5;"><pre class="sourceCode json code-with-copy"><code class="sourceCode json"><span id="cb53-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">{</span><span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">'a'</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">,</span> <span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">'b'</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">}</span></span></code></pre></div>
</div>
</div>
<div id="da3ae55b-9106-4a18-a817-a31bd2757b43" class="cell">
<div class="sourceCode cell-code" id="cb54" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb54-1">adict.a</span></code></pre></div>
<div class="cell-output cell-output-display">
<pre><code>2</code></pre>
</div>
</div>
<div id="35f2b253-e297-4d57-a520-99b6d9042d11" class="cell">
<div class="sourceCode cell-code" id="cb56" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb56-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> _fail(): <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> regdict.a</span>
<span id="cb56-2">test_fail(_fail)</span></code></pre></div>
</div>
</section>
</section>
</section>
<section id="logging" class="level1" data-number="6">
<h1 data-number="6"><span class="header-section-number">6</span> Logging</h1>
<p>Logging is super important. if you log stuff as you work properly you can always look back at what was done previously. Sometimes it’s hard to tell what’s going on as you run and re-run different things. Logging is handy not just in production for debugging, but also as a tool when you are developing. There are many tools to help with logging and visualizing results (for example W&amp;B or tensorboard for deep learning) - but the foundations are good to understand and use too!</p>
<div id="6a5048e8-8442-4a9e-bdcc-a4285f39fab3" class="cell">
<div class="sourceCode cell-code" id="cb57" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb57-1">logging.basicConfig(filename<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"./mylog.log"</span>)</span>
<span id="cb57-2">logger <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> logging.getLogger()</span>
<span id="cb57-3">logger.setLevel(logging.INFO)</span></code></pre></div>
</div>
<div id="260f3c0c-7981-417d-8295-fba9fe69a3f3" class="cell">
<div class="sourceCode cell-code" id="cb58" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb58-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> get_current_time(): <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> datetime.now().strftime(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'%Y%m</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%d</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">_%H%M%S'</span>)</span></code></pre></div>
</div>
<div id="d5ab99c2-d9a6-43c1-ab9e-1a2c29a08930" class="cell">
<div class="sourceCode cell-code" id="cb59" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb59-1">logger.info    (<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f'</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>get_current_time()<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">|This is an info message'</span>)</span></code></pre></div>
</div>
<div id="7e23593b-1096-4799-847c-48035323fcf7" class="cell">
<div class="sourceCode cell-code" id="cb60" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb60-1"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!</span>head <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span> mylog.log</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>INFO:root:20221106_111500|This is an info message
INFO:root:20221106_111521|Starting the model training process
INFO:root:20221106_111521|Training set has 50 records
INFO:root:20221106_111521|Validtion set has 70 records</code></pre>
</div>
</div>
<div id="4aa7ece6-6148-4be5-93fa-6a563c505459" class="cell">
<div class="sourceCode cell-code" id="cb62" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb62-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> log_stuff(msg,<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">**</span>kwargs): </span>
<span id="cb62-2">    dt <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> get_current_time()</span>
<span id="cb62-3">    logger.info(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>dt<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">|</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>msg<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb62-4">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> k,v <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> kwargs.items(): logger.info(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>dt<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">|</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>k<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">=</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>v<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span></code></pre></div>
</div>
<div id="ae6654e7-ec74-4256-a2d1-09aded86668a" class="cell">
<div class="sourceCode cell-code" id="cb63" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb63-1">log_stuff(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'this is what I want to log'</span>,</span>
<span id="cb63-2">          trainig_set<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'50 records'</span>,</span>
<span id="cb63-3">          validation_set<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'70_records'</span>)</span></code></pre></div>
</div>
</section>
<section id="higher-order-functions-callbacks" class="level1" data-number="7">
<h1 data-number="7"><span class="header-section-number">7</span> Higher Order Functions &amp; Callbacks</h1>
<p>This is a simple example of what these terms mean:</p>
<ul>
<li>A higher order function is a function that takes a function as an argument</li>
<li>A callback is a function that is passed in as an argument to a higher order function</li>
</ul>
<div id="ea38d828-2d2b-4679-8b92-e4e3a29439d1" class="cell">
<div class="sourceCode cell-code" id="cb64" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb64-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> callbackFunc1(s): <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Callback Function 1: Length of the text file is : '</span>, s)</span>
<span id="cb64-2"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> callbackFunc2(s): <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Callback Function 2: Length of the text file is : '</span>, s)</span>
<span id="cb64-3"></span>
<span id="cb64-4"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> HigherOrderFunction(path, callback):</span>
<span id="cb64-5">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">with</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">open</span>(path, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"r"</span>) <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> f: callback(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(f.read()))</span>
<span id="cb64-6"></span>
<span id="cb64-7">HigherOrderFunction(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"mylog.log"</span>, callbackFunc1)</span>
<span id="cb64-8">HigherOrderFunction(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"mylog.log"</span>, callbackFunc2)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Callback Function 1: Length of the text file is :  1130
Callback Function 2: Length of the text file is :  1130</code></pre>
</div>
</div>
<p>This is handy in a lot of situations.</p>
<section id="filter" class="level2" data-number="7.1">
<h2 data-number="7.1" class="anchored" data-anchor-id="filter"><span class="header-section-number">7.1</span> Filter</h2>
<p>Filter is a common higher order function.</p>
<div id="6ca02855-f639-4c7f-b34f-a8cecd365141" class="cell">
<div class="sourceCode cell-code" id="cb66" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb66-1">L(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>).<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">filter</span>(<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">lambda</span> x: x<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>)</span></code></pre></div>
<div class="cell-output cell-output-display">
<pre><code>(#2) [4,5]</code></pre>
</div>
</div>
<p>This is very flexible because we can put filtering logic of any complexity in a function and use that to filter a list of any type.</p>
</section>
<section id="map" class="level2" data-number="7.2">
<h2 data-number="7.2" class="anchored" data-anchor-id="map"><span class="header-section-number">7.2</span> Map</h2>
<p>Map is another very common higher order function.</p>
<div id="fe41cdeb-c1d1-4b15-801e-2ca9148d0221" class="cell">
<div class="sourceCode cell-code" id="cb68" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb68-1">L(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>).<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">map</span>(<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">lambda</span> x: x<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">**</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>)</span></code></pre></div>
<div class="cell-output cell-output-display">
<pre><code>(#5) [1,4,9,16,25]</code></pre>
</div>
</div>
<p>It is again super flexible because we can apply a function of any complexity to have it be applied and modify each element of the list.</p>
<div id="6ce780eb-c161-4221-ad49-0eeda4349616" class="cell">
<div class="sourceCode cell-code" id="cb70" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb70-1">L(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>).<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">map</span>(<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">lambda</span> x: string.ascii_lowercase[x])</span></code></pre></div>
<div class="cell-output cell-output-display">
<pre><code>(#5) ['b','c','d','e','f']</code></pre>
</div>
</div>
</section>
<section id="simple-logging" class="level2" data-number="7.3">
<h2 data-number="7.3" class="anchored" data-anchor-id="simple-logging"><span class="header-section-number">7.3</span> Simple Logging</h2>
<p>We could make a function for logging, where we can pass a function in that we want to use for logging (ie info vs warning).</p>
<div id="4ae9decd-334f-4c3e-a766-ff0703f71817" class="cell">
<div class="sourceCode cell-code" id="cb72" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb72-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> log_stuff(msg,fn<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>logger.info,<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">**</span>kwargs): </span>
<span id="cb72-2">    dt <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> get_current_time()</span>
<span id="cb72-3">    fn(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>dt<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">|</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>msg<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb72-4">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> k,v <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> kwargs.items(): fn(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>dt<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">|</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>k<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">=</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>v<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span></code></pre></div>
</div>
<div id="6f3a3828-84b6-4412-ba93-f55e9a95412e" class="cell">
<div class="sourceCode cell-code" id="cb73" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb73-1">log_stuff(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'abcd'</span>,a<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>,b<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">55</span>)</span></code></pre></div>
</div>
<div id="41d6c211-9db9-433f-9320-4067ae6dac5f" class="cell">
<div class="sourceCode cell-code" id="cb74" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb74-1"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!</span>tail <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span> mylog.log</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>INFO:root:20221106_193211|abcd
INFO:root:20221106_193211|a=1
INFO:root:20221106_193211|b=55</code></pre>
</div>
</div>
<div id="683219f4-3483-419b-ad71-e2d2f39900b1" class="cell">
<div class="sourceCode cell-code" id="cb76" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb76-1">log_stuff(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'something might be awry'</span>,fn<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>logger.critical,a<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>,b<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">55</span>)</span></code></pre></div>
</div>
<div id="791ca832-2b13-4da0-ad89-d49aec20bf16" class="cell">
<div class="sourceCode cell-code" id="cb77" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb77-1"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!</span>tail <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span> mylog.log</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>CRITICAL:root:20221106_193211|something might be awry
CRITICAL:root:20221106_193211|a=1
CRITICAL:root:20221106_193211|b=55</code></pre>
</div>
</div>
</section>
<section id="file-processor" class="level2" data-number="7.4">
<h2 data-number="7.4" class="anchored" data-anchor-id="file-processor"><span class="header-section-number">7.4</span> File Processor</h2>
<p>You can also make a generic file processor that you can pass callbacks to. This file processor can include log statements to log what you’re doing, so you can minimize repeating lots of code. For now, we’ll do a simple processor, and callbacks to clean and format a messy sql file.</p>
<div id="0a99f020-08b4-45be-8e1b-4d1dc4f64b12" class="cell">
<div class="sourceCode cell-code" id="cb79" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb79-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> process_file(fpath,callbacks): </span>
<span id="cb79-2">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">with</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">open</span>(fpath, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"r"</span>) <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> f: contents <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> f.read()</span>
<span id="cb79-3">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> callback <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> callbacks: contents <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> callback(contents)</span>
<span id="cb79-4">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> contents   </span></code></pre></div>
</div>
</section>
<section id="format-and-clean-sql-file" class="level2" data-number="7.5">
<h2 data-number="7.5" class="anchored" data-anchor-id="format-and-clean-sql-file"><span class="header-section-number">7.5</span> Format and clean SQL file</h2>
<div id="590cc01b-0546-4fa0-9b2f-70426dabe2a1" class="cell">
<div class="sourceCode cell-code" id="cb80" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb80-1">sql_formatter_cb <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> partial(sqlparse.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">format</span>,</span>
<span id="cb80-2">                strip_comments<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>,comma_first<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>,</span>
<span id="cb80-3">                keyword_case<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'upper'</span>, identifier_case<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'lower'</span>,</span>
<span id="cb80-4">                reindent<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>, indent_width<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>,)</span>
<span id="cb80-5"></span>
<span id="cb80-6"></span>
<span id="cb80-7"></span>
<span id="cb80-8">qrys <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> process_file(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'test.sql'</span>,[sql_formatter_cb,sqlparse.split])</span></code></pre></div>
</div>
<div id="a1c2c3e0-0d2f-4a96-a755-43ffa3fcf996" class="cell">
<div class="sourceCode cell-code" id="cb81" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb81-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> sql_pprint(sql): display(Markdown(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"```sql</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\n\n</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>sql<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\n\n</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">```"</span>))</span>
<span id="cb81-2"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> qry <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> qrys: sql_pprint(qry)</span></code></pre></div>
<div class="cell-output cell-output-display cell-output-markdown">
<div class="sourceCode" id="cb82" style="background: #f1f3f5;"><pre class="sourceCode sql code-with-copy"><code class="sourceCode sql"><span id="cb82-1"></span>
<span id="cb82-2"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">SELECT</span> top <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">25</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span></span>
<span id="cb82-3"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">FROM</span> some_table;</span></code></pre></div>
</div>
<div class="cell-output cell-output-display cell-output-markdown">
<div class="sourceCode" id="cb83" style="background: #f1f3f5;"><pre class="sourceCode sql code-with-copy"><code class="sourceCode sql"><span id="cb83-1"></span>
<span id="cb83-2"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">SELECT</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">count</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb83-3"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">FROM</span> another <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">TABLE</span> ;</span></code></pre></div>
</div>
<div class="cell-output cell-output-display cell-output-markdown">
<div class="sourceCode" id="cb84" style="background: #f1f3f5;"><pre class="sourceCode sql code-with-copy"><code class="sourceCode sql"><span id="cb84-1"></span>
<span id="cb84-2"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">SELECT</span> date_time</span>
<span id="cb84-3">     , mbr_id</span>
<span id="cb84-4">     , transactions</span>
<span id="cb84-5">     , <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">count</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb84-6"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">FROM</span> table3</span>
<span id="cb84-7"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">WHERE</span> date_time <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'2021-02-02'</span></span>
<span id="cb84-8"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">GROUP</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">BY</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span></span>
<span id="cb84-9">       , <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span></span>
<span id="cb84-10">       , <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>;</span></code></pre></div>
</div>
</div>
</section>
</section>
<section id="decorators" class="level1" data-number="8">
<h1 data-number="8"><span class="header-section-number">8</span> Decorators</h1>
<p>Decorators give you a way to add the same functionality to many functions (like inheritance does for classes). You typically use decorator using the <code>@</code> syntax, which modified the function.</p>
<section id="silly-simple-example" class="level2" data-number="8.1">
<h2 data-number="8.1" class="anchored" data-anchor-id="silly-simple-example"><span class="header-section-number">8.1</span> Silly Simple Example</h2>
<div id="2db50544-9ea6-4825-aebd-ca49e4cf7eb1" class="cell">
<div class="sourceCode cell-code" id="cb85" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb85-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> add_another(func):</span>
<span id="cb85-2">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> wrapper(number):</span>
<span id="cb85-3">        <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"The decorator took over!"</span>)</span>
<span id="cb85-4">        <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"I could log the original number (</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>number<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">) here!"</span>)</span>
<span id="cb85-5">        <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"Or I could log the original answer (</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>func(number)<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">) here!"</span>)</span>
<span id="cb85-6">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> func(number) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span></span>
<span id="cb85-7">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> wrapper</span>
<span id="cb85-8">    </span>
<span id="cb85-9"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">@add_another</span></span>
<span id="cb85-10"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> add_one(number): <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> number <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span></span></code></pre></div>
</div>
<p>So when we use a decorator, the code in the <code>wrapper</code> function is called instead of the original function. Typically the <code>wrapper</code> function calls the original function (otherwise there would be no point in decorating it as you’d just have a new unrelated function).</p>
</section>
<section id="useful-example" class="level2" data-number="8.2">
<h2 data-number="8.2" class="anchored" data-anchor-id="useful-example"><span class="header-section-number">8.2</span> Useful Example</h2>
<p>For example, maybe you want to print (or log) particular function call times and the args. See this decorator that does just that (and can be used on methods too)</p>
<div id="979977b8-2b39-4a47-95bb-39340dc2ffee" class="cell">
<div class="sourceCode cell-code" id="cb86" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb86-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> datetime <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> datetime</span></code></pre></div>
</div>
<div id="56cd849c-fd10-4c9c-bdc9-049a752619e5" class="cell">
<div class="sourceCode cell-code" id="cb87" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb87-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> print_decorator(func):</span>
<span id="cb87-2">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> wrapper(<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>args, <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">**</span>kwargs):</span>
<span id="cb87-3">        <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>datetime<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>now()<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">:</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>func<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">:args=</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>args<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">:kwargs=</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>kwargs<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb87-4">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> func(<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>args, <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">**</span>kwargs)</span>
<span id="cb87-5">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> wrapper</span></code></pre></div>
</div>
<div id="a594bd2c-efbb-4f33-82a1-9cd33cc840d4" class="cell">
<div class="sourceCode cell-code" id="cb88" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb88-1"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">@print_decorator</span></span>
<span id="cb88-2"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> simple_add(a,b): <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> a <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> b</span></code></pre></div>
</div>
<div id="ca44eaa4-5ece-44fc-8662-7533221b3aac" class="cell">
<div class="sourceCode cell-code" id="cb89" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb89-1">simple_add(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>2022-11-02 14:18:56.635936:&lt;function simple_add&gt;:args=(2, 4):kwargs={}</code></pre>
</div>
<div class="cell-output cell-output-display">
<pre><code>6</code></pre>
</div>
</div>
<div id="8f239c98-e90e-4727-ab19-2304ae6715cf" class="cell">
<div class="sourceCode cell-code" id="cb92" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb92-1"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">@print_decorator</span></span>
<span id="cb92-2"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> complex_add(a,b,<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>args,<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">**</span>kwargs): </span>
<span id="cb92-3">    out <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> a <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> b</span>
<span id="cb92-4">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> arg <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> args: out <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> out <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> arg</span>
<span id="cb92-5">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> kwarg <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> kwargs.values(): out <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> out <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> kwarg</span>
<span id="cb92-6">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> out</span></code></pre></div>
</div>
<div id="5cbac337-e1ab-4e8e-9769-a207abec50cb" class="cell">
<div class="sourceCode cell-code" id="cb93" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb93-1">complex_add(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>,foo<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">6</span>,bar<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>2022-11-02 14:18:57.716085:&lt;function complex_add&gt;:args=(5, 2, 3):kwargs={'foo': 6, 'bar': 10}</code></pre>
</div>
<div class="cell-output cell-output-display">
<pre><code>26</code></pre>
</div>
</div>
</section>
<section id="use-on-existing-functions" class="level2" data-number="8.3">
<h2 data-number="8.3" class="anchored" data-anchor-id="use-on-existing-functions"><span class="header-section-number">8.3</span> Use on Existing Functions</h2>
<p>What we have seen is applying a decorator to functions we fully define but we can also apply them to previously existing functions like ones we import from a library. This is helpful not just in understanding one way you can extend an existing libraries functionality, but also in understanding what decorators are. They aren’t magical.</p>
<p>Let’s add logging to <code>pd.DataFrame</code> using our existing decorator so we can see when a dataframe is constructed.</p>
<div id="66349453-afac-4ec0-8391-81f6cd88ac18" class="cell">
<div class="sourceCode cell-code" id="cb96" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb96-1">LoggingDataFrame <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> print_decorator(pd.DataFrame)</span>
<span id="cb96-2">df <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> LoggingDataFrame([<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>])</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>2022-11-02 14:53:16.323144:&lt;class 'pandas.core.frame.DataFrame'&gt;:args=([1, 2, 3],):kwargs={}</code></pre>
</div>
</div>
<div id="aa35ec2b-66d6-4c97-ac06-2f9de4e9930a" class="cell">
<div class="sourceCode cell-code" id="cb98" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb98-1">df.head()</span></code></pre></div>
<div class="cell-output cell-output-display">
<div>


<table class="dataframe caption-top table table-sm table-striped small" data-quarto-postprocess="true" data-border="1">
<thead>
<tr class="header">
<th data-quarto-table-cell-role="th"></th>
<th data-quarto-table-cell-role="th">0</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td data-quarto-table-cell-role="th">0</td>
<td>1</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">1</td>
<td>2</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">2</td>
<td>3</td>
</tr>
</tbody>
</table>

</div>
</div>
</div>
<p>The key thing to notice here is that the <code>@</code> syntax really isn’t doing anything magical. It’s just passing the function into the decorator and using that as the function definition. It’s just syntactic sugar for a higher order function that takes a function and returns a function.</p>
<p>To understand why this works, think through what our decorator is doing. 1. It’s a function that takes a function as an argument 2. It creates a new function called <code>wrapper</code>. This <code>wrapper</code> function called the argument passed into it, but also has other code. 3. It returns that function as the output</p>
<div id="6e6cfe91-1622-45d1-8505-2115e35408ce" class="cell">
<div class="sourceCode cell-code" id="cb99" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb99-1">print_function_source(print_decorator)</span></code></pre></div>
<div class="cell-output cell-output-display">
<style type="text/css">pre { line-height: 125%; }
td.linenos .normal { color: inherit; background-color: transparent; padding-left: 5px; padding-right: 5px; }
span.linenos { color: inherit; background-color: transparent; padding-left: 5px; padding-right: 5px; }
td.linenos .special { color: #000000; background-color: #ffffc0; padding-left: 5px; padding-right: 5px; }
span.linenos.special { color: #000000; background-color: #ffffc0; padding-left: 5px; padding-right: 5px; }
.highlight .hll { background-color: #ffffcc }
.highlight { background: #f8f8f8; }
.highlight .c { color: #3D7B7B; font-style: italic } /* Comment */
.highlight .err { border: 1px solid #FF0000 } /* Error */
.highlight .k { color: #008000; font-weight: bold } /* Keyword */
.highlight .o { color: #666666 } /* Operator */
.highlight .ch { color: #3D7B7B; font-style: italic } /* Comment.Hashbang */
.highlight .cm { color: #3D7B7B; font-style: italic } /* Comment.Multiline */
.highlight .cp { color: #9C6500 } /* Comment.Preproc */
.highlight .cpf { color: #3D7B7B; font-style: italic } /* Comment.PreprocFile */
.highlight .c1 { color: #3D7B7B; font-style: italic } /* Comment.Single */
.highlight .cs { color: #3D7B7B; font-style: italic } /* Comment.Special */
.highlight .gd { color: #A00000 } /* Generic.Deleted */
.highlight .ge { font-style: italic } /* Generic.Emph */
.highlight .gr { color: #E40000 } /* Generic.Error */
.highlight .gh { color: #000080; font-weight: bold } /* Generic.Heading */
.highlight .gi { color: #008400 } /* Generic.Inserted */
.highlight .go { color: #717171 } /* Generic.Output */
.highlight .gp { color: #000080; font-weight: bold } /* Generic.Prompt */
.highlight .gs { font-weight: bold } /* Generic.Strong */
.highlight .gu { color: #800080; font-weight: bold } /* Generic.Subheading */
.highlight .gt { color: #0044DD } /* Generic.Traceback */
.highlight .kc { color: #008000; font-weight: bold } /* Keyword.Constant */
.highlight .kd { color: #008000; font-weight: bold } /* Keyword.Declaration */
.highlight .kn { color: #008000; font-weight: bold } /* Keyword.Namespace */
.highlight .kp { color: #008000 } /* Keyword.Pseudo */
.highlight .kr { color: #008000; font-weight: bold } /* Keyword.Reserved */
.highlight .kt { color: #B00040 } /* Keyword.Type */
.highlight .m { color: #666666 } /* Literal.Number */
.highlight .s { color: #BA2121 } /* Literal.String */
.highlight .na { color: #687822 } /* Name.Attribute */
.highlight .nb { color: #008000 } /* Name.Builtin */
.highlight .nc { color: #0000FF; font-weight: bold } /* Name.Class */
.highlight .no { color: #880000 } /* Name.Constant */
.highlight .nd { color: #AA22FF } /* Name.Decorator */
.highlight .ni { color: #717171; font-weight: bold } /* Name.Entity */
.highlight .ne { color: #CB3F38; font-weight: bold } /* Name.Exception */
.highlight .nf { color: #0000FF } /* Name.Function */
.highlight .nl { color: #767600 } /* Name.Label */
.highlight .nn { color: #0000FF; font-weight: bold } /* Name.Namespace */
.highlight .nt { color: #008000; font-weight: bold } /* Name.Tag */
.highlight .nv { color: #19177C } /* Name.Variable */
.highlight .ow { color: #AA22FF; font-weight: bold } /* Operator.Word */
.highlight .w { color: #bbbbbb } /* Text.Whitespace */
.highlight .mb { color: #666666 } /* Literal.Number.Bin */
.highlight .mf { color: #666666 } /* Literal.Number.Float */
.highlight .mh { color: #666666 } /* Literal.Number.Hex */
.highlight .mi { color: #666666 } /* Literal.Number.Integer */
.highlight .mo { color: #666666 } /* Literal.Number.Oct */
.highlight .sa { color: #BA2121 } /* Literal.String.Affix */
.highlight .sb { color: #BA2121 } /* Literal.String.Backtick */
.highlight .sc { color: #BA2121 } /* Literal.String.Char */
.highlight .dl { color: #BA2121 } /* Literal.String.Delimiter */
.highlight .sd { color: #BA2121; font-style: italic } /* Literal.String.Doc */
.highlight .s2 { color: #BA2121 } /* Literal.String.Double */
.highlight .se { color: #AA5D1F; font-weight: bold } /* Literal.String.Escape */
.highlight .sh { color: #BA2121 } /* Literal.String.Heredoc */
.highlight .si { color: #A45A77; font-weight: bold } /* Literal.String.Interpol */
.highlight .sx { color: #008000 } /* Literal.String.Other */
.highlight .sr { color: #A45A77 } /* Literal.String.Regex */
.highlight .s1 { color: #BA2121 } /* Literal.String.Single */
.highlight .ss { color: #19177C } /* Literal.String.Symbol */
.highlight .bp { color: #008000 } /* Name.Builtin.Pseudo */
.highlight .fm { color: #0000FF } /* Name.Function.Magic */
.highlight .vc { color: #19177C } /* Name.Variable.Class */
.highlight .vg { color: #19177C } /* Name.Variable.Global */
.highlight .vi { color: #19177C } /* Name.Variable.Instance */
.highlight .vm { color: #19177C } /* Name.Variable.Magic */
.highlight .il { color: #666666 } /* Literal.Number.Integer.Long */</style><div class="highlight"><pre><span></span><span class="k">def</span> <span class="nf">print_decorator</span><span class="p">(</span><span class="n">func</span><span class="p">):</span>
    <span class="k">def</span> <span class="nf">wrapper</span><span class="p">(</span><span class="o">*</span><span class="n">args</span><span class="p">,</span> <span class="o">**</span><span class="n">kwargs</span><span class="p">):</span>
        <span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">"</span><span class="si">{</span><span class="n">datetime</span><span class="o">.</span><span class="n">now</span><span class="p">()</span><span class="si">}</span><span class="s2">:</span><span class="si">{</span><span class="n">func</span><span class="si">}</span><span class="s2">:args=</span><span class="si">{</span><span class="n">args</span><span class="si">}</span><span class="s2">:kwargs=</span><span class="si">{</span><span class="n">kwargs</span><span class="si">}</span><span class="s2">"</span><span class="p">)</span>
        <span class="k">return</span> <span class="n">func</span><span class="p">(</span><span class="o">*</span><span class="n">args</span><span class="p">,</span> <span class="o">**</span><span class="n">kwargs</span><span class="p">)</span>
    <span class="k">return</span> <span class="n">wrapper</span>
</pre></div>
</div>
</div>
</section>
</section>
<section id="inheritance" class="level1" data-number="9">
<h1 data-number="9"><span class="header-section-number">9</span> Inheritance</h1>
<p>Inheritance is the idea that you a class can “Inherit” attributes and methods from other classes.</p>
<p>For example a class could have an attribute <code>a</code>, and it can be used to create a new class to give it that attribute without having to specify it.</p>
<section id="silly-simple-example-1" class="level2" data-number="9.1">
<h2 data-number="9.1" class="anchored" data-anchor-id="silly-simple-example-1"><span class="header-section-number">9.1</span> Silly Simple Example</h2>
<div id="285f5808-77f6-4cd7-9546-ad5dd7728dda" class="cell">
<div class="sourceCode cell-code" id="cb100" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb100-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">class</span> aClass: a <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span></span>
<span id="cb100-2">    </span>
<span id="cb100-3"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">class</span> bClass(aClass): <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">pass</span></span>
<span id="cb100-4">    </span>
<span id="cb100-5">aClass.a <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> bClass.a</span></code></pre></div>
<div class="cell-output cell-output-display">
<pre><code>True</code></pre>
</div>
</div>
</section>
<section id="useful-examples" class="level2" data-number="9.2">
<h2 data-number="9.2" class="anchored" data-anchor-id="useful-examples"><span class="header-section-number">9.2</span> Useful Examples</h2>
<p>In many cases there are common things we want to inherit in lots of classes. One example is having access to the date. Often you want this for logging, or printing, or any number of things. By subclassing you don’t have to reformat the date each time in your classes.</p>
<div id="851ffe78-6db6-4e1a-a133-e12b5e2d0dd1" class="cell">
<div class="sourceCode cell-code" id="cb102" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb102-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">class</span> DateMinuteMixin:</span>
<span id="cb102-2">    date_format<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'%Y%m</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%d</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">_%H%M%S'</span></span>
<span id="cb102-3">    dte <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> datetime.now()</span>
<span id="cb102-4"></span>
<span id="cb102-5">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">@property</span></span>
<span id="cb102-6">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> date_str(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>): <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.dte.strftime(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.date_format)</span></code></pre></div>
</div>
<p>Another handy use is to have generic behavior for handling different file types. In this case, we have a mixin where it opens and reads a sql file. Rather than rewriting this code for every class that needs to read a sql file, you can inherit from a class when you need that functionality.</p>
<div class="callout callout-style-default callout-tip callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Tip
</div>
</div>
<div class="callout-body-container callout-body">
<p>You can define an abstract property like below to let users know that after inheriting this class, they need to define that property. In this case, they define the <code>sql_filepath</code>, and they get the contents of the file for free via the other methods.</p>
</div>
</div>
<div id="bc2bc9f9-e1b7-4479-9b35-35a4ab749b9c" class="cell">
<div class="sourceCode cell-code" id="cb103" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb103-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> abc</span>
<span id="cb103-2"></span>
<span id="cb103-3"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">class</span> SqlFileMixin:</span>
<span id="cb103-4">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">@abc.abstractproperty</span></span>
<span id="cb103-5">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> sql_filepath(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>):</span>
<span id="cb103-6">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">pass</span></span>
<span id="cb103-7"></span>
<span id="cb103-8">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">@property</span></span>
<span id="cb103-9">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> sql_file(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>):</span>
<span id="cb103-10">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">open</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.sql_filepath)</span>
<span id="cb103-11"></span>
<span id="cb103-12">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">@property</span></span>
<span id="cb103-13">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> query(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>):</span>
<span id="cb103-14">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.sql_file.read()</span></code></pre></div>
</div>
</section>
</section>
<section id="dunders" class="level1" data-number="10">
<h1 data-number="10"><span class="header-section-number">10</span> Dunders</h1>
<div id="7f306240-2a27-4cfb-96f5-3afd97a438b4" class="cell">
<div class="sourceCode cell-code" id="cb104" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb104-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> numpy <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> np</span>
<span id="cb104-2"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">class</span> someClass:</span>
<span id="cb104-3">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__init__</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>,a): <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.a <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> a</span>
<span id="cb104-4">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__str__</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>): <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> <span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"This object's a is : </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>a<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span></span>
<span id="cb104-5">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__getitem__</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>,idx): <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.a[idx<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>]</span>
<span id="cb104-6">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__add__</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>,some_class): <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">list</span>(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">map</span>(<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">lambda</span> x,y: x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> y, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.a, some_class.a))</span></code></pre></div>
</div>
<div id="cd1bc1b9-fe90-4232-9a4b-f46015353ed8" class="cell">
<div class="sourceCode cell-code" id="cb105" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb105-1">a <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> someClass(x)</span>
<span id="cb105-2">a.a</span></code></pre></div>
<div class="cell-output cell-output-display">
<pre><code>[1, 2, 3, 4, 25]</code></pre>
</div>
</div>
<div id="f90a2d83-e980-4cfd-8508-b986380a3091" class="cell">
<div class="sourceCode cell-code" id="cb107" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb107-1">a <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> a</span></code></pre></div>
<div class="cell-output cell-output-display">
<pre><code>[2, 4, 6, 8, 50]</code></pre>
</div>
</div>
<div id="5e9680b2-d69d-421d-854b-839f7df84b0b" class="cell">
<div class="sourceCode cell-code" id="cb109" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb109-1">a[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>]</span></code></pre></div>
<div class="cell-output cell-output-display">
<pre><code>1</code></pre>
</div>
</div>
<div id="846042ca-de91-4903-a8f2-d75c0b17d4d9" class="cell">
<div class="sourceCode cell-code" id="cb111" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb111-1">a</span></code></pre></div>
<div class="cell-output cell-output-display">
<pre><code>&lt;__main__.someClass&gt;</code></pre>
</div>
</div>
<div id="d8fd3843-478c-48b3-a969-c8cd0f4fe5e1" class="cell">
<div class="sourceCode cell-code" id="cb113" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb113-1"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(a)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>This object's a is : [1, 2, 3, 4, 25]</code></pre>
</div>
</div>
</section>
<section id="iteratorsdata-streaming" class="level1" data-number="11">
<h1 data-number="11"><span class="header-section-number">11</span> Iterators/Data Streaming</h1>
<p>Iterators are useful when you don’t want to just load all data in memory all at once. They are often defined with <code>yield</code>, but there are other ways.</p>
<section id="silly-simple-example-2" class="level2" data-number="11.1">
<h2 data-number="11.1" class="anchored" data-anchor-id="silly-simple-example-2"><span class="header-section-number">11.1</span> Silly Simple Example</h2>
<div id="38fa5e70-0067-40de-ac51-47ee464c1253" class="cell">
<div class="sourceCode cell-code" id="cb115" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb115-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> mapper(items,fn):</span>
<span id="cb115-2">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> item <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> items: <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">yield</span> item</span></code></pre></div>
</div>
<div id="8726d50e-a1f3-4876-8ea6-7167a580ccae" class="cell">
<div class="sourceCode cell-code" id="cb116" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb116-1">it <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> mapper([<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">6</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">8</span>],square)</span>
<span id="cb116-2">it</span></code></pre></div>
<div class="cell-output cell-output-display">
<pre><code>&lt;generator object mapper&gt;</code></pre>
</div>
</div>
<div id="56276375-0dbb-4305-8851-2ddb56452d9a" class="cell">
<div class="sourceCode cell-code" id="cb118" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb118-1"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">next</span>(it), <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">next</span>(it), <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">next</span>(it)</span></code></pre></div>
<div class="cell-output cell-output-display">
<pre><code>(2, 4, 6)</code></pre>
</div>
</div>
<p>You can also process it sequentially in a loop.</p>
<div id="8a742483-1435-41ab-8e3d-5f261cadfb14" class="cell">
<div class="sourceCode cell-code" id="cb120" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb120-1"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> item <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> mapper([<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">6</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">8</span>],square): </span>
<span id="cb120-2">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(item)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>2
4
6
8</code></pre>
</div>
</div>
</section>
<section id="useful-example-1" class="level2" data-number="11.2">
<h2 data-number="11.2" class="anchored" data-anchor-id="useful-example-1"><span class="header-section-number">11.2</span> Useful Example</h2>
<section id="file-streaming" class="level3" data-number="11.2.1">
<h3 data-number="11.2.1" class="anchored" data-anchor-id="file-streaming"><span class="header-section-number">11.2.1</span> File Streaming</h3>
<div id="6a1f58db-a55c-48ce-8d81-0e8349344549" class="cell">
<div class="sourceCode cell-code" id="cb122" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb122-1">print_plus <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> partial(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>,end<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">++++++</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span>)</span>
<span id="cb122-2"></span>
<span id="cb122-3"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">with</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">open</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'test.txt'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'rb'</span>) <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> f:</span>
<span id="cb122-4">    iterator <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">iter</span>(partial(f.read, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">64</span>), <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">b''</span>)</span>
<span id="cb122-5">    print_plus(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">type</span>(iterator))</span>
<span id="cb122-6">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> block <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> iterator: print_plus(block)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>&lt;class 'callable_iterator'&gt;
++++++
b'one\ntwo\nthree\nfour\nfive\nsix\nseven\neight\nnine\nten\neleven\ntwelve\nt'
++++++
b'hirteen\nninety nine thousand nine hundred ninety\nninety nine tho'
++++++
b'usand nine hundred ninety one\nninety nine thousand nine hundred '
++++++
b'ninety two\nninety nine thousand nine hundred ninety three\nninety'
++++++
b' nine thousand nine hundred ninety four\nninety nine thousand nin'
++++++
b'e hundred ninety five\nninety nine thousand nine hundred ninety s'
++++++
b'ix\nninety nine thousand nine hundred ninety seven\nninety nine th'
++++++
b'ousand nine hundred ninety eight\nninety nine thousand nine hundr'
++++++
b'ed ninety nine\n'
++++++</code></pre>
</div>
</div>


</section>
</section>
</section>

 ]]></description>
  <category>Python</category>
  <category>Programming</category>
  <guid>https://isaac-flath.tech/posts/Python/Python.html</guid>
  <pubDate>Sun, 06 Nov 2022 04:00:00 GMT</pubDate>
  <media:content url="https://isaac-flath.tech/posts/_TopicImages/python.jpg" medium="image" type="image/jpeg"/>
</item>
<item>
  <title>K-Means From Scratch</title>
  <dc:creator>Isaac Flath</dc:creator>
  <link>https://isaac-flath.tech/posts/Clustering/KMeansFromScratch.html</link>
  <description><![CDATA[ 





<section id="setup" class="level1" data-number="1">
<h1 data-number="1"><span class="header-section-number">1</span> Setup</h1>
<div id="35e9e944-64a9-4afc-a267-448aa9350b02" class="cell" data-execution_count="2">
<details class="code-fold">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb1-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> math, random, matplotlib.pyplot <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> plt, operator, torch</span>
<span id="cb1-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> functools <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> partial</span>
<span id="cb1-3"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> fastcore.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">all</span> <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span></span>
<span id="cb1-4"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> torch.distributions.multivariate_normal <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> MultivariateNormal</span>
<span id="cb1-5"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> torch <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> tensor</span>
<span id="cb1-6">plt.style.use(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'dark_background'</span>)</span></code></pre></div>
</details>
</div>
<div id="3746980b-e0f9-41f3-92c5-d0f6edf49550" class="cell" data-execution_count="3">
<details class="code-fold">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb2-1">torch.manual_seed(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">42</span>)</span>
<span id="cb2-2">torch.set_printoptions(precision<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>, linewidth<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">140</span>, sci_mode<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span>)</span></code></pre></div>
</details>
</div>
<div id="52ebf418-5f4e-45eb-8edf-5cc9eba80988" class="cell" data-execution_count="4">
<details class="code-fold">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb3-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> plot_data(centroids:torch.Tensor,<span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Centroid coordinates</span></span>
<span id="cb3-2">              data:torch.Tensor, <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Data Coordinates</span></span>
<span id="cb3-3">              n_samples:<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">int</span>, <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Number of samples</span></span>
<span id="cb3-4">              ax:plt.Axes<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span> <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Matplotlib Axes object</span></span>
<span id="cb3-5">             )<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-&gt;</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>:</span>
<span id="cb3-6">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">'''Creates a visualization of centroids and data points for clustering problems'''</span></span>
<span id="cb3-7">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> ax <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">is</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>: _,ax <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> plt.subplots()</span>
<span id="cb3-8">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> i, centroid <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">enumerate</span>(centroids):</span>
<span id="cb3-9">        samples <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> data[i<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>n_samples:(i<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>n_samples]</span>
<span id="cb3-10">        ax.scatter(samples[:,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>], samples[:,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>], s<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb3-11">        ax.plot(<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>centroid, markersize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>, marker<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"x"</span>, color<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'k'</span>, mew<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>)</span>
<span id="cb3-12">        ax.plot(<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>centroid, markersize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>, marker<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"x"</span>, color<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'m'</span>, mew<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>)</span></code></pre></div>
</details>
</div>
</section>
<section id="generate-dataset" class="level1" data-number="2">
<h1 data-number="2"><span class="header-section-number">2</span> Generate Dataset</h1>
<p>We need to create a dataset. This data generation step follows what Jeremy Howard did in a notebook he did on meanshift clustering, which is a different clustering algorithm. That notebook was part of the <a href="fast.ai">fast.ai</a> <a href="https://www.fast.ai/posts/part2-2022.html">2022 part 2 course</a>.</p>
<p>Since the same dataset can be used, I used his and removed some unneeded print statements. See the plot for what the data looks like.</p>
<div id="232c6210-c99b-4dc8-8702-23cb95bb4093" class="cell" data-execution_count="5">
<div class="sourceCode cell-code" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb4-1">n_clusters <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">6</span></span>
<span id="cb4-2">n_samples <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">250</span></span>
<span id="cb4-3">centroids <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.rand(n_clusters, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">70</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">35</span> <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Points between -35 and 35</span></span></code></pre></div>
</div>
<div id="0ddcab96-bdce-4d41-bee3-551a6271a689" class="cell" data-execution_count="6">
<div class="sourceCode cell-code" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb5-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> sample(m): <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> MultivariateNormal(m, torch.diag(tensor([<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">5.</span>,<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">5.</span>]))).sample((n_samples,))</span></code></pre></div>
</div>
<div id="4563ef3f-ad0a-4869-87ff-98c698f04d2b" class="cell" data-execution_count="7">
<div class="sourceCode cell-code" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb6-1">data <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.cat([sample(c) <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> c <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> centroids])</span></code></pre></div>
</div>
<div id="9b943133-498d-4947-9d51-026f2ae1809a" class="cell" data-execution_count="8">
<div class="sourceCode cell-code" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb7-1">plot_data(centroids, data, n_samples)</span></code></pre></div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://isaac-flath.tech/posts/Clustering/KMeansFromScratch_files/figure-html/cell-8-output-1.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
</div>
</section>
<section id="k-means" class="level1" data-number="3">
<h1 data-number="3"><span class="header-section-number">3</span> K Means</h1>
<p>K-means is a clustering algorithm. There’s 4 main steps to the process:</p>
<pre><code>+ Initialize Centroids at smart starting positions
+ Calculate distance between data points and centroids
+ Classify data points based on closes centroid
+ Update centroids by moving them toward the mean of its points</code></pre>
<p>Once you have those steps, you can repeat the last 3 until your centroids no longer move.</p>
<section id="calculate-distance" class="level2" data-number="3.1">
<h2 data-number="3.1" class="anchored" data-anchor-id="calculate-distance"><span class="header-section-number">3.1</span> Calculate Distance</h2>
<p>In order to initialize our centroids we need to be able to calculate distances, so let’s do that first.</p>
<p>Given a tensor of centroid coordinates and a tensor of data coordinates we calculate distance by: + Subtract centroids coordinates from data points coordinates + Take absolute value of distances + Pythagorean Calculation + Square coordinates + Add them together + Take the Square Root</p>
<p>That gives us the euclidean distance between each data point and each centroid.</p>
<div id="5fb6c6c8-26b3-49f1-907e-e392ecb10887" class="cell" data-execution_count="9">
<div class="sourceCode cell-code" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb9-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> calculate_distances(centroids:torch.Tensor, <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Centroid coordinates</span></span>
<span id="cb9-2">                        data:torch.Tensor <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Data points you want to cluster</span></span>
<span id="cb9-3">                       )<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-&gt;</span> torch.Tensor: <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Tensor containing euclidean distance between each centroid and data point    </span></span>
<span id="cb9-4">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">'''Calculate distance between centroids and each datapoint'''</span></span>
<span id="cb9-5">    axis_distances <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> data.reshape(<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>).sub(centroids.reshape(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>,<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>)).<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">abs</span>()</span>
<span id="cb9-6">    euclid_distances <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> axis_distances.square().<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">sum</span>(axis<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>).sqrt()</span>
<span id="cb9-7">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> euclid_distances</span></code></pre></div>
</div>
</section>
<section id="initialize-centroids" class="level2" data-number="3.2">
<h2 data-number="3.2" class="anchored" data-anchor-id="initialize-centroids"><span class="header-section-number">3.2</span> Initialize Centroids</h2>
<p>Where we initialize our centroids is really important. If we don’t have good initialization we are very likely to get stuck in a local optimum. Especially with 6 centroids. One option is to run the algorithm many times and pick the best solution, but it’s a much better idea to try to have good initializations.</p>
<p>We pick centroid locations in the following way:</p>
<ul>
<li>Pick a random data point and use those coordinates as the first centroid</li>
<li>Loop to create remaining centroids
<ul>
<li>Calculate the distance between existing centroids and data points.</li>
<li>Get the distance from each data point to it’s closest centroid</li>
<li>Place the next centroid at the point with the max distance from previous step</li>
</ul></li>
</ul>
<p>This ensures we get initialization that are nice and far away from each other and spread out amonth the data, minimizing the risk of hitting local optimums.</p>
<div id="0d304156-4507-4ea9-a1e9-eb57036bf947" class="cell" data-execution_count="10">
<div class="sourceCode cell-code" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb10-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> initialize_centroids(data:torch.Tensor,<span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Data points you want to cluster</span></span>
<span id="cb10-2">                         k:torch.Tensor <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Number of centroids you want to initialize</span></span>
<span id="cb10-3">                        )<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-&gt;</span>torch.Tensor: <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Returns starting centroid coordinates</span></span>
<span id="cb10-4">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">'''Initialize starting points for centroids as far from each other as possible.'''</span></span>
<span id="cb10-5">    pred_centroids <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> data[random.sample(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>,<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(data)),<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)]</span>
<span id="cb10-6">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> i <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(k<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>): </span>
<span id="cb10-7">        _centroid <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> data[calculate_distances(pred_centroids,data).<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">min</span>(axis<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>).values.argmax()]</span>
<span id="cb10-8">        pred_centroids <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.stack([<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>pred_centroids,_centroid])</span>
<span id="cb10-9">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> pred_centroids</span></code></pre></div>
</div>
</section>
<section id="classify-data-points" class="level2" data-number="3.3">
<h2 data-number="3.3" class="anchored" data-anchor-id="classify-data-points"><span class="header-section-number">3.3</span> Classify Data Points</h2>
<p>Once we have centroids (or updated centroids), we need to assign a centroid to each data point. We do this by calculating the distance between each data point and each centroid, and assigning each datapoint to it’s closes centroid.</p>
<div id="7432b17a-59e3-4f3a-908b-8ffc597101f3" class="cell" data-execution_count="11">
<div class="sourceCode cell-code" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb11-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> assign_centroids(centroids:torch.Tensor, <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Centroid coordinates</span></span>
<span id="cb11-2">                     data:torch.Tensor <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Data points you want to cluster</span></span>
<span id="cb11-3">                    )<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-&gt;</span>torch.Tensor: <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Tensor containing new centroid assignments for each data point</span></span>
<span id="cb11-4">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">'''Based on distances update centroid assignments'''</span></span>
<span id="cb11-5">    euclid_distances <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> calculate_distances(centroids,data)</span>
<span id="cb11-6">    assigned_cluster <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> euclid_distances.squeeze().argmin(axis<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb11-7">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> assigned_cluster</span></code></pre></div>
</div>
</section>
<section id="update-centroids" class="level2" data-number="3.4">
<h2 data-number="3.4" class="anchored" data-anchor-id="update-centroids"><span class="header-section-number">3.4</span> Update Centroids</h2>
<p>To update the centroid locations, we take the mean of all the data point assigned to that centroid. We make the new centroid that point.</p>
<div id="9ba26f47-9401-4437-975e-0b27c3fc755d" class="cell" data-execution_count="12">
<div class="sourceCode cell-code" id="cb12" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb12-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> update_centroids(centroid_assignments:torch.Tensor, <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Centroid coordinates</span></span>
<span id="cb12-2">                     data:torch.Tensor <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Data points you want to cluster</span></span>
<span id="cb12-3">                    )<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-&gt;</span>torch.Tensor: <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Tensor containing updated centroid coodinates</span></span>
<span id="cb12-4">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">'''Update centroid locations'''</span></span>
<span id="cb12-5">    n_centroids <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(centroid_assignments.unique())</span>
<span id="cb12-6">    pred_centroids <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [data[centroid_assignments<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span>i].mean(axis<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>) <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> i <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(n_centroids)]</span>
<span id="cb12-7">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> torch.stack(pred_centroids)</span></code></pre></div>
</div>
</section>
</section>
<section id="training" class="level1" data-number="4">
<h1 data-number="4"><span class="header-section-number">4</span> Training</h1>
<p>Here we put it all together and train our K-means model. As you can see it fits this dataset very quickly (it’s a simple dataset).</p>
<div id="cdc560bd-c248-4f9d-a05e-f085f67ab434" class="cell" data-execution_count="13">
<div class="sourceCode cell-code" id="cb13" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb13-1">pred_centroids <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> initialize_centroids(data,n_clusters)</span>
<span id="cb13-2"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> epoch <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>):</span>
<span id="cb13-3">    plot_data(pred_centroids, data, n_samples)</span>
<span id="cb13-4">    centroid_assignments <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> assign_centroids(pred_centroids,data)</span>
<span id="cb13-5">    pred_centroids <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> update_centroids(centroid_assignments,data)</span></code></pre></div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://isaac-flath.tech/posts/Clustering/KMeansFromScratch_files/figure-html/cell-13-output-1.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://isaac-flath.tech/posts/Clustering/KMeansFromScratch_files/figure-html/cell-13-output-2.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://isaac-flath.tech/posts/Clustering/KMeansFromScratch_files/figure-html/cell-13-output-3.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
</div>


</section>

 ]]></description>
  <category>Clustering</category>
  <guid>https://isaac-flath.tech/posts/Clustering/KMeansFromScratch.html</guid>
  <pubDate>Sat, 05 Nov 2022 04:00:00 GMT</pubDate>
  <media:content url="https://isaac-flath.tech/posts/_TopicImages/clustering.jpg" medium="image" type="image/jpeg"/>
</item>
<item>
  <title>Introduction To Statistical Testing</title>
  <dc:creator>Isaac Flath</dc:creator>
  <link>https://isaac-flath.tech/posts/Statistics/BasicTesting.html</link>
  <description><![CDATA[ 





<section id="introduction-to-testing" class="level1" data-number="1">
<h1 data-number="1"><span class="header-section-number">1</span> Introduction to Testing</h1>
<div id="54d6eb11" class="cell">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb1-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> fastcore.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">all</span> <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span></span>
<span id="cb1-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> IPython.display <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> clear_output</span>
<span id="cb1-3"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> pandas <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> pd</span>
<span id="cb1-4"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> numpy <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> np</span>
<span id="cb1-5"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> matplotlib.pyplot <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> plt</span>
<span id="cb1-6"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> polygon <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> RESTClient</span>
<span id="cb1-7"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> utils <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> view_source_code, get_dollars</span>
<span id="cb1-8"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> datetime <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> datetime, timedelta, date</span>
<span id="cb1-9"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> math, time</span></code></pre></div>
</div>
<div id="8354ae65" class="cell">
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb2-1">path <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Path(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'../data'</span>)</span></code></pre></div>
</div>
<section id="background" class="level2" data-number="1.1">
<h2 data-number="1.1" class="anchored" data-anchor-id="background"><span class="header-section-number">1.1</span> Background</h2>
<p>In <a href="../../posts/TimeSeries/SimpleTimeSeries.html">a previous post</a> we created models and created actions we want to take for multiple approaches for stock trading. The question now is, how do we know if they are profitable? How should we measure them? How do we know if we simply got lucky, or if they are reliable?</p>
<p>Testing is the most important part of the process. If done well you have a good way to determine what strategies should be implemented, and if done poorly you run the risk of implementing non-profitable strategies. I believe you should strive to never sacrifice testing principles because effective testing is your <strong>only</strong> objective indication to whether you are doing something useful or not. Without effective testing you are “flying blind”.</p>
<p>This post will lay the groundwork and cover the basics of testing. The goal of this post is to introduce concept and the three core things that need to be carefully considered for effective testing.</p>
<ol type="1">
<li>What data should you use for testing?</li>
<li>What metric should you use for testing?</li>
<li>What test should you use?</li>
</ol>
<p>We are going to walk through the concepts to see each step and understand the importance.</p>
</section>
<section id="what-data-should-you-use-for-testing" class="level2" data-number="1.2">
<h2 data-number="1.2" class="anchored" data-anchor-id="what-data-should-you-use-for-testing"><span class="header-section-number">1.2</span> What data should you use for testing?</h2>
<p>The first question we have to ask is what data to we use for testing? Ideally we have 3 subsets of our data (training, validation, and test). Let’s go through what they are used for and why they are important.</p>
<section id="training-set" class="level3" data-number="1.2.1">
<h3 data-number="1.2.1" class="anchored" data-anchor-id="training-set"><span class="header-section-number">1.2.1</span> Training Set</h3>
<p>The training set is unique because it has no restrictions on what we can do with it. We can look at any piece of data in it. We can normalize data using values in the training set. We can train machine learning models on the training set. This is often the largest subset of our data.</p>
<p>This training set is pretty explanatory - we use this for understanding our data and developing our model.</p>
<p>We can load it in using the same method as we did in <a href="../../posts/TimeSeries/SimpleTimeSeries.html">the previous post</a></p>
<div id="81377a44" class="cell">
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb3-1">raw <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pd.read_csv(path<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'eod-quotemedia.csv'</span>,parse_dates<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'date'</span>])</span>
<span id="cb3-2">df <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> raw.pivot(index<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'date'</span>, columns<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'ticker'</span>,values<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'adj_close'</span>)</span>
<span id="cb3-3">train <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> df.loc[:pd.Timestamp(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'2017-1-1'</span>)]</span></code></pre></div>
</div>
</section>
<section id="validation-set" class="level3" data-number="1.2.2">
<h3 data-number="1.2.2" class="anchored" data-anchor-id="validation-set"><span class="header-section-number">1.2.2</span> Validation Set</h3>
<p>The goal of creating a trading strategy is to have it perform well on data that it was not developed using. We may use data from 2015 - 2020 to create a trading strategy, but the goal is to apply it to 2021 and 2022 to make a profit.</p>
<p>Because we want our model to perform on <em>unseen</em> data, we create some restriction to how we use the validation set. We do not train any models on it, and we do not use statistics or data from the validation set when creating our model. It’s data our model has never seen. The validation set is something we can only use to see how well our strategy or model performs.</p>
<p>The entire purpose of the validation set is to give us unseen data to evaluate our approaches on. By having this separate validation set we can more accurately determine what works and what doesn’t.</p>
<p>We can get our validation set using the same method as we did in the <a href="../../posts/TimeSeries/SimpleTimeSeries.html">previous post</a></p>
<div id="e03373cb" class="cell">
<div class="sourceCode cell-code" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb4-1">valid <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> df.loc[pd.Timestamp(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'2017-1-1'</span>):]</span></code></pre></div>
</div>
</section>
<section id="test-set" class="level3" data-number="1.2.3">
<h3 data-number="1.2.3" class="anchored" data-anchor-id="test-set"><span class="header-section-number">1.2.3</span> Test Set</h3>
<p>The Test set is very similar to the validation set, but it takes things a step further. It has further restrictions in that is is the final model step before deployment. The main difference is how often you can use it. For the validation set, you can test anything on the validation set as many times as you want. For the test set you only get to look at the test set once for your particular approach.</p>
<p>For example, you may try 300 different approaches and parameter changes to your strategy to see what works best. You can check the profitability on each of them using the validation set. Then once you have chosen a strategy, you do a final check to ensure it also performs on the test set. Once you have done that you need a new test set or your project is over.</p>
<p>The reason this is important is that you want to ensure that you didn’t get lucky and find a configuration out of your 300 attempts that just happens to work on the validation set but doesn’t work elsewhere. If you try enough combinations eventually you will find something that works, but the test set gives you confidence that your model works because it’s a good strategy and not that you just tried enough things to find something that works on coincidence.</p>
<p>:::{note} Many people re-use or have more lax rules on the test set. Many people do not use one at all. In this text I am laying out the ideal state I believe we should strive for. If you choose to loosen these restrictions on the test set or do without one, I would strongly encourage you to think hard about it.</p>
<p>To get our test set, we could have split our initial data into 3. Because we are a bit concerned about survivorship bias, let’s pull a new test set that uses recent data to and test how these strategies would perform over the last year and a half.</p>
<p>We need to get adjusted close price. There are a variety of services that have APIs to pull from, I have picked polgygon to use here because it’s free for what we need.</p>
<div id="656d894d" class="cell">
<div class="sourceCode cell-code" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb5-1">client <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> RESTClient(polygon_free_api_key)</span></code></pre></div>
</div>
<div id="bbeedcba" class="cell">
<div class="sourceCode cell-code" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb6-1"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">not</span> (path<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'polytest_eod-quotemedia.csv'</span>).exists():</span>
<span id="cb6-2">    dfs <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> L()</span>
<span id="cb6-3">    errors <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> L()</span>
<span id="cb6-4">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> ticker <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> valid:</span>
<span id="cb6-5">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">try</span>:</span>
<span id="cb6-6">            aggs <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> client.get_aggs(ticker, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"day"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"2021-01-01"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"2022-05-31"</span>,adjusted<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>)</span>
<span id="cb6-7">            close <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> {ticker:[o.close <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> o <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> aggs]}</span>
<span id="cb6-8">            </span>
<span id="cb6-9">            <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Convert millisecond time stamp to date</span></span>
<span id="cb6-10">            date <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> L(o.timestamp<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1e3</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> o <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> aggs).<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">map</span>(datetime.fromtimestamp)</span>
<span id="cb6-11">            dfs.append(pd.DataFrame(close,index<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>date))</span>
<span id="cb6-12">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">except</span>:</span>
<span id="cb6-13">            errors.append(aggs)</span>
<span id="cb6-14">            <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"FAILURE: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>ticker<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb6-15">        </span>
<span id="cb6-16">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Free api gives 5 API calls / minute - so we need to pace our api calls!</span></span>
<span id="cb6-17">        time.sleep(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">60</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>)</span>
<span id="cb6-18">    df_test <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pd.concat(dfs,axis<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb6-19">    df_test.to_csv(path<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'polytest_eod-quotemedia.csv'</span>)</span>
<span id="cb6-20"></span>
<span id="cb6-21">df_test <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pd.read_csv(path<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'polytest_eod-quotemedia.csv'</span>,index_col<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>,parse_dates<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>)</span>
<span id="cb6-22">df_test.index.name<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'date'</span></span>
<span id="cb6-23">df_test.columns.name<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'ticker'</span></span></code></pre></div>
</div>
<div id="ab7f0d89" class="cell">
<div class="sourceCode cell-code" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb7-1">df_test.iloc[:<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>,:<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>]</span></code></pre></div>
<div class="cell-output cell-output-display">
<div>


<table class="dataframe caption-top table table-sm table-striped small" data-quarto-postprocess="true" data-border="1">
<thead>
<tr class="header">
<th data-quarto-table-cell-role="th">ticker</th>
<th data-quarto-table-cell-role="th">A</th>
<th data-quarto-table-cell-role="th">AAL</th>
<th data-quarto-table-cell-role="th">AAP</th>
<th data-quarto-table-cell-role="th">AAPL</th>
<th data-quarto-table-cell-role="th">ABBV</th>
</tr>
<tr class="odd">
<th data-quarto-table-cell-role="th">date</th>
<th data-quarto-table-cell-role="th"></th>
<th data-quarto-table-cell-role="th"></th>
<th data-quarto-table-cell-role="th"></th>
<th data-quarto-table-cell-role="th"></th>
<th data-quarto-table-cell-role="th"></th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td data-quarto-table-cell-role="th">2021-01-04</td>
<td>118.64</td>
<td>15.13</td>
<td>157.34</td>
<td>129.41</td>
<td>105.41</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">2021-01-05</td>
<td>119.61</td>
<td>15.43</td>
<td>157.17</td>
<td>131.01</td>
<td>106.50</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">2021-01-06</td>
<td>122.89</td>
<td>15.52</td>
<td>166.25</td>
<td>126.60</td>
<td>105.58</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">2021-01-07</td>
<td>126.16</td>
<td>15.38</td>
<td>167.67</td>
<td>130.92</td>
<td>106.71</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">2021-01-08</td>
<td>127.06</td>
<td>15.13</td>
<td>170.06</td>
<td>132.05</td>
<td>107.27</td>
</tr>
</tbody>
</table>

</div>
</div>
</div>
</section>
</section>
<section id="what-metric-should-you-use-for-testing" class="level2" data-number="1.3">
<h2 data-number="1.3" class="anchored" data-anchor-id="what-metric-should-you-use-for-testing"><span class="header-section-number">1.3</span> What metric should you use for testing?</h2>
<p>Now that we understand what data we will use for testing, let’s start figuring out how well our first model from the <a href="../../posts/TimeSeries/SimpleTimeSeries.html">previous post performs</a></p>
<p>The next step is to figure out an appropriate metric. There are a variety of ways to measure this and we will walk through a few first steps in this section</p>
<section id="dollars" class="level3" data-number="1.3.1">
<h3 data-number="1.3.1" class="anchored" data-anchor-id="dollars"><span class="header-section-number">1.3.1</span> Dollars</h3>
<p>Let’s take our first model from <a href="../../posts/TimeSeries/SimpleTimeSeries.html">the previous post</a> and measure how well it does in terms of dollars. After all dollars is what we want to make, so it seems like a reasonable starting point.</p>
<div id="93e3c15e" class="cell">
<div class="sourceCode cell-code" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb8-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> SimpleTimeSeries <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> get_momentum_actions</span></code></pre></div>
</div>
<div id="011300ec" class="cell">
<div class="sourceCode cell-code" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb9-1">valid_mom <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> get_momentum_actions(valid,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">28</span>,<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.08</span>).reset_index()</span></code></pre></div>
</div>
<div id="6675aea3" class="cell">
<div class="sourceCode cell-code" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb10-1">transactions <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pd.melt(valid_mom,id_vars<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'date'</span>,value_name<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'action'</span>)</span>
<span id="cb10-2">transactions <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> transactions.loc[transactions.action <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">''</span>]</span>
<span id="cb10-3">transactions.columns <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'open_date'</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> L(<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>transactions.columns[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>:])</span></code></pre></div>
</div>
<div id="f7dbe4a5" class="cell">
<div class="sourceCode cell-code" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb11-1">transactions.head()</span></code></pre></div>
<div class="cell-output cell-output-display">
<div>


<table class="dataframe caption-top table table-sm table-striped small" data-quarto-postprocess="true" data-border="1">
<thead>
<tr class="header">
<th data-quarto-table-cell-role="th"></th>
<th data-quarto-table-cell-role="th">open_date</th>
<th data-quarto-table-cell-role="th">ticker</th>
<th data-quarto-table-cell-role="th">action</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td data-quarto-table-cell-role="th">0</td>
<td>2017-02-14</td>
<td>A</td>
<td>Buy</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">2</td>
<td>2017-02-16</td>
<td>A</td>
<td>Buy</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">11</td>
<td>2017-03-02</td>
<td>A</td>
<td>Buy</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">13</td>
<td>2017-03-04</td>
<td>A</td>
<td>Buy</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">14</td>
<td>2017-03-07</td>
<td>A</td>
<td>Buy</td>
</tr>
</tbody>
</table>

</div>
</div>
</div>
<p>Now we have a dataframe with all the positions we are going to take and when to take them. But we are missing one crucial piece! When should we close those positions. We cannot make money by simplying buying a stock (ignoring dividends for now) - the profit comes when we actually close the position and sell the stock. Let’s close the position 28 days after opening.</p>
<div id="19588cdf" class="cell">
<div class="sourceCode cell-code" id="cb12" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb12-1">transactions[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'close_date'</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> transactions.open_date <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> timedelta(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">28</span>)</span>
<span id="cb12-2">transactions <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> transactions.loc[transactions.open_date <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span> (transactions.open_date.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">max</span>() <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> timedelta(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">28</span>))]</span></code></pre></div>
</div>
<div id="d5f46ab9" class="cell">
<div class="sourceCode cell-code" id="cb13" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb13-1">transactions.head()</span></code></pre></div>
<div class="cell-output cell-output-display">
<div>


<table class="dataframe caption-top table table-sm table-striped small" data-quarto-postprocess="true" data-border="1">
<thead>
<tr class="header">
<th data-quarto-table-cell-role="th"></th>
<th data-quarto-table-cell-role="th">open_date</th>
<th data-quarto-table-cell-role="th">ticker</th>
<th data-quarto-table-cell-role="th">action</th>
<th data-quarto-table-cell-role="th">close_date</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td data-quarto-table-cell-role="th">0</td>
<td>2017-02-14</td>
<td>A</td>
<td>Buy</td>
<td>2017-03-14</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">2</td>
<td>2017-02-16</td>
<td>A</td>
<td>Buy</td>
<td>2017-03-16</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">11</td>
<td>2017-03-02</td>
<td>A</td>
<td>Buy</td>
<td>2017-03-30</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">13</td>
<td>2017-03-04</td>
<td>A</td>
<td>Buy</td>
<td>2017-04-01</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">14</td>
<td>2017-03-07</td>
<td>A</td>
<td>Buy</td>
<td>2017-04-04</td>
</tr>
</tbody>
</table>

</div>
</div>
</div>
<p>Next we need to get the stock price on the date of our initial action when we open to position, as well as when we close our position. Let’s start with the price on the day we open.</p>
<div id="446930bf" class="cell">
<div class="sourceCode cell-code" id="cb14" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb14-1">df_valid_long <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> valid.melt(var_name<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'ticker'</span>,value_name<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'adj_close'</span>,ignore_index<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span>).reset_index()</span>
<span id="cb14-2">df_valid_long.columns <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'dte'</span>,<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'ticker'</span>,<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'adj_close'</span>]</span></code></pre></div>
</div>
<div id="4f6a916c" class="cell">
<div class="sourceCode cell-code" id="cb15" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb15-1">transactions[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'open_date'</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pd.to_datetime(transactions.open_date)</span>
<span id="cb15-2">df_valid_long[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'dte'</span>]      <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pd.to_datetime(df_valid_long.dte)</span>
<span id="cb15-3">pd.merge(left<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>transactions,left_on<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'open_date'</span>,<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'ticker'</span>],</span>
<span id="cb15-4">         right<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>df_valid_long,right_on<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'dte'</span>,<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'ticker'</span>],</span>
<span id="cb15-5">         how<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'left'</span>).head(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>)</span></code></pre></div>
<div class="cell-output cell-output-display">
<div>


<table class="dataframe caption-top table table-sm table-striped small" data-quarto-postprocess="true" data-border="1">
<thead>
<tr class="header">
<th data-quarto-table-cell-role="th"></th>
<th data-quarto-table-cell-role="th">open_date</th>
<th data-quarto-table-cell-role="th">ticker</th>
<th data-quarto-table-cell-role="th">action</th>
<th data-quarto-table-cell-role="th">close_date</th>
<th data-quarto-table-cell-role="th">dte</th>
<th data-quarto-table-cell-role="th">adj_close</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td data-quarto-table-cell-role="th">0</td>
<td>2017-02-14</td>
<td>A</td>
<td>Buy</td>
<td>2017-03-14</td>
<td>2017-02-14</td>
<td>49.703267</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">1</td>
<td>2017-02-16</td>
<td>A</td>
<td>Buy</td>
<td>2017-03-16</td>
<td>2017-02-16</td>
<td>50.147135</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">2</td>
<td>2017-03-02</td>
<td>A</td>
<td>Buy</td>
<td>2017-03-30</td>
<td>2017-03-02</td>
<td>50.679775</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">3</td>
<td>2017-03-04</td>
<td>A</td>
<td>Buy</td>
<td>2017-04-01</td>
<td>NaT</td>
<td>NaN</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">4</td>
<td>2017-03-07</td>
<td>A</td>
<td>Buy</td>
<td>2017-04-04</td>
<td>2017-03-07</td>
<td>50.512092</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">5</td>
<td>2017-03-11</td>
<td>A</td>
<td>Buy</td>
<td>2017-04-08</td>
<td>NaT</td>
<td>NaN</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">6</td>
<td>2017-03-16</td>
<td>A</td>
<td>Buy</td>
<td>2017-04-13</td>
<td>2017-03-16</td>
<td>52.327016</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">7</td>
<td>2017-03-18</td>
<td>A</td>
<td>Buy</td>
<td>2017-04-15</td>
<td>NaT</td>
<td>NaN</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">8</td>
<td>2017-05-24</td>
<td>A</td>
<td>Buy</td>
<td>2017-06-21</td>
<td>2017-05-24</td>
<td>58.568656</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">9</td>
<td>2017-05-25</td>
<td>A</td>
<td>Buy</td>
<td>2017-06-22</td>
<td>2017-05-25</td>
<td>58.637875</td>
</tr>
</tbody>
</table>

</div>
</div>
</div>
<p>Uh oh - We have a join that isn’t working correctly and get <code>NaT</code> and <code>NaN</code>! We created our model assuming that we could make transactions any day we want, but the stock market is not open every day. There are limitations to when we can trade openly in the stock market we need to start accounting for.</p>
<p>When we trade using the adjusted close price we added a day because we wouldn’t be able to actually place the trade until the following day. If that day ended up being a Saturday in reality we would have to wait until Monday to place that trade (assuming that monday isn’t a holiday).</p>
<p>Let’s fix that by getting the next available trading day for each date. Because we know this same thing applies to our <code>close_date</code>, we will fix it there as well.</p>
<div id="14a4b0d3" class="cell">
<div class="sourceCode cell-code" id="cb16" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb16-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> get_next_trading_day(dte,unique_dates):</span>
<span id="cb16-2">    _dates_dict <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> unique_dates.val2idx()</span>
<span id="cb16-3">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> i <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>):</span>
<span id="cb16-4">        out <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> _dates_dict.get(dte.date()<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span>timedelta(i),<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span>) </span>
<span id="cb16-5">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> out <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span>: <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> unique_dates[out]</span>
<span id="cb16-6">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">raise</span> <span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">Exception</span></span></code></pre></div>
</div>
<div id="c6db36bc" class="cell">
<div class="sourceCode cell-code" id="cb17" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb17-1">f <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> bind(get_next_trading_day,unique_dates<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>L(<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>valid.index.date))</span>
<span id="cb17-2"></span>
<span id="cb17-3">transactions[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'open_date'</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> transactions.open_date.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">apply</span>(f)</span>
<span id="cb17-4">transactions[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'close_date'</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> transactions.close_date.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">apply</span>(f)</span></code></pre></div>
</div>
<div id="490f21c9" class="cell">
<div class="sourceCode cell-code" id="cb18" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb18-1">transactions[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'open_date'</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pd.to_datetime(transactions.open_date)</span>
<span id="cb18-2">transactions[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'close_date'</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pd.to_datetime(transactions.close_date)</span></code></pre></div>
</div>
<p>Now we can merge in the price correctly!</p>
<div id="f70a6faf" class="cell">
<div class="sourceCode cell-code" id="cb19" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb19-1">transactions <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pd.merge(left<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>transactions,left_on<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'open_date'</span>,<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'ticker'</span>],</span>
<span id="cb19-2">                         right<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>df_valid_long,right_on<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'dte'</span>,<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'ticker'</span>],</span>
<span id="cb19-3">                          how<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'left'</span>)</span>
<span id="cb19-4">transactions <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pd.merge(left<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>transactions,left_on<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'close_date'</span>,<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'ticker'</span>],</span>
<span id="cb19-5">                         right<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>df_valid_long,right_on<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'dte'</span>,<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'ticker'</span>],</span>
<span id="cb19-6">                          how<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'left'</span>,</span>
<span id="cb19-7">                          suffixes<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'_atOpen'</span>,<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'_atClose'</span>))</span></code></pre></div>
</div>
<div id="afdb5109" class="cell">
<div class="sourceCode cell-code" id="cb20" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb20-1">transactions[[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'ticker'</span>,<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'action'</span>,</span>
<span id="cb20-2">             <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'dte_atOpen'</span>,<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'adj_close_atOpen'</span>,</span>
<span id="cb20-3">             <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'dte_atClose'</span>,<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'adj_close_atClose'</span>]].head(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>)</span></code></pre></div>
<div class="cell-output cell-output-display">
<div>


<table class="dataframe caption-top table table-sm table-striped small" data-quarto-postprocess="true" data-border="1">
<thead>
<tr class="header">
<th data-quarto-table-cell-role="th"></th>
<th data-quarto-table-cell-role="th">ticker</th>
<th data-quarto-table-cell-role="th">action</th>
<th data-quarto-table-cell-role="th">dte_atOpen</th>
<th data-quarto-table-cell-role="th">adj_close_atOpen</th>
<th data-quarto-table-cell-role="th">dte_atClose</th>
<th data-quarto-table-cell-role="th">adj_close_atClose</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td data-quarto-table-cell-role="th">0</td>
<td>A</td>
<td>Buy</td>
<td>2017-02-14</td>
<td>49.703267</td>
<td>2017-03-14</td>
<td>51.498464</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">1</td>
<td>A</td>
<td>Buy</td>
<td>2017-02-16</td>
<td>50.147135</td>
<td>2017-03-16</td>
<td>52.327016</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">2</td>
<td>A</td>
<td>Buy</td>
<td>2017-03-02</td>
<td>50.679775</td>
<td>2017-03-30</td>
<td>52.593336</td>
</tr>
</tbody>
</table>

</div>
</div>
</div>
<p>Ok - now let’s figure out out profit. I am going to create various columns</p>
<div id="0da1e2a9" class="cell">
<div class="sourceCode cell-code" id="cb21" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb21-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> f_committed(x):</span>
<span id="cb21-2">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> x.action <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> (<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Buy'</span>,<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Short'</span>): <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> x.adj_close_atOpen  </span>
<span id="cb21-3">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">else</span>: <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span></span>
<span id="cb21-4">transactions[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'committed'</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> transactions.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">apply</span>(f_committed,axis<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb21-5"></span>
<span id="cb21-6"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> f_revenue(x):</span>
<span id="cb21-7">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> x.action<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Buy"</span>: <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> x.adj_close_atClose</span>
<span id="cb21-8">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">else</span>:               <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> x.adj_close_atOpen</span>
<span id="cb21-9">transactions[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'revenue'</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> transactions.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">apply</span>(f_revenue,axis<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb21-10"></span>
<span id="cb21-11"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> f_cost(x):</span>
<span id="cb21-12">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> x.action <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Buy'</span>: <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> x.adj_close_atOpen  </span>
<span id="cb21-13">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">else</span>:                 <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> x.adj_close_atClose</span>
<span id="cb21-14">transactions[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'cost'</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> transactions.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">apply</span>(f_cost,axis<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb21-15"></span>
<span id="cb21-16">transactions[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'profit'</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> transactions.revenue <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> transactions.cost</span></code></pre></div>
</div>
<div id="33a40545" class="cell">
<div class="sourceCode cell-code" id="cb22" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb22-1">transactions[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'committed'</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> transactions.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">apply</span>(f_committed,axis<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb22-2">transactions[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'revenue'</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> transactions.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">apply</span>(f_revenue,axis<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb22-3">transactions[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'cost'</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> transactions.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">apply</span>(f_cost,axis<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb22-4">transactions[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'profit'</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> transactions.revenue <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> transactions.cost</span></code></pre></div>
</div>
<div id="21d3b487" class="cell">
<div class="sourceCode cell-code" id="cb23" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb23-1">get_dollars(transactions[transactions.action<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Buy'</span>].profit.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">sum</span>()), <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\</span></span>
<span id="cb23-2">get_dollars(transactions[transactions.action<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Short'</span>].profit.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">sum</span>()), <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\</span></span>
<span id="cb23-3">get_dollars(transactions.profit.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">sum</span>())</span></code></pre></div>
<div class="cell-output cell-output-display">
<pre><code>('$7457.36', '$190.98', '$7648.35')</code></pre>
</div>
</div>
<p>Great! So according to our validation set we made a good chunk of profit (pre-tax). We could buy/short in higher volumes (ie Buy = 10x buys, Short = 10x shorts) to make this profit larger.</p>
<p>However, this really isn’t enough information to determine whether that is a good idea of feasible. I would love to loan someone 100 dollars if they would give me one-thousand dollars back a week later. I would hate to loan someone 1,000,000 dollars on the promise that they would pay me 1,000,900 dollars back in 20 years. The reward just wouldn’t be worth the risk, and I can use that money better in a 20-year span than that.</p>
<p>Let’s see if we can come up with a better metric that accounts for this.</p>
</section>
<section id="percent-return" class="level3" data-number="1.3.2">
<h3 data-number="1.3.2" class="anchored" data-anchor-id="percent-return"><span class="header-section-number">1.3.2</span> Percent Return</h3>
<p>Instead of measuring raw dollars, lets consider how much money (capital) we needed in order to make that 90 dollars profit. To do this we need to keep track of our money more carefully than just looking at how much we made at the end. Let’s track out financials by day instead of by transaction o calculate this.</p>
<div class="callout callout-style-default callout-note callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Note
</div>
</div>
<div class="callout-body-container callout-body">
<p>I am using “committed” to be the amount we have invested + the amount leveraged. For now, let’s assume that we won’t take out debt and borrow stocks (shorting) if we do not have the capital to cover the initial price we borrowed at</p>
</div>
</div>
<div id="12a8adb3" class="cell">
<div class="sourceCode cell-code" id="cb25" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb25-1">df <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pd.DataFrame()</span>
<span id="cb25-2"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> cols <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> [[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'open_date'</span>,<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'committed'</span>],</span>
<span id="cb25-3">             [<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'close_date'</span>,<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'profit'</span>],</span>
<span id="cb25-4">             [<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'close_date'</span>,<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'revenue'</span>],</span>
<span id="cb25-5">             [<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'open_date'</span>,<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'cost'</span>]]:</span>
<span id="cb25-6">    _tmp <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> transactions[cols].groupby(cols[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>]).<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">sum</span>()</span>
<span id="cb25-7">    df <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pd.merge(df,_tmp,how<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'outer'</span>,left_index<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>,right_index<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>)</span>
<span id="cb25-8">df.fillna(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>,inplace<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>)</span>
<span id="cb25-9">df.sort_index(inplace<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>)</span>
<span id="cb25-10">df.sample(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">8</span>)</span></code></pre></div>
<div class="cell-output cell-output-display">
<div>


<table class="dataframe caption-top table table-sm table-striped small" data-quarto-postprocess="true" data-border="1">
<thead>
<tr class="header">
<th data-quarto-table-cell-role="th"></th>
<th data-quarto-table-cell-role="th">committed</th>
<th data-quarto-table-cell-role="th">profit</th>
<th data-quarto-table-cell-role="th">revenue</th>
<th data-quarto-table-cell-role="th">cost</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td data-quarto-table-cell-role="th">2017-03-08</td>
<td>10584.689356</td>
<td>0.000000</td>
<td>0.000000</td>
<td>10583.600318</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">2017-03-29</td>
<td>5225.468769</td>
<td>-93.792090</td>
<td>11510.549118</td>
<td>5250.575701</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">2017-02-16</td>
<td>13205.019794</td>
<td>0.000000</td>
<td>0.000000</td>
<td>13187.821518</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">2017-05-04</td>
<td>12577.980970</td>
<td>-17.387456</td>
<td>3561.027174</td>
<td>12536.763156</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">2017-03-30</td>
<td>3812.650344</td>
<td>-42.581923</td>
<td>16811.036857</td>
<td>3830.179057</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">2017-05-16</td>
<td>13842.232885</td>
<td>114.058575</td>
<td>4165.332503</td>
<td>13868.190505</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">2017-05-01</td>
<td>6789.531992</td>
<td>154.664868</td>
<td>5354.190170</td>
<td>6754.560876</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">2017-06-15</td>
<td>0.000000</td>
<td>203.997769</td>
<td>10639.412827</td>
<td>0.000000</td>
</tr>
</tbody>
</table>

</div>
</div>
</div>
<p>Now we can easily look at when we had the most committed. We are subtracting revenue because once we get money back we can reinvest rather than using new money.</p>
<div id="e78dc78d" class="cell">
<div class="sourceCode cell-code" id="cb26" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb26-1">capital_needed <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> (df.committed.cumsum()<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>df.revenue.cumsum()).<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">max</span>()</span>
<span id="cb26-2">get_dollars(capital_needed)</span></code></pre></div>
<div class="cell-output cell-output-display">
<pre><code>'$274744.63'</code></pre>
</div>
</div>
<p>And of course our profit is still the same as we had before because we are just aggregating the data differently.</p>
<div class="callout callout-style-default callout-tip callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Tip
</div>
</div>
<div class="callout-body-container callout-body">
<p>This is the first time we are using the <a href="https://fastcore.fast.ai/test.html">fastcore’s testing framework</a>. It has several handy and easy to use testing functions, such as testing if 2 numbers are arbitrarily close (useful for floats).</p>
</div>
</div>
<div id="4321488a" class="cell">
<div class="sourceCode cell-code" id="cb28" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb28-1">test_close(transactions.profit.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">sum</span>(),df.profit.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">sum</span>())</span>
<span id="cb28-2">get_dollars(df.profit.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">sum</span>())</span></code></pre></div>
<div class="cell-output cell-output-display">
<pre><code>'$7648.35'</code></pre>
</div>
</div>
<p>Now that we see our capital needed and our profit, let’s calculate a percent return</p>
<div id="3881d4db" class="cell">
<div class="sourceCode cell-code" id="cb30" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb30-1"><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"Percent Return: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>(df.profit.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">sum</span>() <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> capital_needed) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:.2f}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">%"</span></span></code></pre></div>
<div class="cell-output cell-output-display">
<pre><code>'Percent Return: 2.78%'</code></pre>
</div>
</div>
</section>
<section id="log-return" class="level3" data-number="1.3.3">
<h3 data-number="1.3.3" class="anchored" data-anchor-id="log-return"><span class="header-section-number">1.3.3</span> Log Return</h3>
<p>More commonly rather than using the percent return we want to use the log return. There are a lot of reasons they are advantageous to use, but for now we will cover one that is immediately useful to us.</p>
<p><strong>Symmetry / Additive</strong></p>
<ul>
<li>Percent Return
<ul>
<li>Invest 100 dollars</li>
<li>Get 50% Return on investment 1 and reinvest</li>
<li>Get -50% Return on investment 2</li>
<li>End with <strong>75</strong> dollars</li>
</ul></li>
<li>Log Return
<ul>
<li>Invest 100 dollars</li>
<li>Get 50% Return on investment 1 and reinvest</li>
<li>Get -50% Return on investment 2</li>
<li>End with <strong>100</strong> dollars</li>
</ul></li>
</ul>
<p>This property where a positive return + an equal-sized negative return = no return makes it much easier to look at returns and figure out if you are winning or losing. Just add up all your log returns to get your overall log return. You have to be much more careful with percent returns.</p>
<div id="ca5a26d9" class="cell">
<div class="sourceCode cell-code" id="cb32" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb32-1">pt <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> capital_needed <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> df.profit.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">sum</span>()</span>
<span id="cb32-2">pt_1 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> capital_needed</span>
<span id="cb32-3">log_return <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> math.log(pt<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span>pt_1)</span>
<span id="cb32-4"><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>math<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>log(pt<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span>pt_1)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:.2f}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">%"</span></span></code></pre></div>
<div class="cell-output cell-output-display">
<pre><code>'2.75%'</code></pre>
</div>
</div>
<p>As we calculate the log return we see we get a very similar value to our percent return, but it’s not exactly the same. The advantage of using the log return however is we can accurate get an estimated annualized return.</p>
<p>This is great because we can easily have everything thought of as an annualized return so that we have a common time frame to compare investment strategies more easily.</p>
<div id="38cc2cbf" class="cell">
<div class="sourceCode cell-code" id="cb34" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb34-1">time_period <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> (df.index.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">max</span>().date() <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> df.index.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">min</span>().date()).days</span></code></pre></div>
</div>
<div id="ca06348b" class="cell">
<div class="sourceCode cell-code" id="cb35" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb35-1"><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>(log_return<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span>time_period <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">365</span>)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:.2f}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">%"</span></span></code></pre></div>
<div class="cell-output cell-output-display">
<pre><code>'7.37%'</code></pre>
</div>
</div>
<p>Now we can just convert to normal return to compare very simply to S&amp;P 500 annual return</p>
<div id="3141cd0f" class="cell">
<div class="sourceCode cell-code" id="cb37" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb37-1"><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>(np.exp(log_return<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span>time_period <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">365</span>)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:.2f}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">%"</span></span></code></pre></div>
<div class="cell-output cell-output-display">
<pre><code>'7.65%'</code></pre>
</div>
</div>
<p>Go ahead an look up S&amp;P 500 annual returns for each year online and compare. How does this fare?</p>
</section>
</section>
<section id="statistical-tests" class="level2" data-number="1.4">
<h2 data-number="1.4" class="anchored" data-anchor-id="statistical-tests"><span class="header-section-number">1.4</span> Statistical Tests</h2>
<section id="motivation" class="level3" data-number="1.4.1">
<h3 data-number="1.4.1" class="anchored" data-anchor-id="motivation"><span class="header-section-number">1.4.1</span> Motivation</h3>
<p>If you bought fifty 1.50 dollar lottery tickets and won 10 million dollars in the lottery, what could you say about your chances to win? Well let’s calculate our rate of return.</p>
<p><img src="https://latex.codecogs.com/png.latex?%5Cfrac%7B10,000,000%20-%2075%7D%7B75%7D%20=%20133,332.33"></p>
<p>So based on our calculations, the rate of return for playing the lottery is fantastic. But we know that this doesn’t really reflect reality or mean that it’s a good safe investment strategy. We know that you would’ve just gotten lucky.</p>
<p>So how do we determine if our trading strategy is a good strategy, or we just got lucky this time? This is where statistical testing comes in.</p>
<p>I will cover the basics that I think are key, but if you’d like more detail and practice I reading <a href="https://www.lock5stat.com/">Statistics: Unlocking the Power of Data</a>. Unlike most statistics books it is extremely applied and focused on data, with lots of real world examples.</p>
</section>
<section id="bootstrapping" class="level3" data-number="1.4.2">
<h3 data-number="1.4.2" class="anchored" data-anchor-id="bootstrapping"><span class="header-section-number">1.4.2</span> Bootstrapping</h3>
<section id="background-1" class="level4" data-number="1.4.2.1">
<h4 data-number="1.4.2.1" class="anchored" data-anchor-id="background-1"><span class="header-section-number">1.4.2.1</span> Background</h4>
<p>Statistical testing can be done be done using 2 general approaches. The first is the classical approach with is the most widely known. The second is through bootstrapping. This post will focus on bootstrapping because in my opinion it is the first that should be learned.</p>
<p>Bootstrapping is less commonly accepted but is the more powerful and flexible of the two. In bootstrapping you create a sampling distribution by by taking many samples and performing an experiment. In traditional testing you use clever algebra to approximate a sampling distribution. With todays computer you can almost always use bootstrapping and I believe it it the more powerful and flexible approach.</p>
<p>With Bootstrapping you start with just the data and make no other assumptions about the data. With classical methods you start with the data and some assumptions about the data in order to arrive at an answer. If you make incorrect assumptions then you get an incorrect answer - and determining which assumptions are safe to make is not always trivial.</p>
<p>The idea of bootstrapping and the power of it has also been spoken of by many of the statistical greats for almost 100 years, much longer than it was feasible to do, <a href="https://www.lock5stat.com/Lock5Overview.pdf">as pointed out in this article</a>.</p>
<p>For example, that article points out that in 1936 Sir R.A. Fisher spoke about using this bootstrapping approach:</p>
<blockquote class="blockquote">
<p>Actually, the statistician does not carry out this very simple and very tedious process, but his conclusions have no justification beyond the fact that they agree with those which could have been arrived at by this elementary method.</p>
</blockquote>
<p>However while these methods were tedious in 1936, they are trivial thanks to modern computers. We no longer have to do clever algebraic tricks to approximate a sampling distribution - we can just create a sampling distribution.</p>
<p>That said, I do believe it’s good and useful to have the ability to use both approaches. Luckily, traditional testing is just algebraic tricks to approximate what we will do here and so it will not be too hard to pick that up on top of bootstrapping. In this section we will focus on Bootstrapping because in my opinion it is the one that should be learned first.</p>
</section>
<section id="bootstrap-test" class="level4" data-number="1.4.2.2">
<h4 data-number="1.4.2.2" class="anchored" data-anchor-id="bootstrap-test"><span class="header-section-number">1.4.2.2</span> Bootstrap Test</h4>
<p>With any type of testing we need to understand what we are testing. We are going to have 2 competing hypothesis. The first in the <strong>null hypothesis</strong>. The null hypothesis is what we assume to be true, until we have evidence otherwise.</p>
<p>In the context of trading strategies we might make the hypothesis that our strategy will yield returns equal to that of randomly picking stocks. If we randomly pick stocks we know that it will roughly match the market so that seems like a reasonable thing to want to beat. The null hypothesis is important because our goal of testing is to determine whether we have sufficient evident to reject that null hypothesis.</p>
<p>The alternate hypothesis is what we are testing for. For example, if the null hypothesis is that our strategy will yield returns equal that that of investing in random stocks the alternate hypothesis could be that our strategy will yield returns greater than if we were to invest in random stocks.</p>
<p>First we need a few functions:</p>
<ul>
<li>A function to run our null hypothesis model (random)</li>
<li>A function to run the model we created and have been exploring throughout the post</li>
<li>A function to measure the statistic of each run (log return of the models)</li>
</ul>
<section id="null-hypothesis-model" class="level5" data-number="1.4.2.2.1">
<h5 data-number="1.4.2.2.1" class="anchored" data-anchor-id="null-hypothesis-model"><span class="header-section-number">1.4.2.2.1</span> Null Hypothesis Model</h5>
<p>Let’s design a Null Hypothesis. There are many Null Hypothesis’ you can choose, and one of the beauty of bootstrapping is that you can think about it very intuitively and design the experiment exactly how you want easier.</p>
<div id="a57e0e20" class="cell">
<div class="sourceCode cell-code" id="cb39" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb39-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> run_random(input_df,buy_chance,short_chance,hold_time):</span>
<span id="cb39-2">    input_df_l <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> input_df.melt(var_name<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'ticker'</span>,value_name<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'adj_close'</span>,</span>
<span id="cb39-3">                                  ignore_index<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span>).reset_index()</span>
<span id="cb39-4">    </span>
<span id="cb39-5">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Buy/Short stocks using random chance, probabilities to be passed as arguements</span></span>
<span id="cb39-6">    buys <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> input_df_l.loc[np.random.rand(input_df_l.shape[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>])<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span>buy_chance].copy()</span>
<span id="cb39-7">    shorts <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> input_df_l.loc[np.random.rand(input_df_l.shape[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>])<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span>short_chance].copy()</span>
<span id="cb39-8"></span>
<span id="cb39-9">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Concatenate into 1 dataframe</span></span>
<span id="cb39-10">    buys[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'action'</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Buy'</span></span>
<span id="cb39-11">    shorts[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'action'</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Short'</span></span>
<span id="cb39-12">    trans <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pd.concat([buys[[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'date'</span>,<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'ticker'</span>,<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'action'</span>]],</span>
<span id="cb39-13">                     shorts[[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'date'</span>,<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'ticker'</span>,<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'action'</span>]]])</span>
<span id="cb39-14">    </span>
<span id="cb39-15">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Close the positions</span></span>
<span id="cb39-16">    trans[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'close_date'</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> trans.date <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> timedelta(hold_time)</span>
<span id="cb39-17">    trans <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> trans.loc[trans.date <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span> (trans.date.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">max</span>() <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> timedelta(hold_time))]</span>
<span id="cb39-18">    </span>
<span id="cb39-19">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Adjust dates for when market is open</span></span>
<span id="cb39-20">    f <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> bind(get_next_trading_day,unique_dates<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>L(<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>input_df.index.date))</span>
<span id="cb39-21">    </span>
<span id="cb39-22">    trans[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'date'</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pd.to_datetime(trans.date.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">apply</span>(f))</span>
<span id="cb39-23">    trans[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'close_date'</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pd.to_datetime(trans.close_date.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">apply</span>(f))</span>
<span id="cb39-24">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> trans</span></code></pre></div>
</div>
</section>
<section id="alternate-hypothesis-model" class="level5" data-number="1.4.2.2.2">
<h5 data-number="1.4.2.2.2" class="anchored" data-anchor-id="alternate-hypothesis-model"><span class="header-section-number">1.4.2.2.2</span> Alternate Hypothesis Model</h5>
<p>We also need a model that we are hoping performs well that we are trying to evaluate whether it is better than our random null hypothesis or not. For this, we will just use the model we have been working on throughout the post.</p>
<div id="2dbcfe06" class="cell">
<div class="sourceCode cell-code" id="cb40" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb40-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> run_model(input_df,n_periods,threshold,hold_time):</span>
<span id="cb40-2">    valid_mom <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> get_momentum_actions(input_df,n_periods,threshold).reset_index()</span>
<span id="cb40-3">    trans <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pd.melt(valid_mom,id_vars<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'date'</span>,value_name<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'action'</span>)</span>
<span id="cb40-4">    trans <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> trans.loc[trans.action <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">''</span>]</span>
<span id="cb40-5">    trans[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'close_date'</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> trans.date <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> timedelta(hold_time)</span>
<span id="cb40-6">    trans <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> trans.loc[trans.date <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span> (trans.date.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">max</span>() <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> timedelta(hold_time))]</span>
<span id="cb40-7"></span>
<span id="cb40-8">    f <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> bind(get_next_trading_day,unique_dates<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>L(<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>input_df.index.date))</span>
<span id="cb40-9">    trans[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'date'</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pd.to_datetime(trans.date.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">apply</span>(f))</span>
<span id="cb40-10">    trans[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'close_date'</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pd.to_datetime(trans.close_date.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">apply</span>(f))</span>
<span id="cb40-11">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> trans</span></code></pre></div>
</div>
</section>
<section id="calculate-returns" class="level5" data-number="1.4.2.2.3">
<h5 data-number="1.4.2.2.3" class="anchored" data-anchor-id="calculate-returns"><span class="header-section-number">1.4.2.2.3</span> Calculate Returns</h5>
<p>Next, we need a function that can take our 2 different model outputs (for null and alternate hypothesis) and calculate the statistic we care about (log return). We do this by drawing on our work earlier in the post.</p>
<div id="c9e7ae23" class="cell">
<div class="sourceCode cell-code" id="cb41" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb41-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> calculate_returns(trans,input_df):</span>
<span id="cb41-2">    input_df_l <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> input_df.melt(var_name<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'ticker'</span>,value_name<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'adj_close'</span>,</span>
<span id="cb41-3">                                  ignore_index<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span>).reset_index()</span>
<span id="cb41-4">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Merge in stock prices</span></span>
<span id="cb41-5">    trans <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pd.merge(left<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>trans,left_on<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'date'</span>,<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'ticker'</span>],</span>
<span id="cb41-6">                             right<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>input_df_l,right_on<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'date'</span>,<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'ticker'</span>],</span>
<span id="cb41-7">                              how<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'left'</span>)</span>
<span id="cb41-8"></span>
<span id="cb41-9">    trans <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pd.merge(left<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>trans,left_on<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'close_date'</span>,<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'ticker'</span>],</span>
<span id="cb41-10">                             right<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>input_df_l,right_on<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'date'</span>,<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'ticker'</span>],</span>
<span id="cb41-11">                              how<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'left'</span>,</span>
<span id="cb41-12">                              suffixes<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'_atOpen'</span>,<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'_atClose'</span>))</span>
<span id="cb41-13">    trans <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> trans[[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'ticker'</span>,<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'action'</span>,</span>
<span id="cb41-14">                   <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'date_atOpen'</span> ,<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'adj_close_atOpen'</span>,</span>
<span id="cb41-15">                   <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'date_atClose'</span>,<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'adj_close_atClose'</span>]]</span>
<span id="cb41-16"></span>
<span id="cb41-17">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Calculate profit for each transaction</span></span>
<span id="cb41-18">    trans[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'committed'</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> trans.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">apply</span>(f_committed,axis<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb41-19">    trans[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'revenue'</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> trans.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">apply</span>(f_revenue,axis<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb41-20">    trans[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'cost'</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> trans.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">apply</span>(f_cost,axis<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb41-21">    trans[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'profit'</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> trans.revenue <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> trans.cost</span>
<span id="cb41-22"></span>
<span id="cb41-23">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Create Daily dataframe</span></span>
<span id="cb41-24">    df_daily <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pd.DataFrame()</span>
<span id="cb41-25">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> cols <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> [[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'date_atOpen'</span>,<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'committed'</span>],[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'date_atClose'</span>,<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'profit'</span>],</span>
<span id="cb41-26">                 [<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'date_atClose'</span>,<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'revenue'</span>],[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'date_atOpen'</span>,<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'cost'</span>]]:</span>
<span id="cb41-27">        _tmp <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> trans[cols].groupby(cols[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>]).<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">sum</span>()</span>
<span id="cb41-28">        df_daily <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pd.merge(df_daily,_tmp,how<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'outer'</span>,</span>
<span id="cb41-29">                            left_index<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>,right_index<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>)</span>
<span id="cb41-30">    df_daily.fillna(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>,inplace<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>)</span>
<span id="cb41-31">    df_daily.sort_index(inplace<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>)</span>
<span id="cb41-32">    </span>
<span id="cb41-33">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Calculate Log Return</span></span>
<span id="cb41-34">    pt_1 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> (df_daily.committed.cumsum()<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>df_daily.revenue.cumsum()).<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">max</span>()</span>
<span id="cb41-35">    pt <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pt_1 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> df_daily.profit.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">sum</span>()</span>
<span id="cb41-36">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> math.log(pt<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span>pt_1)</span>
<span id="cb41-37"></span>
<span id="cb41-38">calculate_returns(run_model(valid.iloc[:,:<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>],<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">28</span>,<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.08</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">28</span>),valid.iloc[:,:<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>]),<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\</span></span>
<span id="cb41-39">calculate_returns(run_random(valid.iloc[:,:<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>],<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">.1</span>,<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.05</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">28</span>),valid.iloc[:,:<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>]),</span></code></pre></div>
<div class="cell-output cell-output-display">
<pre><code>(0.01999690938292933, 0.018885915383428743)</code></pre>
</div>
</div>
</section>
<section id="statistical-test" class="level5" data-number="1.4.2.2.4">
<h5 data-number="1.4.2.2.4" class="anchored" data-anchor-id="statistical-test"><span class="header-section-number">1.4.2.2.4</span> Statistical Test</h5>
<p>Now that we have the setup let’s start our test. First for our random model we need to give it a buy and short chance probability. Let’s assume roughly even volume of trades to keep things simple and get the probabilities from our model. In this way our random model trades at the same volume and frequency, just using random selection instead of momentum selection.</p>
<div id="07707ac4" class="cell">
<div class="sourceCode cell-code" id="cb43" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb43-1">df_long <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> valid.melt(var_name<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'ticker'</span>,value_name<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'adj_close'</span>,</span>
<span id="cb43-2">                     ignore_index<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span>).reset_index()</span>
<span id="cb43-3">t <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> run_model(valid,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">28</span>,<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.08</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">28</span>)</span>
<span id="cb43-4">buy_chance <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">sum</span>(t.action<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Buy'</span>)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(df_long)</span>
<span id="cb43-5">short_chance <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">sum</span>(t.action<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Short'</span>)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(df_long)</span>
<span id="cb43-6"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"Model buy percentage=</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>buy_chance<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb43-7"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"Model buy percentage=</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>short_chance<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Model buy percentage=0.08691717171717171
Model buy percentage=0.04311919191919192</code></pre>
</div>
</div>
<p>Great - Let’s bind these to a function. This is a functional programming principle that is extremely common in functional languages in the form of currying. Python isn’t quite as convenient so we use <a href="https://fastcore.fast.ai/basics.html#bind">fastcore’s bind</a> for this (which is like the more common <a href="https://docs.python.org/3/library/functools.html#functools.partial">functool partial</a>, with a few added conveniences).</p>
<p>This allows us to pass our model functions as parameters which will be convenient when we want to try different parameters. We could also just have all the parameters for either function as arguments in the main <code>run_bootstrap_test</code> function, but that can get rather clunky and confusing.</p>
<div id="de71bd18" class="cell">
<div class="sourceCode cell-code" id="cb45" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb45-1">model_h0 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> bind(run_random,</span>
<span id="cb45-2">                buy_chance<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>buy_chance,</span>
<span id="cb45-3">                short_chance<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>short_chance,</span>
<span id="cb45-4">                hold_time<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">28</span>)</span></code></pre></div>
</div>
<p>Now we get to the meat of bootstrapping. Really all we are doing is tacking different samples and running both models many times on different samples. In classical statistics the normal distribution or some other distribution is assumed so that we can approximate a sampling distribution. In bootstrapping we just create the sampling distribution directly.</p>
<div id="4f041cbe" class="cell">
<div class="sourceCode cell-code" id="cb46" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb46-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> run_bootstrap_test(input_df,model_h0,runs,sample_size):</span>
<span id="cb46-2">    r_h0 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> L()</span>
<span id="cb46-3">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> i <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(runs):</span>
<span id="cb46-4">        ticker_sample <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.random.choice(input_df.columns,sample_size) </span>
<span id="cb46-5">        valid_sample <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> input_df[ticker_sample]</span>
<span id="cb46-6">        r_h0.append(calculate_returns(model_h0(valid_sample),input_df))</span>
<span id="cb46-7">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> r_h0</span></code></pre></div>
</div>
</section>
<section id="plot-experiment" class="level5" data-number="1.4.2.2.5">
<h5 data-number="1.4.2.2.5" class="anchored" data-anchor-id="plot-experiment"><span class="header-section-number">1.4.2.2.5</span> Plot Experiment</h5>
<p>It’s always helpful to visualize whatever you can. Visualizing the data will help you build intuition, generate additional ideas, spot outliers, and identify possible errors in your code. Let’s start with plotting our initial parameters we are using.</p>
<div id="f5f9f279" class="cell">
<div class="sourceCode cell-code" id="cb47" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb47-1">fig,ax <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> plt.subplots(figsize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">6</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">6</span>))</span>
<span id="cb47-2"></span>
<span id="cb47-3">model_h0 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> bind(run_random,</span>
<span id="cb47-4">                buy_chance<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>buy_chance,short_chance<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>short_chance,hold_time<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">28</span>)</span>
<span id="cb47-5"></span>
<span id="cb47-6">model_h1 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> bind(run_model,</span>
<span id="cb47-7">                n_periods<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">28</span>,threshold<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.08</span>,hold_time<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">28</span>)</span>
<span id="cb47-8">    </span>
<span id="cb47-9">runs, ss <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">200</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span></span>
<span id="cb47-10">h0 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> run_bootstrap_test(valid,model_h0,runs<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>runs,sample_size<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>ss)</span>
<span id="cb47-11">ax.set_xlim(<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">.15</span>,<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">.15</span>)</span>
<span id="cb47-12"></span>
<span id="cb47-13">ax.hist(h0,alpha<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.5</span>,bins<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">60</span>,label <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'h0'</span>,<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">.15</span>,<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">.15</span>))</span>
<span id="cb47-14">x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> calculate_returns(model_h1(valid),valid)</span>
<span id="cb47-15">ax.scatter(x<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>x,y<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>,marker<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"P"</span>,color<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'red'</span>,s<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">300</span>)</span>
<span id="cb47-16"></span>
<span id="cb47-17">title_r1 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"h0 mean=</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>np<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>array(h0)<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>mean()<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:.4f}</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\n</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span></span>
<span id="cb47-18">title_r2 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"h1 value=</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>x<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:.4f}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span></span>
<span id="cb47-19"></span>
<span id="cb47-20">ax.set_title(title_r1 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> title_r2)</span>
<span id="cb47-21">ax.legend(loc <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'upper left'</span>) </span>
<span id="cb47-22">plt.show()</span></code></pre></div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://isaac-flath.tech/posts/Statistics/BasicTesting_files/figure-html/cell-39-output-1.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
</div>
<p>The blue histogram is the distribution of our random sampling. The Red is our models return. Visually the red point seems perfectly in line with the random distribution, but let’s be a bit more scientific about it. Let’s calculate the p-value, and talk about what that means.</p>
<div id="c5a9deda" class="cell">
<div class="sourceCode cell-code" id="cb48" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb48-1">p_value <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> (np.array(h0)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span>x).<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">sum</span>()<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span>runs</span>
<span id="cb48-2"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(p_value)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>0.425</code></pre>
</div>
</div>
<p>The p-value tells us the percentage of samples from our randomized null hypothesis trials that are more extreme than our model’s return. Roughly 40% of the time we get a more unusual result just using our random selection - which tells us that from this look our model is pretty indistinguishable from our random model.</p>
<p>Said in statistical jargon, we failed to reject the null hypothesis.</p>
<p>Let’s try something else</p>
</section>
<section id="what-if-we-hold-for-less-time" class="level5" data-number="1.4.2.2.6">
<h5 data-number="1.4.2.2.6" class="anchored" data-anchor-id="what-if-we-hold-for-less-time"><span class="header-section-number">1.4.2.2.6</span> What if we hold for less time?</h5>
<div id="c3770ec9" class="cell">
<div class="sourceCode cell-code" id="cb50" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb50-1">fig,ax <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> plt.subplots(figsize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">6</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">6</span>))</span>
<span id="cb50-2"></span>
<span id="cb50-3">model_h0 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> bind(run_random,</span>
<span id="cb50-4">                buy_chance<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>buy_chance,short_chance<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>short_chance,hold_time<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">14</span>)</span>
<span id="cb50-5">model_h1 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> bind(run_model,</span>
<span id="cb50-6">                n_periods<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">28</span>,threshold<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.08</span>,hold_time<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">14</span>)</span>
<span id="cb50-7">    </span>
<span id="cb50-8">runs, ss <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">200</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span></span>
<span id="cb50-9">h0 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> run_bootstrap_test(valid,model_h0,runs<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>runs,sample_size<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>ss)</span>
<span id="cb50-10">ax.set_xlim(<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">.15</span>,<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">.15</span>)</span>
<span id="cb50-11"></span>
<span id="cb50-12">ax.hist(h0,alpha<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.5</span>,bins<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">60</span>,label <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'h0'</span>,<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">.15</span>,<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">.15</span>))</span>
<span id="cb50-13">x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> calculate_returns(model_h1(valid),valid)</span>
<span id="cb50-14">ax.scatter(x<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>x,y<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>,marker<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"P"</span>,color<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'red'</span>,s<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">300</span>)</span>
<span id="cb50-15"></span>
<span id="cb50-16">title_r1 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"h0 mean=</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>np<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>array(h0)<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>mean()<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:.4f}</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\n</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span></span>
<span id="cb50-17">title_r2 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"h1 value=</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>x<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:.4f}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span></span>
<span id="cb50-18"></span>
<span id="cb50-19">ax.set_title(title_r1 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> title_r2)</span>
<span id="cb50-20">ax.legend(loc <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'upper left'</span>) </span>
<span id="cb50-21">plt.show()</span></code></pre></div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://isaac-flath.tech/posts/Statistics/BasicTesting_files/figure-html/cell-41-output-1.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
</div>
<div id="baed1565" class="cell">
<div class="sourceCode cell-code" id="cb51" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb51-1">p_value <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> (np.array(h0)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span>x).<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">sum</span>()<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span>runs</span>
<span id="cb51-2"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(p_value)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>0.33</code></pre>
</div>
</div>
<p>This isn’t any better. But that’s ok, because that’s how the process works. Most of your experiments will fail, and this was only our first model. Let’s try one more idea.</p>
</section>
<section id="what-if-we-use-a-larger-period-size-for-momentum" class="level5" data-number="1.4.2.2.7">
<h5 data-number="1.4.2.2.7" class="anchored" data-anchor-id="what-if-we-use-a-larger-period-size-for-momentum"><span class="header-section-number">1.4.2.2.7</span> What if we use a larger period size for momentum?</h5>
<div id="d551cced" class="cell">
<div class="sourceCode cell-code" id="cb53" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb53-1">fig,ax <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> plt.subplots(figsize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">6</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">6</span>))</span>
<span id="cb53-2"></span>
<span id="cb53-3">model_h0 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> bind(run_random,</span>
<span id="cb53-4">                buy_chance<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>buy_chance,short_chance<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>short_chance,hold_time<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">28</span>)</span>
<span id="cb53-5">model_h1 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> bind(run_model,</span>
<span id="cb53-6">                n_periods<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">56</span>,threshold<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.08</span>,hold_time<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">28</span>)</span>
<span id="cb53-7">    </span>
<span id="cb53-8">runs, ss <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">200</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span></span>
<span id="cb53-9">h0 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> run_bootstrap_test(valid,model_h0,runs<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>runs,sample_size<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>ss)</span>
<span id="cb53-10">ax.set_xlim(<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">.15</span>,<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">.15</span>)</span>
<span id="cb53-11"></span>
<span id="cb53-12">ax.hist(h0,alpha<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.5</span>,bins<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">60</span>,label <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'h0'</span>,<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">.15</span>,<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">.15</span>))</span>
<span id="cb53-13">x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> calculate_returns(model_h1(valid),valid)</span>
<span id="cb53-14">ax.scatter(x<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>x,y<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>,marker<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"P"</span>,color<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'red'</span>,s<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">300</span>)</span>
<span id="cb53-15"></span>
<span id="cb53-16">title_r1 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"h0 mean=</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>np<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>array(h0)<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>mean()<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:.4f}</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\n</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span></span>
<span id="cb53-17">title_r2 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"h1 value=</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>x<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:.4f}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span></span>
<span id="cb53-18"></span>
<span id="cb53-19">ax.set_title(title_r1 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> title_r2)</span>
<span id="cb53-20">ax.legend(loc <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'upper left'</span>) </span>
<span id="cb53-21">plt.show()</span></code></pre></div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://isaac-flath.tech/posts/Statistics/BasicTesting_files/figure-html/cell-43-output-1.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
</div>
<div id="7a71d88e" class="cell">
<div class="sourceCode cell-code" id="cb54" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb54-1">p_value <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> (np.array(h0)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span>x).<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">sum</span>()<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span>runs</span>
<span id="cb54-2"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(p_value)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>0.015</code></pre>
</div>
</div>
<p>Now we’re talking! A very small percentage of the values from our random model are more extreme than the one we got with our model.</p>
<p>But now this invites a new question - how small does the p-value need to be to reject the null hypothesis? 0.05 is the most common and many people use this by default, but <strong>what your p-value threshold is is a design choice and trede-off that has real implications on your testing</strong>. This is something to carefully consider. Remember, testing is our only objective signal for whether we are doing something right or not so it deserves the most care and consideration.</p>
<p>Let’s consider the extremes so that we can easily thing about the trade-off.</p>
<p><strong>What if the p-value threshold we pick is large (ie 0.5)?</strong>*</p>
<p>With a p-value threshold of 0.5, we accept anything where less than 50% of the values from the randomized null hypothesis tests are more extreme. The risk of this means that we will have a lot of false positives. Said another way, LOTS of stuff will pass our test many of them just because of luck.</p>
<p>Said simply, we will think a lot of bad ideas are good ideas.</p>
<p><strong>What if the p-value threshold we pick is small (ie 0.000001)?</strong>*</p>
<p>With a p-value this small almost nothing will pass the test, but if it does we can be pretty confident in it! The problem with this is many good ideas will fail the test just because of bad luck.</p>
<p>Said simply, we will have a lot of good ideas that we won’t realize are good ideas. These are missed opportunities.</p>
<p><strong>The Tradeoff</strong></p>
<p>So really the P value is a trade-off. A lower P value is more cautious and safe but you will miss out on some opportunities. A high P value is riskier and more of your approaches will turn out to fail.</p>
<p>It is important to understand that this is a tradeoff. For a more detailed guide to testing read the hypothesis testing material in <a href="https://www.lock5stat.com/">Statistics: Unlocking the Power of Data</a></p>
</section>
</section>
</section>
</section>
<section id="the-test-set" class="level2" data-number="1.5">
<h2 data-number="1.5" class="anchored" data-anchor-id="the-test-set"><span class="header-section-number">1.5</span> The Test Set</h2>
<p>Now that we have our best model, we will test it on the test set. This is the only time we can look at it - so while we got to try lots of things out on our validation set we only get 1 shot at our test set. Let’s see how it performs</p>
<div id="02a944b5" class="cell">
<div class="sourceCode cell-code" id="cb56" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb56-1">fig,ax <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> plt.subplots(figsize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">6</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">6</span>))</span>
<span id="cb56-2"></span>
<span id="cb56-3">df_test_small <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> df_test[df_test.index <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'2021-05-31'</span>]</span>
<span id="cb56-4"></span>
<span id="cb56-5">model_h0 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> bind(run_random,</span>
<span id="cb56-6">                buy_chance<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>buy_chance,short_chance<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>short_chance,hold_time<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">28</span>)</span>
<span id="cb56-7">model_h1 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> bind(run_model,</span>
<span id="cb56-8">                n_periods<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">56</span>,threshold<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.08</span>,hold_time<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">28</span>)</span>
<span id="cb56-9">    </span>
<span id="cb56-10">runs, ss <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">200</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span></span>
<span id="cb56-11">h0 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> run_bootstrap_test(df_test_small,model_h0,runs<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>runs,sample_size<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>ss)</span>
<span id="cb56-12">ax.set_xlim(<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">.15</span>,<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">.15</span>)</span>
<span id="cb56-13"></span>
<span id="cb56-14">ax.hist(h0,alpha<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.5</span>,bins<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">60</span>,label <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'h0'</span>,<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">.15</span>,<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">.15</span>))</span>
<span id="cb56-15">x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> calculate_returns(model_h1(df_test_small),df_test_small)</span>
<span id="cb56-16">ax.scatter(x<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>x,y<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>,marker<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"P"</span>,color<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'red'</span>,s<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">300</span>)</span>
<span id="cb56-17"></span>
<span id="cb56-18">title_r1 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"h0 mean=</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>np<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>array(h0)<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>mean()<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:.4f}</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\n</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span></span>
<span id="cb56-19">title_r2 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"h1 value=</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>x<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:.4f}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span></span>
<span id="cb56-20"></span>
<span id="cb56-21">ax.set_title(title_r1 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> title_r2)</span>
<span id="cb56-22">ax.legend(loc <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'upper left'</span>) </span>
<span id="cb56-23">plt.show()</span></code></pre></div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://isaac-flath.tech/posts/Statistics/BasicTesting_files/figure-html/cell-45-output-1.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
</div>
<div id="35cff325" class="cell">
<div class="sourceCode cell-code" id="cb57" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb57-1">p_value <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> (np.array(h0)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span>x).<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">sum</span>()<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span>runs</span>
<span id="cb57-2"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(p_value)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>0.685</code></pre>
</div>
</div>
<p>Oh man, suddenly our model failed the test on the test set after it passed on the validation set. I think it’s helpful to keep in mind this is not a “bad” result. Testing is designed to catch errors and it did - it prevented us from deploying a bad model into production and betting real dollars on it.</p>
<p>If a test never caught errors, there’d be no point in performing the test. We do this step BECAUSE it catches things like this.</p>
</section>
<section id="homework-for-further-learning" class="level2" data-number="1.6">
<h2 data-number="1.6" class="anchored" data-anchor-id="homework-for-further-learning"><span class="header-section-number">1.6</span> Homework for Further Learning</h2>
<p>Entry-Level:</p>
<ol type="1">
<li>Test different parameters of the model in the post. What is your best model on the validation set? Ho does it perform on our test set?</li>
<li>Modify model to only place “Buy” order and not “Short” orders. How does this effect return?</li>
</ol>
<p>Mid-Level:</p>
<ol type="1">
<li>Test the other models in post 1 and create a blog post or write up of your findings</li>
<li>Find something that could have been done differently with one of the models. Change and test it and create a blog post of your findings.</li>
<li>Create an ensemble of multiple momentum models and measure the performance. Create a blog post with findings.</li>
</ol>
<p>Senior-Level:</p>
<ol type="1">
<li>Find another type of data that momentum can be applied to, and create a model to use that as a signal. For example, maybe momentum of job postings listed by the company could be a signal of stock performance. You should:
<ul>
<li>Create train/valid/test split</li>
<li>Verify data cleanliness and highlight any potential concerns for incorrectness or biases</li>
<li>Explain why you are choosing the model you did and why you think it’s a good thing to test</li>
<li>Create the model and test various configurations on the validation set</li>
<li>Test the best one on the test set</li>
<li>Write a blog post on what you did, why, choices you made along the way, future research that could be done on this data, and whether you think this could be a productive area for a trading firm to look at more.</li>
</ul></li>
</ol>


</section>
</section>

 ]]></description>
  <category>Time Series</category>
  <category>Testing</category>
  <guid>https://isaac-flath.tech/posts/Statistics/BasicTesting.html</guid>
  <pubDate>Fri, 30 Sep 2022 04:00:00 GMT</pubDate>
  <media:content url="https://isaac-flath.tech/posts/_TopicImages/TimeSeries.jpg" medium="image" type="image/jpeg"/>
</item>
<item>
  <title>Bootstrapping</title>
  <dc:creator>Isaac Flath</dc:creator>
  <link>https://isaac-flath.tech/posts/APL/BasicStats.html</link>
  <description><![CDATA[ 





<section id="samplingbootstrapping" class="level1" data-number="1">
<h1 data-number="1"><span class="header-section-number">1</span> Sampling/Bootstrapping</h1>
<p>This post shows how to calculate statistics in the way I believe should be the default for data scientists, bootstrapping. If you are not familiar with this approach and think it sounds intriguing, <a href="https://www.lock5stat.com/">check out this page</a> to find a great book to get a fantastic start on bootstrapping and practical statistics.</p>
<div class="callout callout-style-default callout-note callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Note
</div>
</div>
<div class="callout-body-container callout-body">
<p>The quality and simplicity of the APL code in this post was improved thanks to the kind feedback provided by rak1507. It’s awesome to have experienced community members like rak1507 that are willing to read through material written by people newer to array programming and offer feedback in a supportive way.</p>
</div>
</div>
<section id="why-bootstrapping" class="level2" data-number="1.1">
<h2 data-number="1.1" class="anchored" data-anchor-id="why-bootstrapping"><span class="header-section-number">1.1</span> Why Bootstrapping</h2>
<p>Because this opinions seems to put me in the minority of data scientists I am writing a short piece on why bootstrapping here.</p>
<p>In classical statistics, very clever algebraic formulas are used to approximate a sampling distribution, and that approximation can be used to calculate a p-value or a confidence interval or other statistics. These formulas rely on assumptions about the data and do not work if those baked in assumptions are not true. In other words they are really shortcuts to calculating an answer that work in specific situations.</p>
<p>In modern days, we do not need to approximate a sampling distribution using algebra. We can do something much more elementary, more powerful, and more flexible. Thanks to modern computers, we can just sample our data repeatedly to create an actual sampling distribution and calculate based off of that. You get the same answer. So why do I advocate for a bootstrapping first approach?</p>
<ul>
<li>It is simpler and more intuitive. This means it is far easier to craft custom tests and statistics based on whatever you want and reason about what things are.</li>
<li>Bootstrapping assumes nothing other than you have data. Classical statistical formulas are shortcuts that are enabled with baked in assumptions about the data. This means the same boostrapping approach works in basically all situations, where classical statistical formulas only apply in the particular situations they were designed for.</li>
</ul>
<p>For this reason I believe it should be the default and you can change to computational shortcuts in the situations where it makes sense (ie you are very confident you understand assumptions, confident they are true in your problem, and the amount of data makes it non-trivial to bootstrap).</p>
<div class="callout callout-style-default callout-note callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Note
</div>
</div>
<div class="callout-body-container callout-body">
<p>Much of this next bit is heavily inspired by <a href="https://www.lock5stat.com/Lock5Overview.pdf">Overview of Statistics: UnLocking the Power of Data By Lock, Lock, Lock, Lock, and Lock Published by Wiley (2012)</a>. I have summarized key points that I think are relevant to what I want to communicate. For example, the quotes I am using are quotes I originally saw in their article.</p>
</div>
</div>
<p>Many of the top statisticians have known bootstrapping is a more elementary but more flexible approach for longer than the approach was computationally feasible. For example, in 1936 Sir R.A. Fisher (who created the foundations of statistical inference) spoke about using this bootstrapping approach:</p>
<blockquote class="blockquote">
<p>Actually, the statistician does not carry out this very simple and very tedious process, but his conclusions have no justification beyond the fact that they agree with those which could have been arrived at by this elementary method.</p>
</blockquote>
<p>While these methods were tedious in 1936, they are trivial thanks to modern computers. We no longer have to do clever algebraic tricks to approximate a sampling distribution - we can just create a sampling distribution, as George Cobb pointed out in the journal <em>Technology Innovations in Statistical Education</em>.</p>
<blockquote class="blockquote">
<p>What we teach is largely the technical machinery of numerical approximations based on the normal distribution and its many subsidiary cogs. This machinery was once necessary, because the conceptually simpler alternative based on permutations was computationally beyond our reach. Before computers statisticians had no choice. These days we have no excuse.</p>
</blockquote>
</section>
<section id="why-apl" class="level2" data-number="1.2">
<h2 data-number="1.2" class="anchored" data-anchor-id="why-apl"><span class="header-section-number">1.2</span> Why APL</h2>
<ul>
<li>Because it’s cool</li>
<li>Because most modeling now-a-days is done via array programming and learning, and APL is a fantastic way to get better at that</li>
<li>Because it’s a more consistent math noting</li>
</ul>
</section>
</section>
<section id="sampling-distribution" class="level1" data-number="2">
<h1 data-number="2"><span class="header-section-number">2</span> Sampling Distribution</h1>
<p>A sampling distribution is a distribution of samples. Let’s talk about what that means.</p>
<p>First, a <strong>sample</strong> is a subset of our data. <code>[1, 0, 2, 1]</code> is a sample of <code>[0, 1, 2, 3]</code>. A few things about samples: + We will sample by taking a random selection of values from our data. + We are sampling with replacement, meaning we can pick the same data point multiple times.</p>
<p>Next, a <strong>distribution</strong> is mostly just a bunch of data points. In our case we are going to have a bunch of samples.</p>
<p>So we need a way to create a sample, and then we need to do that a bunch of times. Let’s get started.</p>
<div id="61e2891f" class="cell">
<pre class="apl cell-code"><code>]box on -style=max</code></pre>
<div class="cell-output cell-output-display">
<pre class="language-APL">┌→────────────────┐
│Was ON -style=max│
└─────────────────┘
</pre>
</div>
</div>
<section id="create-1-sample" class="level2" data-number="2.1">
<h2 data-number="2.1" class="anchored" data-anchor-id="create-1-sample"><span class="header-section-number">2.1</span> Create 1 Sample</h2>
<p>Let’s start with creating a sample</p>
<ul>
<li>Create some data for us to sample</li>
<li>Get 5 random numbers between 1 and 10 (no duplicate numbers)</li>
</ul>
<div id="9019e410" class="cell">
<pre class="apl cell-code"><code>⎕←V ← 5?10</code></pre>
<div class="cell-output cell-output-display">
<pre class="language-APL">┌→─────────┐
│4 3 10 1 5│
└~─────────┘
</pre>
</div>
</div>
<p>Next we need to get a random sample of indexes from our data <code>V</code>. We can do that in 3 steps: 1. Get the total number of elements in our data array with <code>≢V</code> (tally the Vector) 1. Create an array of the size of the sample we want and fill it with <code>≢V</code> using <code>10⍴≢V</code>. Create an array of dimension 10 with containing the tally of the vector. APL will broadcase to make all elements equal to <code>≢V</code> automatically. 1. <code>?</code> will roll a die for each element between 1 and the value of the element. This gives us random index locations for each sample we want.</p>
<p>Put that all together and we have code that:</p>
<ul>
<li>Get random sample of indexes</li>
<li>Get 10 random numbers between 1 and ≢V (duplicates allowed)</li>
</ul>
<div id="19a37250" class="cell">
<pre class="apl cell-code"><code>⎕←S←?10⍴≢V</code></pre>
<div class="cell-output cell-output-display">
<pre class="language-APL">┌→──────────────────┐
│3 2 2 2 2 5 1 2 4 2│
└~──────────────────┘
</pre>
</div>
</div>
<p>Since that created random index locations, we can look those indexes up in our original vector <code>V</code> to get our random sample.</p>
<div id="6f45f38d" class="cell">
<pre class="apl cell-code"><code>V[S]</code></pre>
<div class="cell-output cell-output-display">
<pre class="language-APL">┌→───────────────────┐
│10 3 3 3 3 5 4 3 1 3│
└~───────────────────┘
</pre>
</div>
</div>
<p>If we put that together we get a nice compact way of drawing a sample.</p>
<div id="be19cd56" class="cell">
<pre class="apl cell-code"><code>V[?10 ⍴ ≢V]</code></pre>
<div class="cell-output cell-output-display">
<pre class="language-APL">┌→───────────────────┐
│3 10 3 3 1 4 3 4 3 3│
└~───────────────────┘
</pre>
</div>
</div>
</section>
<section id="create-sampling-distribution" class="level2" data-number="2.2">
<h2 data-number="2.2" class="anchored" data-anchor-id="create-sampling-distribution"><span class="header-section-number">2.2</span> Create sampling distribution</h2>
<p>We drew a sample, but really what we want to do is draw a whole bunch of samples. All we have to do is create a matrix of indices instead of a vector and the exact same approach works.</p>
<p>This is the same as above, except instead of <code>10 ⍴</code> to create an array of shape 10, we use <code>5 10 ⍴</code> to create an array of shape 5 by 10.</p>
<p>For convenience I store the shapes in a variable for later use.</p>
<div id="482f4928" class="cell">
<pre class="apl cell-code"><code>V[?(n←5) (ss←10) ⍴ ≢V]</code></pre>
<div class="cell-output cell-output-display">
<pre class="language-APL">┌→──────────────────────────┐
↓ 4 4  3  4  1  5  4 3  3 10│
│ 1 3 10  5  3  4 10 1  4 10│
│ 5 1 10 10  5  3  3 4  1  4│
│10 5 10  1 10  3  1 4 10  1│
│10 5  5  5  1 10  3 3  1 10│
└~──────────────────────────┘
</pre>
</div>
</div>
</section>
</section>
<section id="calculate-statistics" class="level1" data-number="3">
<h1 data-number="3"><span class="header-section-number">3</span> Calculate statistics</h1>
<p>Now that we know how to calculate a sampling distribution we can calculate some statistics. I will start with confidence intervals, then move into p values.</p>
<section id="confidence-intervals" class="level2" data-number="3.1">
<h2 data-number="3.1" class="anchored" data-anchor-id="confidence-intervals"><span class="header-section-number">3.1</span> Confidence Intervals</h2>
<p>Lets do a bigger sample and calculate our confidence interval using 10000 random numbers between 1 and 100.</p>
<div id="1033b2bb" class="cell">
<pre class="apl cell-code"><code>data ← ?10000/100 

10↑data ⍝ look at first 10 values</code></pre>
<div class="cell-output cell-output-display">
<pre class="language-APL">┌→───────────────────────────┐
│50 3 15 43 93 60 96 29 71 58│
└~───────────────────────────┘
</pre>
</div>
</div>
<p>Next we can calculate a sampling distribution and look a a few of them. We use the code from before but with 1000 pulls.</p>
<div id="91c96831" class="cell">
<pre class="apl cell-code"><code>sampling_distribution←data[? (n←1000) (ss←10) ⍴ ≢ data]
5↑sampling_distribution</code></pre>
<div class="cell-output cell-output-display">
<pre class="language-APL">┌→─────────────────────────────┐
↓20 56 92 100 34 89 28 92 10 21│
│34 95 89  69 35 81 25 25 80 87│
│77 68 32  77 57 20 10 20 21 95│
│37 73 19  79 11 88 13  1 90 68│
│70 42 10  74 62 34 82 17  3 19│
└~─────────────────────────────┘
</pre>
</div>
</div>
<p>We want to do a confidence interval on the mean so we need to calculate the mean of each of these samples.</p>
<ul>
<li><code>+/</code> Row-wise sum (trailing axis)</li>
<li><code>ss÷⍨</code> divides each element by ss (ss defined when creating sampling distribution)</li>
</ul>
<div id="e9a7f7b9" class="cell">
<pre class="apl cell-code"><code>sample_means ← ss÷⍨+/ sampling_distribution
8↑sample_means</code></pre>
<div class="cell-output cell-output-display">
<pre class="language-APL">┌→────────────────────────────────────┐
│54.2 62 47.7 47.9 41.3 63.5 50.7 44.3│
└~────────────────────────────────────┘
</pre>
</div>
</div>
<p>Now we calculate at 90% confidence interval on our sample mean. That means we are 90% confident our mean will land in the given interval range. This is easy to do because we have calculated the mean of a good sampling distribution so we just need to cut off the top and bottom 5% of values and 90% of the values landed in that range.</p>
<ul>
<li>⍋ sorts ascending, then cut off first 50 and take the first 900 of that</li>
</ul>
<div id="2b2b0607" class="cell">
<pre class="apl cell-code"><code>order90 ← 900↑50↓⍋sample_means</code></pre>
</div>
<p>Get min and max of middle 90% of sample means, which is our 90% confidence interval. Because our data is sorted we can just get the first and last value.</p>
<div id="c1f9731e" class="cell">
<pre class="apl cell-code"><code>sample_means[⊣/order90]
sample_means[⊢/order90]</code></pre>
<div class="cell-output cell-output-display">
<pre class="language-APL">    
36.2
    
</pre>
</div>
<div class="cell-output cell-output-display">
<pre class="language-APL">    
65.5
    
</pre>
</div>
</div>
<p>We know we are 90 percent confident that a mean based on a sample size of 10 will land in that range because we did that and found that to be true.</p>
</section>
<section id="p-values" class="level2" data-number="3.2">
<h2 data-number="3.2" class="anchored" data-anchor-id="p-values"><span class="header-section-number">3.2</span> P values</h2>
<p>Let’s say we have 2 sets of data and we want to know whether some statistics are different between them. We have 10,000 samples of our original data, and we ran an experiment and got 100 datapoints with our new process. We want to calculate a p value to see if it supports our hypothesis that it had a statistically significant impact.</p>
<div class="callout callout-style-default callout-note callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Note
</div>
</div>
<div class="callout-body-container callout-body">
<p>Statistically significant impact does not necessarily mean practically significant. This test is doing the basic (are these 2 means different), but often that isn’t really that helpful of a question. Often we want to ask “are these 2 means different by at least X”. After reviewing the simple examples think through how you might be able to design that test via bootstrapping!</p>
</div>
</div>
<section id="p-value-on-equal-means" class="level3" data-number="3.2.1">
<h3 data-number="3.2.1" class="anchored" data-anchor-id="p-value-on-equal-means"><span class="header-section-number">3.2.1</span> P value on equal means</h3>
<div id="044a5461" class="cell">
<pre class="apl cell-code"><code>baseline ← 1-⍨2×⍨?10000/0
experiment ← 0.5-⍨?100/0</code></pre>
</div>
<p>These should have roughly the same means so we should get a large p value and show the difference is not statistically significant</p>
<p>Let’s run the test and see what we get. First let’s get our statistic from our experiment (mean).</p>
<div id="6bd48af6" class="cell">
<pre class="apl cell-code"><code>⎕←experiment_mean ← (+/experiment) ÷ ≢experiment</code></pre>
<div class="cell-output cell-output-display">
<pre class="language-APL">             
0.02131968282
             
</pre>
</div>
</div>
<p>Now let’s create our sampling distribution on our baseline.</p>
<div id="6d16dd1a" class="cell">
<pre class="apl cell-code"><code>sampling_distribution←baseline[? (n←1000) (ss←10) ⍴ ≢ baseline]</code></pre>
</div>
<p>Calculate the means of each.</p>
<div id="ea53d0ef" class="cell">
<pre class="apl cell-code"><code>sampling_means ← ss ÷⍨ +/sampling_distribution</code></pre>
</div>
<p>We then calculate a p value by seeing what percentage of sample means our experiment mean is more extreme than. We can check this on both ends of the distribution and we would take the smaller one normally.</p>
<div id="5854f526" class="cell">
<pre class="apl cell-code"><code>n ÷⍨ +/ experiment_mean&gt;sampling_means
n ÷⍨ +/ experiment_mean&lt;sampling_means</code></pre>
<div class="cell-output cell-output-display">
<pre class="language-APL">     
0.545
     
</pre>
</div>
<div class="cell-output cell-output-display">
<pre class="language-APL">     
0.455
     
</pre>
</div>
</div>
</section>
<section id="p-value-on-different-means" class="level3" data-number="3.2.2">
<h3 data-number="3.2.2" class="anchored" data-anchor-id="p-value-on-different-means"><span class="header-section-number">3.2.2</span> P value on different means</h3>
<div id="926aa83d" class="cell">
<pre class="apl cell-code"><code>baseline ← ?10000/0
experiment ← 0.2-⍨?100/0</code></pre>
</div>
<p>These should have different means so we should get a large p value and show the different is not practically significant</p>
<p>Let’s run the test and see what we get. First let’s get our statistic from our experiment (mean).</p>
<div id="c71600ea" class="cell">
<pre class="apl cell-code"><code>⎕←experiment_mean ← (+/experiment) ÷ ≢experiment</code></pre>
<div class="cell-output cell-output-display">
<pre class="language-APL">           
0.302065664
           
</pre>
</div>
</div>
<p>Now let’s create our sampling distribution on our baseline.</p>
<div id="28ad2ca9" class="cell">
<pre class="apl cell-code"><code>sampling_distribution← baseline[? (n←1000) (ss←10) ⍴ ≢ baseline]</code></pre>
</div>
<div id="0b30f6ed" class="cell">
<pre class="apl cell-code"><code>sampling_means ← ss ÷⍨ +/sampling_distribution</code></pre>
</div>
<p>We then calculate a p value by seeing what percentage of sample means our experiment mean is more extreme than. We can check this on both ends of the distribution, but we would take the smaller one. We can see our p value is quite small - it successfully detected that we likely have a different mean.</p>
<div id="cc1cef9e" class="cell">
<pre class="apl cell-code"><code>n ÷⍨ +/ sampling_means &gt; experiment_mean
n ÷⍨ +/ sampling_means &lt; experiment_mean</code></pre>
<div class="cell-output cell-output-display">
<pre class="language-APL">     
0.993
     
</pre>
</div>
<div class="cell-output cell-output-display">
<pre class="language-APL">     
0.007
     
</pre>
</div>
</div>


</section>
</section>
</section>

 ]]></description>
  <category>APL</category>
  <category>Data Exploration</category>
  <category>Testing</category>
  <guid>https://isaac-flath.tech/posts/APL/BasicStats.html</guid>
  <pubDate>Tue, 20 Sep 2022 04:00:00 GMT</pubDate>
  <media:content url="https://isaac-flath.tech/posts/_TopicImages/bootstrap.jpeg" medium="image" type="image/jpeg"/>
</item>
<item>
  <title>Simple Time Series (Stock Prices)</title>
  <dc:creator>Isaac Flath</dc:creator>
  <link>https://isaac-flath.tech/posts/TimeSeries/SimpleTimeSeries.html</link>
  <description><![CDATA[ 





<section id="simple-time-series-stock-prices" class="level1" data-number="1">
<h1 data-number="1"><span class="header-section-number">1</span> Simple Time Series (Stock Prices)</h1>
</section>
<section id="setup" class="level1" data-number="2">
<h1 data-number="2"><span class="header-section-number">2</span> Setup</h1>
<div id="cell-3" class="cell">
<details class="code-fold">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb1-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> fastcore.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">all</span> <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span></span>
<span id="cb1-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> pandas <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> pd</span>
<span id="cb1-3"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> numpy <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> np</span>
<span id="cb1-4"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> matplotlib.pyplot <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> plt</span>
<span id="cb1-5"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> sklearn.linear_model <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> LinearRegression</span>
<span id="cb1-6"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> datetime <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> timedelta</span>
<span id="cb1-7"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> utils <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> view_source_code</span></code></pre></div>
</details>
</div>
<div id="cell-4" class="cell">
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb2-1">path <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Path(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'../data'</span>)</span></code></pre></div>
</div>
</section>
<section id="overview" class="level1" data-number="3">
<h1 data-number="3"><span class="header-section-number">3</span> Overview</h1>
<p>In this post we will use recent stock price history to make buy and sell decisions. This is intended to be a first step in exploring quant trading. Because we believe in learning by doing, we will be building trading strategies!</p>
<p>Before diving into the technical bits, it is <em>always</em> a good idea to take the time to think about things at a high level and why your idea might work. We can generate ideas <em>much</em> faster than we can code and test them, so we need to use intuition and experience to help guide us in which ideas we want to prioritize. Intuition is important and where I start - but intuition is not reliable enough on it’s own - we <strong>must</strong> then turn intuition into code with rigorous testing before we can decide whether to implement the strategy. .</p>
</section>
<section id="intuition" class="level1" data-number="4">
<h1 data-number="4"><span class="header-section-number">4</span> Intuition</h1>
<section id="belief" class="level2" data-number="4.1">
<h2 data-number="4.1" class="anchored" data-anchor-id="belief"><span class="header-section-number">4.1</span> Belief</h2>
<p>I believe how a company is doing over the last month can be used to predict how how well it will do in the future. This isn’t much of a leap, but let’s think about a few reasons as to why this may be true.</p>
<ul>
<li><p><strong>Available Capital:</strong> If a company is doing well, it typically means they have more profit. More profit means more that can be reinvested. More reinvestment can mean faster growth.</p></li>
<li><p><strong>Economies of Scale:</strong> Often the more successful a company is the more they can drive down cost in some areas. For example, General Mills can buy sugar at a lower price than a small business due to their buying power. As buying power increase, they can leverage that to drive down costs.</p></li>
<li><p><strong>Brand Recognition:</strong> The more successful a business is and the larger it grows, the more brand recognition it has. The more brand recognition it has the more it can leverage it’s brand to grow.</p></li>
</ul>
</section>
<section id="hypothesis" class="level2" data-number="4.2">
<h2 data-number="4.2" class="anchored" data-anchor-id="hypothesis"><span class="header-section-number">4.2</span> Hypothesis</h2>
<p>The <em>hypothesis</em> for this post is that recent stock performance can be used on its own to predict future stock performance. Regardless of how much we believe that to be true, we should not trade based on this belief until we have evidence. This post will explore several options for using this hypothesis to make trades.</p>
<p><a href="../../posts/Statistics/BasicTesting.html">The next post</a> will give a foundation in testing and show how we can test and evaluate how well these approaches perform and determine if these are ideas worth keeping.</p>
</section>
</section>
<section id="the-data" class="level1" data-number="5">
<h1 data-number="5"><span class="header-section-number">5</span> The Data</h1>
<section id="load-data" class="level2" data-number="5.1">
<h2 data-number="5.1" class="anchored" data-anchor-id="load-data"><span class="header-section-number">5.1</span> Load data</h2>
<p>First let’s take a look at the data we will be using and talk a bit about it.</p>
<div id="cell-15" class="cell">
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb3-1">raw <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pd.read_csv(path<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'eod-quotemedia.csv'</span>,parse_dates<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'date'</span>])</span>
<span id="cb3-2">raw.head(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>)</span></code></pre></div>
<div class="cell-output cell-output-display">
<div>


<table class="dataframe caption-top table table-sm table-striped small" data-quarto-postprocess="true" data-border="1">
<thead>
<tr class="header">
<th data-quarto-table-cell-role="th"></th>
<th data-quarto-table-cell-role="th">date</th>
<th data-quarto-table-cell-role="th">ticker</th>
<th data-quarto-table-cell-role="th">adj_close</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td data-quarto-table-cell-role="th">0</td>
<td>2013-07-01</td>
<td>A</td>
<td>29.994186</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">1</td>
<td>2013-07-02</td>
<td>A</td>
<td>29.650137</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">2</td>
<td>2013-07-03</td>
<td>A</td>
<td>29.705185</td>
</tr>
</tbody>
</table>

</div>
</div>
</div>
<div id="cell-16" class="cell">
<div class="sourceCode cell-code" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb4-1">L(<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>raw.ticker.unique())</span></code></pre></div>
<div class="cell-output cell-output-display">
<pre><code>(#495) ['A','AAL','AAP','AAPL','ABBV','ABC','ABT','ACN','ADBE','ADI'...]</code></pre>
</div>
</div>
<p>We can see that for each day we have a ticker.</p>
<div class="callout callout-style-default callout-tip callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Tip
</div>
</div>
<div class="callout-body-container callout-body">
<p>A ticker is a symbol associated with a company. For example Apple has the ticker <code>AAPL</code>. To buy shares in Apple you would buy <code>AAPL</code>.</p>
</div>
</div>
<p>For each of these day|ticker combinations we have an <code>adj_close</code>, or adjusted close price. After every transaction, the price of a stock changes slightly. The <code>adjusted close price</code> is the last stock price of the day. While this is not as detailed as having the price at a more granular level (second, minute, hour, etc.), called <code>tick</code> data, we can use daily close price to test many types of strategies.</p>
<p>::{note} This is the stock price for the ticker. <code>adjusted</code> means that the prices have been adjusted to account for various actions, such as stock splits (more discussion on this later). <code>close</code> means that it is the price at close of market.</p>
<p>A good first step after getting tabular data is to use pandas’ describe method. As we do this we see a few good pieces of information to keep in mind: + Overall size of dataset - 409K rows + Very big range in values (~1 - ~1K), which most of them before $100</p>
<div id="cell-20" class="cell">
<div class="sourceCode cell-code" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb6-1">raw.describe().transpose()</span></code></pre></div>
<div class="cell-output cell-output-display">
<div>


<table class="dataframe caption-top table table-sm table-striped small" data-quarto-postprocess="true" data-border="1">
<thead>
<tr class="header">
<th data-quarto-table-cell-role="th"></th>
<th data-quarto-table-cell-role="th">count</th>
<th data-quarto-table-cell-role="th">mean</th>
<th data-quarto-table-cell-role="th">std</th>
<th data-quarto-table-cell-role="th">min</th>
<th data-quarto-table-cell-role="th">25%</th>
<th data-quarto-table-cell-role="th">50%</th>
<th data-quarto-table-cell-role="th">75%</th>
<th data-quarto-table-cell-role="th">max</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td data-quarto-table-cell-role="th">adj_close</td>
<td>490737.0</td>
<td>75.100472</td>
<td>75.438804</td>
<td>1.59</td>
<td>36.782424</td>
<td>57.499593</td>
<td>87.4</td>
<td>1011.34</td>
</tr>
</tbody>
</table>

</div>
</div>
</div>
</section>
<section id="null-values" class="level2" data-number="5.2">
<h2 data-number="5.2" class="anchored" data-anchor-id="null-values"><span class="header-section-number">5.2</span> Null Values</h2>
<p>Let’s take a look and make sure we don’t have any null values to handle. This is one of those things you need to do with every dataset. This is also a great opportunity to show how you can add in simple tests into your code as you go using an <code>assert</code> statement, which will help you catch issues as you iterate and change things.</p>
<div id="cell-23" class="cell">
<div class="sourceCode cell-code" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb7-1"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">assert</span> np.array([o<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> o <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> raw.isnull().<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">sum</span>()]).<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">all</span>() <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span></span></code></pre></div>
</div>
</section>
<section id="survivorship-bias" class="level2" data-number="5.3">
<h2 data-number="5.3" class="anchored" data-anchor-id="survivorship-bias"><span class="header-section-number">5.3</span> Survivorship bias</h2>
<p>We also want to take a quick look at the non-numeric columns to get an idea of what time frame we have and how many tickers. This is often known from the dataset, but it is good practice to look at the dataset and ensure that your understanding of the dataset aligns with what you see in the data.</p>
<div id="cell-26" class="cell">
<div class="sourceCode cell-code" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb8-1"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"Date column contains dates from </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>raw<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>date<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">min</span>()<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>date()<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;"> to </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>raw<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>date<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">max</span>()<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>date()<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Date column contains dates from 2013-07-01 to 2017-06-30</code></pre>
</div>
</div>
<p>Let’s see if all tickers in the dataset have the same start and end date.</p>
<div id="cell-28" class="cell">
<div class="sourceCode cell-code" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb10-1">ticker_cnt <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(raw.ticker.unique())</span>
<span id="cb10-2"></span>
<span id="cb10-3">_min <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> raw[[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'ticker'</span>,<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'date'</span>]].groupby(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'ticker'</span>).<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">min</span>()</span>
<span id="cb10-4">_min <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> _min[_min.date <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'2013-07-01'</span>].count().date</span>
<span id="cb10-5"></span>
<span id="cb10-6">_max <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> raw[[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'ticker'</span>,<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'date'</span>]].groupby(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'ticker'</span>).<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">max</span>()</span>
<span id="cb10-7">_max <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> _max[_max.date <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'2017-06-30'</span>].count().date</span>
<span id="cb10-8"></span>
<span id="cb10-9"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f'''Out of </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>ticker_cnt<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;"> tickers:</span></span>
<span id="cb10-10"><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">  + 20 do do not start on 2013-07-01</span></span>
<span id="cb10-11"><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">  + 0 do not have an entry for 2017-06-30'''</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Out of 495 tickers:
  + 20 do do not start on 2013-07-01
  + 0 do not have an entry for 2017-06-30</code></pre>
</div>
</div>
<p>Good thing we checked! Let’s think through what these two data points mean:</p>
<ul>
<li><strong>20 do do not start on 2013-07-01:</strong> This makes sense because some of the companies may not have been founded or fit our criteria until after the start date of the dataset. Maybe they were private companies that went public, or maybe they grew to a large enough size to be part of our universe.</li>
<li><strong>0 do not have an entry for 2017-06-30:</strong> While it’s not definitive proof of an issue, it is cause for concern. This dataset may have a survivorship bias built in. Let’s talk about what survivorship bias is and why this could be a problem.</li>
</ul>
<p>In our dataset we see that every ticker has a close price on the last day of the dataset. This means that all of the companies are active at the end of our dataset. What this means is that either:</p>
<ul>
<li>No company went out of business or failed in our universe between our July 2013 and June 2017 dates</li>
<li>Some companies did fail during our universe time period and our dataset does not reflect that.</li>
</ul>
<p>While either are possible, the second option is a common problem. Let’s talk about why failed companies not being a part of our universe is a problem.</p>
<p>Let’s say I look at the S&amp;P 500 companies in 2022 and build a dataset of their stock prices for 2015 - 2022. We want to tests how well a strategy would have performed in that time range. Any trade has many outcomes for example:</p>
<ol type="1">
<li>You could buy a stock and then the company goes out of business and you lose lots of money</li>
<li>You could buy a stock and then the price goes up and you profit</li>
<li>You could buy a stock and then the price goes down and you lose money</li>
</ol>
<p>The problem is that option #1 is <strong>impossible</strong> in this dataset. We know none of the business went out of business between 2015 and 2022 because they were all in the S&amp;P 500 in 2022. Option #1 is more likely than it should be because we already know the companies on the list are among the largest companies in 2022, so regardless of what company we pick we know it ends up a large company. Option #3 is less likely than it should be because if a company shrunk in size to the point it’s not in the S&amp;P 500 in 2022 it’s not even in the dataset. Our strategies may perform extremely well on our dataset, but when we run it on real data with real money we could be in for a shock!</p>
<p>Bottom line is we need <strong>point in time</strong> data, or rather data for a given date should only be as accurate as you could have known on that date.</p>
<p>When we see all tickers in the universe have a stock price on the last day, it’s important to verify that this did not happen in your dataset. When we talk about testing later, we will talk about how we can test to ensure we have accurate results.</p>
</section>
<section id="reformat" class="level2" data-number="5.4">
<h2 data-number="5.4" class="anchored" data-anchor-id="reformat"><span class="header-section-number">5.4</span> Reformat</h2>
<p>Now that we have an basic idea of what’s in our data we can reformat it to a format that will be easier to use for analysis. For what we are doing we will be applying things based on ticker, so let’s give each ticker it’s own column.</p>
<div id="cell-33" class="cell">
<div class="sourceCode cell-code" id="cb12" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb12-1">df <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> raw.pivot(index<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'date'</span>, columns<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'ticker'</span>,values<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'adj_close'</span>)</span>
<span id="cb12-2">df.iloc[:,:<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>].head(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>)</span></code></pre></div>
<div class="cell-output cell-output-display">
<div>


<table class="dataframe caption-top table table-sm table-striped small" data-quarto-postprocess="true" data-border="1">
<thead>
<tr class="header">
<th data-quarto-table-cell-role="th">ticker</th>
<th data-quarto-table-cell-role="th">A</th>
<th data-quarto-table-cell-role="th">AAL</th>
<th data-quarto-table-cell-role="th">AAP</th>
<th data-quarto-table-cell-role="th">AAPL</th>
<th data-quarto-table-cell-role="th">ABBV</th>
</tr>
<tr class="odd">
<th data-quarto-table-cell-role="th">date</th>
<th data-quarto-table-cell-role="th"></th>
<th data-quarto-table-cell-role="th"></th>
<th data-quarto-table-cell-role="th"></th>
<th data-quarto-table-cell-role="th"></th>
<th data-quarto-table-cell-role="th"></th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td data-quarto-table-cell-role="th">2013-07-01</td>
<td>29.994186</td>
<td>16.176093</td>
<td>81.138217</td>
<td>53.109173</td>
<td>34.924478</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">2013-07-02</td>
<td>29.650137</td>
<td>15.819834</td>
<td>80.722073</td>
<td>54.312247</td>
<td>35.428076</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">2013-07-03</td>
<td>29.705185</td>
<td>16.127950</td>
<td>81.237299</td>
<td>54.612043</td>
<td>35.444862</td>
</tr>
</tbody>
</table>

</div>
</div>
</div>
<p>We can use the same describe as above to see statistics about each ticker.</p>
<div id="cell-35" class="cell">
<div class="sourceCode cell-code" id="cb13" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb13-1">df.iloc[:,:<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>].describe()</span></code></pre></div>
<div class="cell-output cell-output-display">
<div>


<table class="dataframe caption-top table table-sm table-striped small" data-quarto-postprocess="true" data-border="1">
<thead>
<tr class="header">
<th data-quarto-table-cell-role="th">ticker</th>
<th data-quarto-table-cell-role="th">A</th>
<th data-quarto-table-cell-role="th">AAL</th>
<th data-quarto-table-cell-role="th">AAP</th>
<th data-quarto-table-cell-role="th">AAPL</th>
<th data-quarto-table-cell-role="th">ABBV</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td data-quarto-table-cell-role="th">count</td>
<td>1009.000000</td>
<td>1009.000000</td>
<td>1009.000000</td>
<td>1009.000000</td>
<td>1009.000000</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">mean</td>
<td>40.983757</td>
<td>37.811501</td>
<td>141.576280</td>
<td>100.360320</td>
<td>52.977953</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">std</td>
<td>5.850163</td>
<td>8.816410</td>
<td>26.260390</td>
<td>22.660593</td>
<td>7.897264</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">min</td>
<td>29.650137</td>
<td>14.770314</td>
<td>78.393647</td>
<td>53.109173</td>
<td>34.924478</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">25%</td>
<td>37.656517</td>
<td>34.383874</td>
<td>125.561609</td>
<td>87.186576</td>
<td>46.981317</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">50%</td>
<td>39.700762</td>
<td>39.218491</td>
<td>147.450711</td>
<td>102.884811</td>
<td>53.983957</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">75%</td>
<td>43.944859</td>
<td>43.681272</td>
<td>159.019446</td>
<td>114.257784</td>
<td>59.212432</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">max</td>
<td>60.131015</td>
<td>54.071539</td>
<td>199.374304</td>
<td>153.694280</td>
<td>70.780784</td>
</tr>
</tbody>
</table>

</div>
</div>
</div>
</section>
<section id="validation-set" class="level2" data-number="5.5">
<h2 data-number="5.5" class="anchored" data-anchor-id="validation-set"><span class="header-section-number">5.5</span> Validation Set</h2>
<p>We are going to split our data into 2 groups. This way we have a secondary unseen dataset to test my strategies. I want to develop models on one set of data but evaluate them on different data. This may not seem important but it is absolutely crucial and perhaps the most important concept. The more complex your model and analysis the more important this becomes. This will be discussed in much greater detail in [the next post]((../Statistics/BasicTesting.ipynb), but for now just take my word for it.</p>
<p>With time series you generally want your validation set to be the most recent data. This reflects reality best; creating a model on data with the intent to use it on future data.</p>
<div id="cell-38" class="cell">
<div class="sourceCode cell-code" id="cb14" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb14-1">train <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> df.loc[:pd.Timestamp(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'2017-1-1 01:00:00'</span>)]</span>
<span id="cb14-2">valid <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> df.loc[pd.Timestamp(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'2017-1-1 01:00:00'</span>):]</span></code></pre></div>
</div>
<div id="cell-39" class="cell">
<div class="sourceCode cell-code" id="cb15" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb15-1"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"Train Dates: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>train<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>index<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">min</span>()<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>date()<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;"> thru </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>train<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>index<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">max</span>()<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>date()<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb15-2"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"Valid Dates: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>valid<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>index<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">min</span>()<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>date()<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;"> thru </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>valid<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>index<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">max</span>()<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>date()<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Train Dates: 2013-07-01 thru 2016-12-30
Valid Dates: 2017-01-03 thru 2017-06-30</code></pre>
</div>
</div>
</section>
</section>
<section id="models" class="level1" data-number="6">
<h1 data-number="6"><span class="header-section-number">6</span> Models</h1>
<section id="basic-momentum" class="level2" data-number="6.1">
<h2 data-number="6.1" class="anchored" data-anchor-id="basic-momentum"><span class="header-section-number">6.1</span> Basic Momentum</h2>
<p>As our first model let’s use percent change over recent stock price history. We will take the percent difference between the current stock price and the stock price from a set time in the past. As we think about this approach there are several levers we can pull time find tune our approach:</p>
<ul>
<li><strong>Time Range:</strong> We could use the past 5 days, or past 30 days, or the past year. How far back should we be comparing?</li>
<li><strong>Threshold:</strong> What threshold do we need to cross before we consider it momentous enough to take an action? Is a 1%, 5%, 10%?</li>
<li><strong>What action?</strong> Is it just buy and sell? Could we use this to short?</li>
<li><strong>When do we close our position</strong> Is it a set time period? Or based on another threshold?</li>
</ul>
<p>We will use 28 days for the time range and 8% for our threshold in this example to demonstrate the concept, but in the testing section we will show how to test different parameters.</p>
<div id="cell-43" class="cell">
<div class="sourceCode cell-code" id="cb17" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb17-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> SimpleTimeSeries <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> get_momentum_actions</span>
<span id="cb17-2">view_source_code(get_momentum_actions)</span></code></pre></div>
<div class="cell-output cell-output-display">

<!--
generated by Pygments <https://pygments.org/>
Copyright 2006-2021 by the Pygments team.
Licensed under the BSD license, see LICENSE for details.
-->


  <title></title>
  <meta http-equiv="content-type" content="text/html; charset=utf-8">
  <style type="text/css">
/*
generated by Pygments <https: pygments.org="">
Copyright 2006-2021 by the Pygments team.
Licensed under the BSD license, see LICENSE for details.
*/
pre { line-height: 125%; }
td.linenos .normal { color: inherit; background-color: transparent; padding-left: 5px; padding-right: 5px; }
span.linenos { color: inherit; background-color: transparent; padding-left: 5px; padding-right: 5px; }
td.linenos .special { color: #000000; background-color: #ffffc0; padding-left: 5px; padding-right: 5px; }
span.linenos.special { color: #000000; background-color: #ffffc0; padding-left: 5px; padding-right: 5px; }
body .hll { background-color: #ffffcc }
body { background: #f8f8f8; }
body .c { color: #008800; font-style: italic } /* Comment */
body .err { border: 1px solid #FF0000 } /* Error */
body .k { color: #AA22FF; font-weight: bold } /* Keyword */
body .o { color: #666666 } /* Operator */
body .ch { color: #008800; font-style: italic } /* Comment.Hashbang */
body .cm { color: #008800; font-style: italic } /* Comment.Multiline */
body .cp { color: #008800 } /* Comment.Preproc */
body .cpf { color: #008800; font-style: italic } /* Comment.PreprocFile */
body .c1 { color: #008800; font-style: italic } /* Comment.Single */
body .cs { color: #008800; font-weight: bold } /* Comment.Special */
body .gd { color: #A00000 } /* Generic.Deleted */
body .ge { font-style: italic } /* Generic.Emph */
body .gr { color: #FF0000 } /* Generic.Error */
body .gh { color: #000080; font-weight: bold } /* Generic.Heading */
body .gi { color: #00A000 } /* Generic.Inserted */
body .go { color: #888888 } /* Generic.Output */
body .gp { color: #000080; font-weight: bold } /* Generic.Prompt */
body .gs { font-weight: bold } /* Generic.Strong */
body .gu { color: #800080; font-weight: bold } /* Generic.Subheading */
body .gt { color: #0044DD } /* Generic.Traceback */
body .kc { color: #AA22FF; font-weight: bold } /* Keyword.Constant */
body .kd { color: #AA22FF; font-weight: bold } /* Keyword.Declaration */
body .kn { color: #AA22FF; font-weight: bold } /* Keyword.Namespace */
body .kp { color: #AA22FF } /* Keyword.Pseudo */
body .kr { color: #AA22FF; font-weight: bold } /* Keyword.Reserved */
body .kt { color: #00BB00; font-weight: bold } /* Keyword.Type */
body .m { color: #666666 } /* Literal.Number */
body .s { color: #BB4444 } /* Literal.String */
body .na { color: #BB4444 } /* Name.Attribute */
body .nb { color: #AA22FF } /* Name.Builtin */
body .nc { color: #0000FF } /* Name.Class */
body .no { color: #880000 } /* Name.Constant */
body .nd { color: #AA22FF } /* Name.Decorator */
body .ni { color: #999999; font-weight: bold } /* Name.Entity */
body .ne { color: #D2413A; font-weight: bold } /* Name.Exception */
body .nf { color: #00A000 } /* Name.Function */
body .nl { color: #A0A000 } /* Name.Label */
body .nn { color: #0000FF; font-weight: bold } /* Name.Namespace */
body .nt { color: #008000; font-weight: bold } /* Name.Tag */
body .nv { color: #B8860B } /* Name.Variable */
body .ow { color: #AA22FF; font-weight: bold } /* Operator.Word */
body .w { color: #bbbbbb } /* Text.Whitespace */
body .mb { color: #666666 } /* Literal.Number.Bin */
body .mf { color: #666666 } /* Literal.Number.Float */
body .mh { color: #666666 } /* Literal.Number.Hex */
body .mi { color: #666666 } /* Literal.Number.Integer */
body .mo { color: #666666 } /* Literal.Number.Oct */
body .sa { color: #BB4444 } /* Literal.String.Affix */
body .sb { color: #BB4444 } /* Literal.String.Backtick */
body .sc { color: #BB4444 } /* Literal.String.Char */
body .dl { color: #BB4444 } /* Literal.String.Delimiter */
body .sd { color: #BB4444; font-style: italic } /* Literal.String.Doc */
body .s2 { color: #BB4444 } /* Literal.String.Double */
body .se { color: #BB6622; font-weight: bold } /* Literal.String.Escape */
body .sh { color: #BB4444 } /* Literal.String.Heredoc */
body .si { color: #BB6688; font-weight: bold } /* Literal.String.Interpol */
body .sx { color: #008000 } /* Literal.String.Other */
body .sr { color: #BB6688 } /* Literal.String.Regex */
body .s1 { color: #BB4444 } /* Literal.String.Single */
body .ss { color: #B8860B } /* Literal.String.Symbol */
body .bp { color: #AA22FF } /* Name.Builtin.Pseudo */
body .fm { color: #00A000 } /* Name.Function.Magic */
body .vc { color: #B8860B } /* Name.Variable.Class */
body .vg { color: #B8860B } /* Name.Variable.Global */
body .vi { color: #B8860B } /* Name.Variable.Instance */
body .vm { color: #B8860B } /* Name.Variable.Magic */
body .il { color: #666666 } /* Literal.Number.Integer.Long */

  </https:></style>


<h2 class="anchored"></h2>

<div class="highlight"><pre><span></span><span class="k">def</span> <span class="nf">get_momentum_actions</span><span class="p">(</span><span class="n">df</span><span class="p">,</span> <span class="n">n_periods</span><span class="p">,</span><span class="n">threshold</span><span class="p">):</span>
    <span class="n">_x</span> <span class="o">=</span> <span class="n">df</span><span class="o">.</span><span class="n">shift</span><span class="p">(</span><span class="n">n_periods</span><span class="p">)</span>
    
    <span class="c1"># Calculate percent change</span>
    <span class="n">momentum_rate</span> <span class="o">=</span> <span class="n">df</span><span class="o">.</span><span class="n">apply</span><span class="p">(</span><span class="k">lambda</span> <span class="n">x</span><span class="p">:</span> <span class="p">(</span><span class="n">x</span><span class="o">-</span><span class="n">x</span><span class="o">.</span><span class="n">shift</span><span class="p">(</span><span class="n">n_periods</span><span class="p">))</span><span class="o">/</span><span class="n">x</span><span class="o">.</span><span class="n">shift</span><span class="p">(</span><span class="n">n_periods</span><span class="p">))[</span><span class="n">n_periods</span><span class="p">:]</span>

    <span class="c1"># Select Action Based on Threshold</span>
    <span class="n">actions</span> <span class="o">=</span> <span class="n">pd</span><span class="o">.</span><span class="n">DataFrame</span><span class="p">(</span><span class="n">np</span><span class="o">.</span><span class="n">where</span><span class="p">(</span><span class="n">momentum_rate</span> <span class="o">&lt;</span> <span class="o">-</span><span class="n">threshold</span><span class="p">,</span> <span class="s1">'Short'</span><span class="p">,</span>
                           <span class="n">np</span><span class="o">.</span><span class="n">where</span><span class="p">(</span><span class="n">momentum_rate</span> <span class="o">&gt;</span> <span class="n">threshold</span><span class="p">,</span>  <span class="s1">'Buy'</span><span class="p">,</span>
                                                                 <span class="s1">''</span><span class="p">)),</span>
                   <span class="n">columns</span><span class="o">=</span><span class="n">momentum_rate</span><span class="o">.</span><span class="n">columns</span><span class="p">,</span><span class="n">index</span><span class="o">=</span><span class="n">momentum_rate</span><span class="o">.</span><span class="n">index</span><span class="p">)</span>
    
    <span class="c1"># Because we use close price, we can't make the trade action until the following day</span>
    <span class="n">actions</span><span class="o">.</span><span class="n">index</span> <span class="o">=</span> <span class="n">actions</span><span class="o">.</span><span class="n">index</span> <span class="o">+</span> <span class="n">timedelta</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span>
    
    <span class="k">return</span> <span class="n">actions</span>
</pre></div>


</div>
</div>
<div id="cell-44" class="cell">
<div class="sourceCode cell-code" id="cb18" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb18-1">actions <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> get_momentum_actions(train.iloc[:,:<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>],n_periods<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">28</span>,threshold<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.08</span>)</span>
<span id="cb18-2">actions.head(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>)</span></code></pre></div>
<div class="cell-output cell-output-display">
<div>


<table class="dataframe caption-top table table-sm table-striped small" data-quarto-postprocess="true" data-border="1">
<thead>
<tr class="header">
<th data-quarto-table-cell-role="th">ticker</th>
<th data-quarto-table-cell-role="th">A</th>
<th data-quarto-table-cell-role="th">AAL</th>
<th data-quarto-table-cell-role="th">AAP</th>
<th data-quarto-table-cell-role="th">AAPL</th>
<th data-quarto-table-cell-role="th">ABBV</th>
</tr>
<tr class="odd">
<th data-quarto-table-cell-role="th">date</th>
<th data-quarto-table-cell-role="th"></th>
<th data-quarto-table-cell-role="th"></th>
<th data-quarto-table-cell-role="th"></th>
<th data-quarto-table-cell-role="th"></th>
<th data-quarto-table-cell-role="th"></th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td data-quarto-table-cell-role="th">2013-08-10</td>
<td></td>
<td>Buy</td>
<td></td>
<td>Buy</td>
<td>Buy</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">2013-08-13</td>
<td></td>
<td>Buy</td>
<td></td>
<td>Buy</td>
<td></td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">2013-08-14</td>
<td>Buy</td>
<td></td>
<td></td>
<td>Buy</td>
<td></td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">2013-08-15</td>
<td></td>
<td></td>
<td></td>
<td>Buy</td>
<td></td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">2013-08-16</td>
<td></td>
<td></td>
<td></td>
<td>Buy</td>
<td></td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">2013-08-17</td>
<td></td>
<td></td>
<td></td>
<td>Buy</td>
<td></td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">2013-08-20</td>
<td></td>
<td>Short</td>
<td></td>
<td>Buy</td>
<td></td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">2013-08-21</td>
<td></td>
<td>Short</td>
<td></td>
<td>Buy</td>
<td></td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">2013-08-22</td>
<td></td>
<td>Short</td>
<td></td>
<td>Buy</td>
<td></td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">2013-08-23</td>
<td></td>
<td>Short</td>
<td></td>
<td>Buy</td>
<td></td>
</tr>
</tbody>
</table>

</div>
</div>
</div>
<p>This leaves us with a table of what actions we are going to execute each day for each stock. Let’s look at some other options for using this momentum-esque concept, and then we can test them all and compare how they perform at the end.</p>
</section>
<section id="regression-momentum" class="level2" data-number="6.2">
<h2 data-number="6.2" class="anchored" data-anchor-id="regression-momentum"><span class="header-section-number">6.2</span> Regression Momentum</h2>
<p>Our previous approach was just the percent change between 2 dates. But what if one of those days is an outlier? Should we really make a decision based on just 2 data points? To address this concerns we will define momentum slightly differently with the slope of a fit regression.</p>
<p>First, let’s understand the general concept better. Creating these minimal examples and visuals is <em>not</em> just something educational for a post - you should do this in your own projects as well. It will help you think more deeply about your problem.</p>
<p>Below I took the stock price for Apple in a 10 day period and plotted it as a scatter plot. Every 4 data points I fit a regression trend line fit to them. We can see that in some groups the trend a very aggressive upward slope, others it’s more neutral, and in others it is a strong negative slope. By using that slope we can determine how much momentum the group of points has. In this way we use all the recent data points to influence momentum and not just the first and last in a period.</p>
<div id="cell-48" class="cell">
<div class="sourceCode cell-code" id="cb19" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb19-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Create Figure</span></span>
<span id="cb19-2">fig,ax <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> plt.subplots(figsize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">15</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">8</span>))</span>
<span id="cb19-3">fig.suptitle(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Window Regression Lines"</span>,fontsize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">50</span>)</span>
<span id="cb19-4"></span>
<span id="cb19-5"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Get 10 data points</span></span>
<span id="cb19-6">_ <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> train[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'AAPL'</span>].iloc[:<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>] </span>
<span id="cb19-7"></span>
<span id="cb19-8">x1 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> _.index.day.values</span>
<span id="cb19-9">y1 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> _.values</span>
<span id="cb19-10"></span>
<span id="cb19-11">sz <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span> <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Window Size</span></span>
<span id="cb19-12"></span>
<span id="cb19-13"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Get Windows for x and y</span></span>
<span id="cb19-14">regr_y <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [y1[i:i<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span>sz] <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> i <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>,<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(y1)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>(sz<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>))]</span>
<span id="cb19-15">regr_x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [x1[i:i<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span>sz].reshape(<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>) <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> i <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>,<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(x1)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>(sz<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>))]</span>
<span id="cb19-16"></span>
<span id="cb19-17"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Create Regression lines</span></span>
<span id="cb19-18">regr <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [LinearRegression().fit(x,y).predict(x) <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> x,y <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">zip</span>(regr_x,regr_y)]</span>
<span id="cb19-19"></span>
<span id="cb19-20"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Pad Regression Lines for Plotting</span></span>
<span id="cb19-21">regr_padded <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [[<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>]<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>i<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">list</span>(r)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span>[<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>]<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(x1)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>sz<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>i) <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> i,r <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">enumerate</span>(regr)]</span>
<span id="cb19-22"></span>
<span id="cb19-23"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Plot</span></span>
<span id="cb19-24">ax.scatter(_.index,y1)</span>
<span id="cb19-25"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> i <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(regr)): ax.plot(_.index,regr_padded[i])</span>
<span id="cb19-26"></span>
<span id="cb19-27">plt.show()</span></code></pre></div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://isaac-flath.tech/posts/TimeSeries/SimpleTimeSeries_files/figure-html/cell-16-output-1.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
</div>
<p>So we take the slope of the trend line to be our momentum. There are very similar levers as before we can change to fine tune out approach:</p>
<ul>
<li><strong>Time Range:</strong> We could use the past 5 days, or past 30 days, or the past year. How far back should we be comparing?</li>
<li><strong>Threshold:</strong> What threshold do we need to cross before we consider it momentous enough to take an action? Is a slope of 1? Slope of 10? Should we do something other than a set value?</li>
<li><strong>What action?</strong> Is it just buy and sell? Could we use this to short?</li>
<li><strong>When do we close our position</strong> Is it a set time period? Or based on another threshold?</li>
</ul>
<p>We will use 28 days for the time range and $5 for our threshold in this example to demonstrate the concept, but in the testing section we will show how to test different parameters.</p>
<div class="callout callout-style-default callout-note callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Note
</div>
</div>
<div class="callout-body-container callout-body">
<p>We are assuming that every day is equally spaced in this regression. I reality, the stock market is not open daily. We are ignoring this for this analysis to keep things simple, but it may be something for us to revisit in a future post!</p>
</div>
</div>
<p>In this section we are using a straight dollar threshold instead of a percentage. This can cause difficulties because a ticker with a share price at 20 dollars increasing to 25 dollars is a HUGE increase. If a stock goes from 500 to 505 dollars that is not nearly as big of a deal. The point of this post is to show variety of options and get you thinking so we will keep this one as is and see how it shakes out when we test it the approach.</p>
<p>Let’s codify our approach so we have a function we can use to test with later.</p>
<div id="cell-50" class="cell">
<div class="sourceCode cell-code" id="cb20" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb20-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> SimpleTimeSeries <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> get_momentum_regr_actions</span>
<span id="cb20-2">view_source_code(get_momentum_regr_actions)</span></code></pre></div>
<div class="cell-output cell-output-display">

<!--
generated by Pygments <https://pygments.org/>
Copyright 2006-2021 by the Pygments team.
Licensed under the BSD license, see LICENSE for details.
-->


  <title></title>
  <meta http-equiv="content-type" content="text/html; charset=utf-8">
  <style type="text/css">
/*
generated by Pygments <https: pygments.org="">
Copyright 2006-2021 by the Pygments team.
Licensed under the BSD license, see LICENSE for details.
*/
pre { line-height: 125%; }
td.linenos .normal { color: inherit; background-color: transparent; padding-left: 5px; padding-right: 5px; }
span.linenos { color: inherit; background-color: transparent; padding-left: 5px; padding-right: 5px; }
td.linenos .special { color: #000000; background-color: #ffffc0; padding-left: 5px; padding-right: 5px; }
span.linenos.special { color: #000000; background-color: #ffffc0; padding-left: 5px; padding-right: 5px; }
body .hll { background-color: #ffffcc }
body { background: #f8f8f8; }
body .c { color: #008800; font-style: italic } /* Comment */
body .err { border: 1px solid #FF0000 } /* Error */
body .k { color: #AA22FF; font-weight: bold } /* Keyword */
body .o { color: #666666 } /* Operator */
body .ch { color: #008800; font-style: italic } /* Comment.Hashbang */
body .cm { color: #008800; font-style: italic } /* Comment.Multiline */
body .cp { color: #008800 } /* Comment.Preproc */
body .cpf { color: #008800; font-style: italic } /* Comment.PreprocFile */
body .c1 { color: #008800; font-style: italic } /* Comment.Single */
body .cs { color: #008800; font-weight: bold } /* Comment.Special */
body .gd { color: #A00000 } /* Generic.Deleted */
body .ge { font-style: italic } /* Generic.Emph */
body .gr { color: #FF0000 } /* Generic.Error */
body .gh { color: #000080; font-weight: bold } /* Generic.Heading */
body .gi { color: #00A000 } /* Generic.Inserted */
body .go { color: #888888 } /* Generic.Output */
body .gp { color: #000080; font-weight: bold } /* Generic.Prompt */
body .gs { font-weight: bold } /* Generic.Strong */
body .gu { color: #800080; font-weight: bold } /* Generic.Subheading */
body .gt { color: #0044DD } /* Generic.Traceback */
body .kc { color: #AA22FF; font-weight: bold } /* Keyword.Constant */
body .kd { color: #AA22FF; font-weight: bold } /* Keyword.Declaration */
body .kn { color: #AA22FF; font-weight: bold } /* Keyword.Namespace */
body .kp { color: #AA22FF } /* Keyword.Pseudo */
body .kr { color: #AA22FF; font-weight: bold } /* Keyword.Reserved */
body .kt { color: #00BB00; font-weight: bold } /* Keyword.Type */
body .m { color: #666666 } /* Literal.Number */
body .s { color: #BB4444 } /* Literal.String */
body .na { color: #BB4444 } /* Name.Attribute */
body .nb { color: #AA22FF } /* Name.Builtin */
body .nc { color: #0000FF } /* Name.Class */
body .no { color: #880000 } /* Name.Constant */
body .nd { color: #AA22FF } /* Name.Decorator */
body .ni { color: #999999; font-weight: bold } /* Name.Entity */
body .ne { color: #D2413A; font-weight: bold } /* Name.Exception */
body .nf { color: #00A000 } /* Name.Function */
body .nl { color: #A0A000 } /* Name.Label */
body .nn { color: #0000FF; font-weight: bold } /* Name.Namespace */
body .nt { color: #008000; font-weight: bold } /* Name.Tag */
body .nv { color: #B8860B } /* Name.Variable */
body .ow { color: #AA22FF; font-weight: bold } /* Operator.Word */
body .w { color: #bbbbbb } /* Text.Whitespace */
body .mb { color: #666666 } /* Literal.Number.Bin */
body .mf { color: #666666 } /* Literal.Number.Float */
body .mh { color: #666666 } /* Literal.Number.Hex */
body .mi { color: #666666 } /* Literal.Number.Integer */
body .mo { color: #666666 } /* Literal.Number.Oct */
body .sa { color: #BB4444 } /* Literal.String.Affix */
body .sb { color: #BB4444 } /* Literal.String.Backtick */
body .sc { color: #BB4444 } /* Literal.String.Char */
body .dl { color: #BB4444 } /* Literal.String.Delimiter */
body .sd { color: #BB4444; font-style: italic } /* Literal.String.Doc */
body .s2 { color: #BB4444 } /* Literal.String.Double */
body .se { color: #BB6622; font-weight: bold } /* Literal.String.Escape */
body .sh { color: #BB4444 } /* Literal.String.Heredoc */
body .si { color: #BB6688; font-weight: bold } /* Literal.String.Interpol */
body .sx { color: #008000 } /* Literal.String.Other */
body .sr { color: #BB6688 } /* Literal.String.Regex */
body .s1 { color: #BB4444 } /* Literal.String.Single */
body .ss { color: #B8860B } /* Literal.String.Symbol */
body .bp { color: #AA22FF } /* Name.Builtin.Pseudo */
body .fm { color: #00A000 } /* Name.Function.Magic */
body .vc { color: #B8860B } /* Name.Variable.Class */
body .vg { color: #B8860B } /* Name.Variable.Global */
body .vi { color: #B8860B } /* Name.Variable.Instance */
body .vm { color: #B8860B } /* Name.Variable.Magic */
body .il { color: #666666 } /* Literal.Number.Integer.Long */

  </https:></style>


<h2 class="anchored"></h2>

<div class="highlight"><pre><span></span><span class="k">def</span> <span class="nf">get_momentum_regr_actions</span><span class="p">(</span><span class="n">df</span><span class="p">,</span> <span class="n">n_periods</span><span class="p">,</span><span class="n">threshold</span><span class="p">):</span>
    <span class="n">_x</span> <span class="o">=</span> <span class="n">df</span><span class="o">.</span><span class="n">shift</span><span class="p">(</span><span class="n">n_periods</span><span class="p">)</span>
    
    <span class="c1"># Calculate Momentum</span>
    <span class="n">mom_window</span> <span class="o">=</span> <span class="n">df</span><span class="o">.</span><span class="n">rolling</span><span class="p">(</span><span class="n">n_periods</span><span class="p">)</span>
    <span class="n">mom_rate</span> <span class="o">=</span> <span class="n">mom_window</span><span class="o">.</span><span class="n">apply</span><span class="p">(</span><span class="k">lambda</span> <span class="n">y</span><span class="p">:</span> <span class="n">LinearRegression</span><span class="p">()</span><span class="o">.</span>
                                    <span class="n">fit</span><span class="p">(</span><span class="n">np</span><span class="o">.</span><span class="n">array</span><span class="p">(</span><span class="nb">range</span><span class="p">(</span><span class="n">n_periods</span><span class="p">))</span><span class="o">.</span>
                                    <span class="n">reshape</span><span class="p">(</span><span class="o">-</span><span class="mi">1</span><span class="p">,</span> <span class="mi">1</span><span class="p">),</span><span class="n">y</span><span class="p">)</span><span class="o">.</span><span class="n">coef_</span><span class="p">)</span>
    <span class="n">mom_rate</span> <span class="o">=</span> <span class="n">mom_rate</span><span class="p">[</span><span class="n">n_periods</span><span class="p">:]</span>
    
    <span class="c1"># Select Action Based on Threshold</span>
    <span class="n">actions</span> <span class="o">=</span> <span class="n">pd</span><span class="o">.</span><span class="n">DataFrame</span><span class="p">(</span><span class="n">np</span><span class="o">.</span><span class="n">where</span><span class="p">(</span><span class="n">mom_rate</span> <span class="o">&lt;</span> <span class="o">-</span><span class="n">threshold</span><span class="p">,</span> <span class="s1">'Short'</span><span class="p">,</span>
                           <span class="n">np</span><span class="o">.</span><span class="n">where</span><span class="p">(</span><span class="n">mom_rate</span> <span class="o">&gt;</span> <span class="n">threshold</span><span class="p">,</span>  <span class="s1">'Buy'</span><span class="p">,</span>
                                                                 <span class="s1">''</span><span class="p">)),</span>
                   <span class="n">columns</span><span class="o">=</span><span class="n">mom_rate</span><span class="o">.</span><span class="n">columns</span><span class="p">,</span><span class="n">index</span><span class="o">=</span><span class="n">mom_rate</span><span class="o">.</span><span class="n">index</span><span class="p">)</span>
    
    <span class="c1"># Because we use close price, we can't make the trade action until the following day</span>
    <span class="n">actions</span><span class="o">.</span><span class="n">index</span> <span class="o">=</span> <span class="n">actions</span><span class="o">.</span><span class="n">index</span> <span class="o">+</span> <span class="n">timedelta</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span>
    
    <span class="k">return</span> <span class="n">actions</span>
</pre></div>


</div>
</div>
<div id="cell-51" class="cell">
<div class="sourceCode cell-code" id="cb21" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb21-1">actions <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> get_momentum_regr_actions(train.iloc[:,[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>,<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>,<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">8</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">30</span>]],n_periods<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">28</span>,threshold<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">.24</span>)</span>
<span id="cb21-2">actions.head(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>)</span></code></pre></div>
<div class="cell-output cell-output-display">
<div>


<table class="dataframe caption-top table table-sm table-striped small" data-quarto-postprocess="true" data-border="1">
<thead>
<tr class="header">
<th data-quarto-table-cell-role="th">ticker</th>
<th data-quarto-table-cell-role="th">AAPL</th>
<th data-quarto-table-cell-role="th">ZBH</th>
<th data-quarto-table-cell-role="th">XOM</th>
<th data-quarto-table-cell-role="th">AAL</th>
<th data-quarto-table-cell-role="th">ALXN</th>
</tr>
<tr class="odd">
<th data-quarto-table-cell-role="th">date</th>
<th data-quarto-table-cell-role="th"></th>
<th data-quarto-table-cell-role="th"></th>
<th data-quarto-table-cell-role="th"></th>
<th data-quarto-table-cell-role="th"></th>
<th data-quarto-table-cell-role="th"></th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td data-quarto-table-cell-role="th">2013-08-10</td>
<td>Buy</td>
<td>Buy</td>
<td></td>
<td></td>
<td>Buy</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">2013-08-13</td>
<td>Buy</td>
<td>Buy</td>
<td></td>
<td></td>
<td>Buy</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">2013-08-14</td>
<td>Buy</td>
<td></td>
<td></td>
<td></td>
<td>Buy</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">2013-08-15</td>
<td>Buy</td>
<td></td>
<td></td>
<td></td>
<td>Buy</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">2013-08-16</td>
<td>Buy</td>
<td></td>
<td></td>
<td></td>
<td>Buy</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">2013-08-17</td>
<td>Buy</td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">2013-08-20</td>
<td>Buy</td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">2013-08-21</td>
<td>Buy</td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">2013-08-22</td>
<td>Buy</td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">2013-08-23</td>
<td>Buy</td>
<td></td>
<td>Short</td>
<td></td>
<td></td>
</tr>
</tbody>
</table>

</div>
</div>
</div>
</section>
<section id="bollinger-bands" class="level2" data-number="6.3">
<h2 data-number="6.3" class="anchored" data-anchor-id="bollinger-bands"><span class="header-section-number">6.3</span> Bollinger Bands</h2>
<p>A bollinger band uses a rolling standard deviation to determine when the stock price is unusually high or low. In theory if the price is doing something unexpected we can capitalize on that. So rather than a percent change, or a regression line, we are now picking it based on whether it’s unusually high or low per the standard deviation.</p>
<p>Let’s walk through graphing a bolldinger band this on a couple tickers so we understand what’s going on. Then we can figure out how to use this to create a trading strategy.</p>
<div id="cell-54" class="cell">
<div class="sourceCode cell-code" id="cb22" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb22-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> SimpleTimeSeries <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> calculate_bollinger</span>
<span id="cb22-2">view_source_code(calculate_bollinger)</span></code></pre></div>
<div class="cell-output cell-output-display">

<!--
generated by Pygments <https://pygments.org/>
Copyright 2006-2021 by the Pygments team.
Licensed under the BSD license, see LICENSE for details.
-->


  <title></title>
  <meta http-equiv="content-type" content="text/html; charset=utf-8">
  <style type="text/css">
/*
generated by Pygments <https: pygments.org="">
Copyright 2006-2021 by the Pygments team.
Licensed under the BSD license, see LICENSE for details.
*/
pre { line-height: 125%; }
td.linenos .normal { color: inherit; background-color: transparent; padding-left: 5px; padding-right: 5px; }
span.linenos { color: inherit; background-color: transparent; padding-left: 5px; padding-right: 5px; }
td.linenos .special { color: #000000; background-color: #ffffc0; padding-left: 5px; padding-right: 5px; }
span.linenos.special { color: #000000; background-color: #ffffc0; padding-left: 5px; padding-right: 5px; }
body .hll { background-color: #ffffcc }
body { background: #f8f8f8; }
body .c { color: #008800; font-style: italic } /* Comment */
body .err { border: 1px solid #FF0000 } /* Error */
body .k { color: #AA22FF; font-weight: bold } /* Keyword */
body .o { color: #666666 } /* Operator */
body .ch { color: #008800; font-style: italic } /* Comment.Hashbang */
body .cm { color: #008800; font-style: italic } /* Comment.Multiline */
body .cp { color: #008800 } /* Comment.Preproc */
body .cpf { color: #008800; font-style: italic } /* Comment.PreprocFile */
body .c1 { color: #008800; font-style: italic } /* Comment.Single */
body .cs { color: #008800; font-weight: bold } /* Comment.Special */
body .gd { color: #A00000 } /* Generic.Deleted */
body .ge { font-style: italic } /* Generic.Emph */
body .gr { color: #FF0000 } /* Generic.Error */
body .gh { color: #000080; font-weight: bold } /* Generic.Heading */
body .gi { color: #00A000 } /* Generic.Inserted */
body .go { color: #888888 } /* Generic.Output */
body .gp { color: #000080; font-weight: bold } /* Generic.Prompt */
body .gs { font-weight: bold } /* Generic.Strong */
body .gu { color: #800080; font-weight: bold } /* Generic.Subheading */
body .gt { color: #0044DD } /* Generic.Traceback */
body .kc { color: #AA22FF; font-weight: bold } /* Keyword.Constant */
body .kd { color: #AA22FF; font-weight: bold } /* Keyword.Declaration */
body .kn { color: #AA22FF; font-weight: bold } /* Keyword.Namespace */
body .kp { color: #AA22FF } /* Keyword.Pseudo */
body .kr { color: #AA22FF; font-weight: bold } /* Keyword.Reserved */
body .kt { color: #00BB00; font-weight: bold } /* Keyword.Type */
body .m { color: #666666 } /* Literal.Number */
body .s { color: #BB4444 } /* Literal.String */
body .na { color: #BB4444 } /* Name.Attribute */
body .nb { color: #AA22FF } /* Name.Builtin */
body .nc { color: #0000FF } /* Name.Class */
body .no { color: #880000 } /* Name.Constant */
body .nd { color: #AA22FF } /* Name.Decorator */
body .ni { color: #999999; font-weight: bold } /* Name.Entity */
body .ne { color: #D2413A; font-weight: bold } /* Name.Exception */
body .nf { color: #00A000 } /* Name.Function */
body .nl { color: #A0A000 } /* Name.Label */
body .nn { color: #0000FF; font-weight: bold } /* Name.Namespace */
body .nt { color: #008000; font-weight: bold } /* Name.Tag */
body .nv { color: #B8860B } /* Name.Variable */
body .ow { color: #AA22FF; font-weight: bold } /* Operator.Word */
body .w { color: #bbbbbb } /* Text.Whitespace */
body .mb { color: #666666 } /* Literal.Number.Bin */
body .mf { color: #666666 } /* Literal.Number.Float */
body .mh { color: #666666 } /* Literal.Number.Hex */
body .mi { color: #666666 } /* Literal.Number.Integer */
body .mo { color: #666666 } /* Literal.Number.Oct */
body .sa { color: #BB4444 } /* Literal.String.Affix */
body .sb { color: #BB4444 } /* Literal.String.Backtick */
body .sc { color: #BB4444 } /* Literal.String.Char */
body .dl { color: #BB4444 } /* Literal.String.Delimiter */
body .sd { color: #BB4444; font-style: italic } /* Literal.String.Doc */
body .s2 { color: #BB4444 } /* Literal.String.Double */
body .se { color: #BB6622; font-weight: bold } /* Literal.String.Escape */
body .sh { color: #BB4444 } /* Literal.String.Heredoc */
body .si { color: #BB6688; font-weight: bold } /* Literal.String.Interpol */
body .sx { color: #008000 } /* Literal.String.Other */
body .sr { color: #BB6688 } /* Literal.String.Regex */
body .s1 { color: #BB4444 } /* Literal.String.Single */
body .ss { color: #B8860B } /* Literal.String.Symbol */
body .bp { color: #AA22FF } /* Name.Builtin.Pseudo */
body .fm { color: #00A000 } /* Name.Function.Magic */
body .vc { color: #B8860B } /* Name.Variable.Class */
body .vg { color: #B8860B } /* Name.Variable.Global */
body .vi { color: #B8860B } /* Name.Variable.Instance */
body .vm { color: #B8860B } /* Name.Variable.Magic */
body .il { color: #666666 } /* Literal.Number.Integer.Long */

  </https:></style>


<h2 class="anchored"></h2>

<div class="highlight"><pre><span></span><span class="k">def</span> <span class="nf">calculate_bollinger</span><span class="p">(</span><span class="n">df</span><span class="p">,</span> <span class="n">tickers</span><span class="o">=</span><span class="p">[</span><span class="s1">'AAPL'</span><span class="p">,</span><span class="s1">'MSFT'</span><span class="p">],</span><span class="n">window_sz</span><span class="o">=</span><span class="mi">28</span><span class="p">,</span><span class="n">band_sz</span><span class="o">=</span><span class="mi">2</span><span class="p">):</span>
    <span class="n">out</span> <span class="o">=</span> <span class="p">{}</span>

    <span class="k">for</span> <span class="n">ticker</span> <span class="ow">in</span> <span class="n">tickers</span><span class="p">:</span>
        <span class="n">raw</span> <span class="o">=</span> <span class="n">df</span><span class="o">.</span><span class="n">loc</span><span class="p">[:,</span><span class="n">ticker</span><span class="p">]</span> 
        
        <span class="c1"># Calculate window statistics</span>
        <span class="n">_mean</span> <span class="o">=</span> <span class="n">raw</span><span class="o">.</span><span class="n">rolling</span><span class="p">(</span><span class="n">window_sz</span><span class="p">)</span><span class="o">.</span><span class="n">mean</span><span class="p">()</span>
        <span class="n">_std</span> <span class="o">=</span> <span class="n">raw</span><span class="o">.</span><span class="n">rolling</span><span class="p">(</span><span class="n">window_sz</span><span class="p">)</span><span class="o">.</span><span class="n">std</span><span class="p">()</span>

        <span class="c1"># Calculate bands based on window statistics</span>
        <span class="n">upper_band</span> <span class="o">=</span> <span class="n">_mean</span> <span class="o">+</span> <span class="p">(</span><span class="n">band_sz</span><span class="o">*</span><span class="n">_std</span><span class="p">)</span>
        <span class="n">lower_band</span> <span class="o">=</span> <span class="n">_mean</span> <span class="o">-</span> <span class="p">(</span><span class="n">band_sz</span><span class="o">*</span><span class="n">_std</span><span class="p">)</span>
        
        <span class="c1"># Combine in a dataframe</span>
        <span class="n">_out</span> <span class="o">=</span> <span class="n">pd</span><span class="o">.</span><span class="n">concat</span><span class="p">([</span><span class="n">lower_band</span><span class="p">,</span> <span class="n">raw</span><span class="p">,</span> <span class="n">upper_band</span><span class="p">,</span> <span class="p">],</span><span class="n">axis</span><span class="o">=</span><span class="mi">1</span><span class="p">)</span>
        <span class="n">_out</span><span class="o">.</span><span class="n">columns</span> <span class="o">=</span> <span class="p">[</span><span class="s1">'lower_band'</span><span class="p">,</span><span class="s1">'raw'</span><span class="p">,</span><span class="s1">'upper_band'</span><span class="p">]</span>
        <span class="n">_out</span><span class="p">[</span><span class="s1">'lower_limit'</span><span class="p">]</span> <span class="o">=</span> <span class="n">_out</span><span class="o">.</span><span class="n">raw</span> <span class="o">&lt;</span> <span class="n">_out</span><span class="o">.</span><span class="n">lower_band</span>
        <span class="n">_out</span><span class="p">[</span><span class="s1">'upper_limit'</span><span class="p">]</span> <span class="o">=</span> <span class="n">_out</span><span class="o">.</span><span class="n">raw</span> <span class="o">&gt;</span> <span class="n">_out</span><span class="o">.</span><span class="n">upper_band</span>

        <span class="n">out</span><span class="p">[</span><span class="n">ticker</span><span class="p">]</span> <span class="o">=</span> <span class="n">_out</span>
    <span class="k">return</span> <span class="n">out</span>
</pre></div>


</div>
</div>
<div id="cell-55" class="cell">
<div class="sourceCode cell-code" id="cb23" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb23-1">calculate_bollinger(train,[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'AAPL'</span>,<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'MSFT'</span>,<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'GOOG'</span>,<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'AMZN'</span>])[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'AAPL'</span>].sample(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>)</span></code></pre></div>
<div class="cell-output cell-output-display">
<div>


<table class="dataframe caption-top table table-sm table-striped small" data-quarto-postprocess="true" data-border="1">
<thead>
<tr class="header">
<th data-quarto-table-cell-role="th"></th>
<th data-quarto-table-cell-role="th">lower_band</th>
<th data-quarto-table-cell-role="th">raw</th>
<th data-quarto-table-cell-role="th">upper_band</th>
<th data-quarto-table-cell-role="th">lower_limit</th>
<th data-quarto-table-cell-role="th">upper_limit</th>
</tr>
<tr class="odd">
<th data-quarto-table-cell-role="th">date</th>
<th data-quarto-table-cell-role="th"></th>
<th data-quarto-table-cell-role="th"></th>
<th data-quarto-table-cell-role="th"></th>
<th data-quarto-table-cell-role="th"></th>
<th data-quarto-table-cell-role="th"></th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td data-quarto-table-cell-role="th">2016-07-08</td>
<td>89.498384</td>
<td>93.405487</td>
<td>97.142827</td>
<td>False</td>
<td>False</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">2014-10-02</td>
<td>91.353234</td>
<td>93.418008</td>
<td>96.999605</td>
<td>False</td>
<td>False</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">2016-12-06</td>
<td>104.282310</td>
<td>107.352218</td>
<td>111.253007</td>
<td>False</td>
<td>False</td>
</tr>
</tbody>
</table>

</div>
</div>
</div>
<div id="cell-56" class="cell">
<div class="sourceCode cell-code" id="cb24" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb24-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> SimpleTimeSeries <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> plot_bollinger</span>
<span id="cb24-2">view_source_code(plot_bollinger)</span></code></pre></div>
<div class="cell-output cell-output-display">

<!--
generated by Pygments <https://pygments.org/>
Copyright 2006-2021 by the Pygments team.
Licensed under the BSD license, see LICENSE for details.
-->


  <title></title>
  <meta http-equiv="content-type" content="text/html; charset=utf-8">
  <style type="text/css">
/*
generated by Pygments <https: pygments.org="">
Copyright 2006-2021 by the Pygments team.
Licensed under the BSD license, see LICENSE for details.
*/
pre { line-height: 125%; }
td.linenos .normal { color: inherit; background-color: transparent; padding-left: 5px; padding-right: 5px; }
span.linenos { color: inherit; background-color: transparent; padding-left: 5px; padding-right: 5px; }
td.linenos .special { color: #000000; background-color: #ffffc0; padding-left: 5px; padding-right: 5px; }
span.linenos.special { color: #000000; background-color: #ffffc0; padding-left: 5px; padding-right: 5px; }
body .hll { background-color: #ffffcc }
body { background: #f8f8f8; }
body .c { color: #008800; font-style: italic } /* Comment */
body .err { border: 1px solid #FF0000 } /* Error */
body .k { color: #AA22FF; font-weight: bold } /* Keyword */
body .o { color: #666666 } /* Operator */
body .ch { color: #008800; font-style: italic } /* Comment.Hashbang */
body .cm { color: #008800; font-style: italic } /* Comment.Multiline */
body .cp { color: #008800 } /* Comment.Preproc */
body .cpf { color: #008800; font-style: italic } /* Comment.PreprocFile */
body .c1 { color: #008800; font-style: italic } /* Comment.Single */
body .cs { color: #008800; font-weight: bold } /* Comment.Special */
body .gd { color: #A00000 } /* Generic.Deleted */
body .ge { font-style: italic } /* Generic.Emph */
body .gr { color: #FF0000 } /* Generic.Error */
body .gh { color: #000080; font-weight: bold } /* Generic.Heading */
body .gi { color: #00A000 } /* Generic.Inserted */
body .go { color: #888888 } /* Generic.Output */
body .gp { color: #000080; font-weight: bold } /* Generic.Prompt */
body .gs { font-weight: bold } /* Generic.Strong */
body .gu { color: #800080; font-weight: bold } /* Generic.Subheading */
body .gt { color: #0044DD } /* Generic.Traceback */
body .kc { color: #AA22FF; font-weight: bold } /* Keyword.Constant */
body .kd { color: #AA22FF; font-weight: bold } /* Keyword.Declaration */
body .kn { color: #AA22FF; font-weight: bold } /* Keyword.Namespace */
body .kp { color: #AA22FF } /* Keyword.Pseudo */
body .kr { color: #AA22FF; font-weight: bold } /* Keyword.Reserved */
body .kt { color: #00BB00; font-weight: bold } /* Keyword.Type */
body .m { color: #666666 } /* Literal.Number */
body .s { color: #BB4444 } /* Literal.String */
body .na { color: #BB4444 } /* Name.Attribute */
body .nb { color: #AA22FF } /* Name.Builtin */
body .nc { color: #0000FF } /* Name.Class */
body .no { color: #880000 } /* Name.Constant */
body .nd { color: #AA22FF } /* Name.Decorator */
body .ni { color: #999999; font-weight: bold } /* Name.Entity */
body .ne { color: #D2413A; font-weight: bold } /* Name.Exception */
body .nf { color: #00A000 } /* Name.Function */
body .nl { color: #A0A000 } /* Name.Label */
body .nn { color: #0000FF; font-weight: bold } /* Name.Namespace */
body .nt { color: #008000; font-weight: bold } /* Name.Tag */
body .nv { color: #B8860B } /* Name.Variable */
body .ow { color: #AA22FF; font-weight: bold } /* Operator.Word */
body .w { color: #bbbbbb } /* Text.Whitespace */
body .mb { color: #666666 } /* Literal.Number.Bin */
body .mf { color: #666666 } /* Literal.Number.Float */
body .mh { color: #666666 } /* Literal.Number.Hex */
body .mi { color: #666666 } /* Literal.Number.Integer */
body .mo { color: #666666 } /* Literal.Number.Oct */
body .sa { color: #BB4444 } /* Literal.String.Affix */
body .sb { color: #BB4444 } /* Literal.String.Backtick */
body .sc { color: #BB4444 } /* Literal.String.Char */
body .dl { color: #BB4444 } /* Literal.String.Delimiter */
body .sd { color: #BB4444; font-style: italic } /* Literal.String.Doc */
body .s2 { color: #BB4444 } /* Literal.String.Double */
body .se { color: #BB6622; font-weight: bold } /* Literal.String.Escape */
body .sh { color: #BB4444 } /* Literal.String.Heredoc */
body .si { color: #BB6688; font-weight: bold } /* Literal.String.Interpol */
body .sx { color: #008000 } /* Literal.String.Other */
body .sr { color: #BB6688 } /* Literal.String.Regex */
body .s1 { color: #BB4444 } /* Literal.String.Single */
body .ss { color: #B8860B } /* Literal.String.Symbol */
body .bp { color: #AA22FF } /* Name.Builtin.Pseudo */
body .fm { color: #00A000 } /* Name.Function.Magic */
body .vc { color: #B8860B } /* Name.Variable.Class */
body .vg { color: #B8860B } /* Name.Variable.Global */
body .vi { color: #B8860B } /* Name.Variable.Instance */
body .vm { color: #B8860B } /* Name.Variable.Magic */
body .il { color: #666666 } /* Literal.Number.Integer.Long */

  </https:></style>


<h2 class="anchored"></h2>

<div class="highlight"><pre><span></span><span class="k">def</span> <span class="nf">plot_bollinger</span><span class="p">(</span><span class="n">data</span><span class="p">,</span><span class="n">min_date</span><span class="p">,</span><span class="n">plt_cols</span><span class="o">=</span><span class="mi">2</span><span class="p">):</span>
    <span class="c1"># Create Plot    </span>
    <span class="n">rows</span> <span class="o">=</span> <span class="nb">int</span><span class="p">(</span><span class="nb">len</span><span class="p">(</span><span class="n">data</span><span class="o">.</span><span class="n">keys</span><span class="p">())</span><span class="o">/</span><span class="n">plt_cols</span><span class="p">)</span>
    <span class="n">fig</span><span class="p">,</span> <span class="n">ax</span> <span class="o">=</span> <span class="n">plt</span><span class="o">.</span><span class="n">subplots</span><span class="p">(</span><span class="n">rows</span><span class="p">,</span><span class="n">plt_cols</span><span class="p">,</span><span class="n">figsize</span><span class="o">=</span><span class="p">(</span><span class="mi">20</span><span class="p">,</span><span class="mi">8</span><span class="o">*</span><span class="n">rows</span><span class="p">))</span>
    <span class="n">fig</span><span class="o">.</span><span class="n">suptitle</span><span class="p">(</span><span class="s2">"Bollinger Bands"</span><span class="p">,</span><span class="n">fontsize</span><span class="o">=</span><span class="mi">50</span><span class="p">)</span>

    
    <span class="k">for</span> <span class="n">i</span><span class="p">,(</span><span class="n">ticker</span><span class="p">,</span><span class="n">df</span><span class="p">)</span> <span class="ow">in</span> <span class="nb">enumerate</span><span class="p">(</span><span class="n">data</span><span class="o">.</span><span class="n">items</span><span class="p">()):</span>
        <span class="c1"># Determind plot location</span>
        <span class="n">row_num</span> <span class="o">=</span> <span class="nb">int</span><span class="p">(</span><span class="n">i</span> <span class="o">/</span> <span class="n">plt_cols</span><span class="p">)</span> <span class="k">if</span> <span class="nb">len</span><span class="p">(</span><span class="n">data</span><span class="o">.</span><span class="n">keys</span><span class="p">())</span> <span class="o">&gt;</span> <span class="mi">2</span> <span class="k">else</span> <span class="n">i</span>
        <span class="n">col_num</span> <span class="o">=</span> <span class="n">i</span> <span class="o">-</span> <span class="p">(</span><span class="n">row_num</span> <span class="o">*</span> <span class="n">plt_cols</span><span class="p">)</span>
        
        <span class="c1"># Filter for dates</span>
        <span class="n">_d</span> <span class="o">=</span> <span class="n">data</span><span class="p">[</span><span class="n">ticker</span><span class="p">]</span><span class="o">.</span><span class="n">loc</span><span class="p">[</span><span class="n">df</span><span class="o">.</span><span class="n">index</span><span class="o">&gt;=</span><span class="n">min_date</span><span class="p">]</span>
        
        <span class="c1"># Draw Plots</span>
        <span class="k">if</span> <span class="n">plt_cols</span> <span class="o">&gt;</span><span class="mi">2</span><span class="p">:</span> <span class="n">_tmp</span> <span class="o">=</span> <span class="n">ax</span><span class="p">[</span><span class="n">row_num</span><span class="p">,</span><span class="n">col_num</span><span class="p">]</span>
        <span class="k">else</span><span class="p">:</span> <span class="n">_tmp</span> <span class="o">=</span> <span class="n">ax</span><span class="p">[</span><span class="n">row_num</span><span class="p">]</span>
        <span class="n">_tmp</span><span class="o">.</span><span class="n">set_title</span><span class="p">(</span><span class="n">ticker</span><span class="p">,</span><span class="n">fontsize</span><span class="o">=</span><span class="mi">18</span><span class="p">)</span>
        <span class="n">_tmp</span><span class="o">.</span><span class="n">plot</span><span class="p">(</span><span class="n">_d</span><span class="p">[[</span><span class="s1">'lower_band'</span><span class="p">,</span><span class="s1">'raw'</span><span class="p">,</span><span class="s1">'upper_band'</span><span class="p">]])</span>
        <span class="n">_tmp</span><span class="o">.</span><span class="n">scatter</span><span class="p">(</span><span class="n">_d</span><span class="p">[</span><span class="n">_d</span><span class="o">.</span><span class="n">lower_limit</span><span class="p">]</span><span class="o">.</span><span class="n">index</span><span class="p">,</span><span class="n">_d</span><span class="p">[</span><span class="n">_d</span><span class="o">.</span><span class="n">lower_limit</span><span class="p">]</span><span class="o">.</span><span class="n">raw</span><span class="p">,</span><span class="n">c</span><span class="o">=</span><span class="s1">'red'</span><span class="p">)</span>
        <span class="n">_tmp</span><span class="o">.</span><span class="n">scatter</span><span class="p">(</span><span class="n">_d</span><span class="p">[</span><span class="n">_d</span><span class="o">.</span><span class="n">upper_limit</span><span class="p">]</span><span class="o">.</span><span class="n">index</span><span class="p">,</span><span class="n">_d</span><span class="p">[</span><span class="n">_d</span><span class="o">.</span><span class="n">upper_limit</span><span class="p">]</span><span class="o">.</span><span class="n">raw</span><span class="p">,</span><span class="n">c</span><span class="o">=</span><span class="s1">'red'</span><span class="p">)</span>
</pre></div>


</div>
</div>
<div id="cell-57" class="cell">
<div class="sourceCode cell-code" id="cb25" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb25-1">plot_bollinger(calculate_bollinger(train),min_date<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'2016-01-01'</span>)</span></code></pre></div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://isaac-flath.tech/posts/TimeSeries/SimpleTimeSeries_files/figure-html/cell-22-output-1.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
</div>
<p>These charts show stock prices for Apple and Microsoft over time in orange. The green is our upper band, which in this case is 2 standard deviations above the mean when looking at the last 28 days of the adjusted close price. The blue is 2 standard deviations below the mean.</p>
<p>We’ve plotted red dots anywhere the stock price crosses these bounds. This can only happen if there is a significant enough shift for it to be 2 standard deviations from the mean. Let’s code up this third momentum-esque approach as well so we have a 3rd method to test. Where the price crosses a bollinger band we will take an action!</p>
<div id="cell-59" class="cell">
<div class="sourceCode cell-code" id="cb26" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb26-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> SimpleTimeSeries <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> get_bollinger_actions</span>
<span id="cb26-2">view_source_code(get_bollinger_actions)</span></code></pre></div>
<div class="cell-output cell-output-display">

<!--
generated by Pygments <https://pygments.org/>
Copyright 2006-2021 by the Pygments team.
Licensed under the BSD license, see LICENSE for details.
-->


  <title></title>
  <meta http-equiv="content-type" content="text/html; charset=utf-8">
  <style type="text/css">
/*
generated by Pygments <https: pygments.org="">
Copyright 2006-2021 by the Pygments team.
Licensed under the BSD license, see LICENSE for details.
*/
pre { line-height: 125%; }
td.linenos .normal { color: inherit; background-color: transparent; padding-left: 5px; padding-right: 5px; }
span.linenos { color: inherit; background-color: transparent; padding-left: 5px; padding-right: 5px; }
td.linenos .special { color: #000000; background-color: #ffffc0; padding-left: 5px; padding-right: 5px; }
span.linenos.special { color: #000000; background-color: #ffffc0; padding-left: 5px; padding-right: 5px; }
body .hll { background-color: #ffffcc }
body { background: #f8f8f8; }
body .c { color: #008800; font-style: italic } /* Comment */
body .err { border: 1px solid #FF0000 } /* Error */
body .k { color: #AA22FF; font-weight: bold } /* Keyword */
body .o { color: #666666 } /* Operator */
body .ch { color: #008800; font-style: italic } /* Comment.Hashbang */
body .cm { color: #008800; font-style: italic } /* Comment.Multiline */
body .cp { color: #008800 } /* Comment.Preproc */
body .cpf { color: #008800; font-style: italic } /* Comment.PreprocFile */
body .c1 { color: #008800; font-style: italic } /* Comment.Single */
body .cs { color: #008800; font-weight: bold } /* Comment.Special */
body .gd { color: #A00000 } /* Generic.Deleted */
body .ge { font-style: italic } /* Generic.Emph */
body .gr { color: #FF0000 } /* Generic.Error */
body .gh { color: #000080; font-weight: bold } /* Generic.Heading */
body .gi { color: #00A000 } /* Generic.Inserted */
body .go { color: #888888 } /* Generic.Output */
body .gp { color: #000080; font-weight: bold } /* Generic.Prompt */
body .gs { font-weight: bold } /* Generic.Strong */
body .gu { color: #800080; font-weight: bold } /* Generic.Subheading */
body .gt { color: #0044DD } /* Generic.Traceback */
body .kc { color: #AA22FF; font-weight: bold } /* Keyword.Constant */
body .kd { color: #AA22FF; font-weight: bold } /* Keyword.Declaration */
body .kn { color: #AA22FF; font-weight: bold } /* Keyword.Namespace */
body .kp { color: #AA22FF } /* Keyword.Pseudo */
body .kr { color: #AA22FF; font-weight: bold } /* Keyword.Reserved */
body .kt { color: #00BB00; font-weight: bold } /* Keyword.Type */
body .m { color: #666666 } /* Literal.Number */
body .s { color: #BB4444 } /* Literal.String */
body .na { color: #BB4444 } /* Name.Attribute */
body .nb { color: #AA22FF } /* Name.Builtin */
body .nc { color: #0000FF } /* Name.Class */
body .no { color: #880000 } /* Name.Constant */
body .nd { color: #AA22FF } /* Name.Decorator */
body .ni { color: #999999; font-weight: bold } /* Name.Entity */
body .ne { color: #D2413A; font-weight: bold } /* Name.Exception */
body .nf { color: #00A000 } /* Name.Function */
body .nl { color: #A0A000 } /* Name.Label */
body .nn { color: #0000FF; font-weight: bold } /* Name.Namespace */
body .nt { color: #008000; font-weight: bold } /* Name.Tag */
body .nv { color: #B8860B } /* Name.Variable */
body .ow { color: #AA22FF; font-weight: bold } /* Operator.Word */
body .w { color: #bbbbbb } /* Text.Whitespace */
body .mb { color: #666666 } /* Literal.Number.Bin */
body .mf { color: #666666 } /* Literal.Number.Float */
body .mh { color: #666666 } /* Literal.Number.Hex */
body .mi { color: #666666 } /* Literal.Number.Integer */
body .mo { color: #666666 } /* Literal.Number.Oct */
body .sa { color: #BB4444 } /* Literal.String.Affix */
body .sb { color: #BB4444 } /* Literal.String.Backtick */
body .sc { color: #BB4444 } /* Literal.String.Char */
body .dl { color: #BB4444 } /* Literal.String.Delimiter */
body .sd { color: #BB4444; font-style: italic } /* Literal.String.Doc */
body .s2 { color: #BB4444 } /* Literal.String.Double */
body .se { color: #BB6622; font-weight: bold } /* Literal.String.Escape */
body .sh { color: #BB4444 } /* Literal.String.Heredoc */
body .si { color: #BB6688; font-weight: bold } /* Literal.String.Interpol */
body .sx { color: #008000 } /* Literal.String.Other */
body .sr { color: #BB6688 } /* Literal.String.Regex */
body .s1 { color: #BB4444 } /* Literal.String.Single */
body .ss { color: #B8860B } /* Literal.String.Symbol */
body .bp { color: #AA22FF } /* Name.Builtin.Pseudo */
body .fm { color: #00A000 } /* Name.Function.Magic */
body .vc { color: #B8860B } /* Name.Variable.Class */
body .vg { color: #B8860B } /* Name.Variable.Global */
body .vi { color: #B8860B } /* Name.Variable.Instance */
body .vm { color: #B8860B } /* Name.Variable.Magic */
body .il { color: #666666 } /* Literal.Number.Integer.Long */

  </https:></style>


<h2 class="anchored"></h2>

<div class="highlight"><pre><span></span><span class="k">def</span> <span class="nf">get_bollinger_actions</span><span class="p">(</span><span class="n">df</span><span class="p">,</span><span class="n">window_sz</span><span class="o">=</span><span class="mi">28</span><span class="p">,</span><span class="n">band_sz</span><span class="o">=</span><span class="mi">2</span><span class="p">):</span>
    
    <span class="c1"># Calculate Statistics</span>
    <span class="n">bollinger_data</span> <span class="o">=</span> <span class="n">calculate_bollinger</span><span class="p">(</span><span class="n">df</span><span class="p">,</span> <span class="n">tickers</span><span class="o">=</span><span class="n">df</span><span class="o">.</span><span class="n">columns</span><span class="p">,</span><span class="n">window_sz</span><span class="o">=</span><span class="n">window_sz</span><span class="p">,</span><span class="n">band_sz</span><span class="o">=</span><span class="n">band_sz</span><span class="p">)</span>
    
    <span class="c1"># Calculate Actions</span>
    <span class="n">_d</span> <span class="o">=</span> <span class="n">L</span><span class="p">()</span>
    <span class="k">for</span> <span class="n">ticker</span><span class="p">,</span><span class="n">dataframe</span> <span class="ow">in</span> <span class="n">bollinger_data</span><span class="o">.</span><span class="n">items</span><span class="p">():</span>
        <span class="n">_d</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">pd</span><span class="o">.</span><span class="n">DataFrame</span><span class="p">(</span><span class="n">np</span><span class="o">.</span><span class="n">where</span><span class="p">(</span><span class="n">dataframe</span><span class="p">[</span><span class="s1">'lower_limit'</span><span class="p">]</span> <span class="o">==</span> <span class="kc">True</span><span class="p">,</span> <span class="s1">'Short'</span><span class="p">,</span>
                           <span class="n">np</span><span class="o">.</span><span class="n">where</span><span class="p">(</span><span class="n">dataframe</span><span class="p">[</span><span class="s1">'upper_limit'</span><span class="p">]</span> <span class="o">==</span> <span class="kc">True</span><span class="p">,</span>  <span class="s1">'Buy'</span><span class="p">,</span>
                                                                 <span class="s1">''</span><span class="p">)),</span>
                   <span class="n">columns</span><span class="o">=</span><span class="p">[</span><span class="n">ticker</span><span class="p">],</span><span class="n">index</span><span class="o">=</span><span class="n">dataframe</span><span class="o">.</span><span class="n">index</span><span class="p">))</span>
    <span class="n">bollinger_actions</span> <span class="o">=</span> <span class="n">pd</span><span class="o">.</span><span class="n">concat</span><span class="p">(</span><span class="n">_d</span><span class="p">,</span><span class="n">axis</span><span class="o">=</span><span class="mi">1</span><span class="p">)</span>
    
    <span class="c1"># Because we use close price, we can't make the trade action until the following day</span>
    <span class="n">bollinger_actions</span><span class="o">.</span><span class="n">index</span> <span class="o">=</span> <span class="n">bollinger_actions</span><span class="o">.</span><span class="n">index</span> <span class="o">+</span> <span class="n">timedelta</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span>
    
    <span class="k">return</span> <span class="n">bollinger_actions</span><span class="p">[</span><span class="n">window_sz</span><span class="p">:]</span>
</pre></div>


</div>
</div>
<div id="cell-60" class="cell">
<div class="sourceCode cell-code" id="cb27" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb27-1">actions <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> get_bollinger_actions(train.iloc[:,:<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>],window_sz<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">28</span>,band_sz<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>)</span>
<span id="cb27-2">actions.head(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>)</span></code></pre></div>
<div class="cell-output cell-output-display">
<div>


<table class="dataframe caption-top table table-sm table-striped small" data-quarto-postprocess="true" data-border="1">
<thead>
<tr class="header">
<th data-quarto-table-cell-role="th"></th>
<th data-quarto-table-cell-role="th">A</th>
<th data-quarto-table-cell-role="th">AAL</th>
<th data-quarto-table-cell-role="th">AAP</th>
<th data-quarto-table-cell-role="th">AAPL</th>
<th data-quarto-table-cell-role="th">ABBV</th>
</tr>
<tr class="odd">
<th data-quarto-table-cell-role="th">date</th>
<th data-quarto-table-cell-role="th"></th>
<th data-quarto-table-cell-role="th"></th>
<th data-quarto-table-cell-role="th"></th>
<th data-quarto-table-cell-role="th"></th>
<th data-quarto-table-cell-role="th"></th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td data-quarto-table-cell-role="th">2013-08-10</td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">2013-08-13</td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">2013-08-14</td>
<td></td>
<td>Short</td>
<td>Buy</td>
<td>Buy</td>
<td></td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">2013-08-15</td>
<td></td>
<td>Short</td>
<td></td>
<td>Buy</td>
<td></td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">2013-08-16</td>
<td></td>
<td>Short</td>
<td></td>
<td>Buy</td>
<td></td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">2013-08-17</td>
<td></td>
<td>Short</td>
<td>Short</td>
<td>Buy</td>
<td>Short</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">2013-08-20</td>
<td></td>
<td>Short</td>
<td>Short</td>
<td>Buy</td>
<td></td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">2013-08-21</td>
<td></td>
<td></td>
<td></td>
<td></td>
<td>Short</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">2013-08-22</td>
<td></td>
<td></td>
<td></td>
<td></td>
<td>Short</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">2013-08-23</td>
<td>Buy</td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
</tbody>
</table>

</div>
</div>
</div>
</section>
</section>
<section id="momentum-conclusion" class="level1" data-number="7">
<h1 data-number="7"><span class="header-section-number">7</span> Momentum Conclusion</h1>
<p>In this post we took a simple idea of using recent stock price changes to define a trading strategy. One key thing I hope you took is even with simple concepts there are many ways that it can be approached - we created three. You <strong>must</strong> be able to think deeply about what your options are and experiment with different approaches and understand what are all the things in these approach you can control or tweak. You <strong>must</strong> be able to take ideas and translate them to code.</p>
<p>There are many more trading strategies that could be done using the same concepts in this post. I encourage you to come up with one and implement it yourself. That will be more difficult than reading the post was, but you will also learn more by doing that. Once you do that write an explanation of why it might work, what you could tweak, and post share it. We’d love to see what you built!</p>
<p>Learn by building + write to learn = success</p>
</section>
<section id="whats-next" class="level1" data-number="8">
<h1 data-number="8"><span class="header-section-number">8</span> What’s next</h1>
<p>In <a href="../../posts/Statistics/BasicTesting.html">the next post</a> we will introduce the most important and challenging topic in any predictive or modeling discipline, testing. Effective testing is challenging and important because we need to be as confident as possible that the strategy we have will work “in the wild” just like we think it will.</p>
<p>There are many horror stories of models being put into production and because they were not properly tested they failed and lost the company tons of money. When the tests performed do not provide an accurate view of how the model will perform in production, you’ve got a big problem. Understanding testing is crucial to a quant to minimize these unexpected catastrophic failures.</p>
</section>
<section id="homework-for-further-learnings" class="level1" data-number="9">
<h1 data-number="9"><span class="header-section-number">9</span> Homework for Further Learnings</h1>
<p>Entry-Level 1. Run the models in this post with different parameters. How does this effect the number of actions taken? 1. Create a <code>get_momentum_regr_actions</code> that is not (or less effected) by scale. For example you could combine the slope concept from <code>get_momentum_regr_actions</code> with the percent change concept from <code>get_momentum_actions</code>.</p>
<p>Mid-Level 1. The models in this post gave actions to take to open a position (ie buy/short). Come up with two ideas for how we could determine when to close the position. If we bought a stock we must eventually close the position by selling it. Code them up! 1. Decisions are made in code all the time and are not always explicitly highlighted as a design choice. For example, in <code>get_momentum_actions</code> we used a threshold of 0.08. What would the effect be if it were increased vs decreased? How do you think that would impact your strategy? Find 3 more design choices and explain the trade-offs.</p>


</section>

 ]]></description>
  <category>Time Series</category>
  <guid>https://isaac-flath.tech/posts/TimeSeries/SimpleTimeSeries.html</guid>
  <pubDate>Fri, 05 Aug 2022 04:00:00 GMT</pubDate>
  <media:content url="https://isaac-flath.tech/posts/_TopicImages/TimeSeries.jpg" medium="image" type="image/jpeg"/>
</item>
<item>
  <title>Matrix Multiplication</title>
  <dc:creator>Isaac Flath</dc:creator>
  <link>https://isaac-flath.tech/posts/APL/MatrixMultiplication.html</link>
  <description><![CDATA[ 





<section id="introduction" class="level1" data-number="1">
<h1 data-number="1"><span class="header-section-number">1</span> Introduction</h1>
<p>I am working through a couple of linear algebra books/courses as I write this. All content in here will be heavily inspired by those resources:</p>
<ul>
<li>Gilbert Strang. 18.06 Linear Algebra. Spring 2010. Massachusetts Institute of Technology: MIT OpenCourseWare, https://ocw.mit.edu. License: Creative Commons BY-NC-SA.</li>
<li>Applied Linear Algebra with A. P. L. by Garry Helzer (Author)</li>
</ul>
<p><strong>I have 2 main goals:</strong> + Learn Dyalog APL: APL works very differently than other languages I have done. By learning it I will learn another way of thinking and approaching problems. By having more ways to think and approach problems I become smarter. I want to be smarter. + Improve my mathematical foundation</p>
<p>To do this I plan to go through math material and courses in Dyalog APL. In the beginning I will be reviewing basic math while learning APL, but eventually I will get to content where I am both learning APL and math at the same time. This is where I will document what I do.</p>
<p><strong>Where to learn APL</strong></p>
<p>Check out the <a href="https://forums.fast.ai/t/apl-array-programming/97188">fastai apl study group</a>, accompanying <a href="https://www.youtube.com/playlist?list=PLfYUBJiXbdtSgU6S_3l6pX-4hQYKNJZFU">videos</a>, and <a href="https://github.com/Isaac-Flath/anki/">anki decks</a> if you want to learn APL .</p>
</section>
<section id="vector-name-conventions" class="level1" data-number="2">
<h1 data-number="2"><span class="header-section-number">2</span> Vector Name Conventions</h1>
<p>For this (and other) posts I will follow the naming conventions in <a href="https://aplcart.info/">APL cart</a> to keep things consistent with the APL community. For convenience here they are:</p>
<ul>
<li>X, Y, Z: any type array </li>
<li>M, N: numeric array </li>
<li>I, J: integer array </li>
<li>A, B: Boolean array </li>
<li>C, D: character array </li>
<li>f, g, h: function </li>
<li>ax: bracket axis </li>
<li>s: scalar </li>
<li>v: vector </li>
<li>m: matrix</li>
</ul>
<p>If you find it hard to keep track of - I would recommend making a short <a href="https://apps.ankiweb.net/">anki</a> deck to remember them.</p>
</section>
<section id="matrix-multiplication-matrix-vector" class="level1" data-number="3">
<h1 data-number="3"><span class="header-section-number">3</span> Matrix Multiplication (<code>matrix × vector</code>)</h1>
<p>Let’s start with a matrix and a vector and multiply them together. First, we define the our variables.</p>
<div id="cell-5" class="cell">
<pre class="apl cell-code"><code>⎕ ← M ← 2 2 ⍴ 2 5 1 3
⎕ ← N ← 2 1 ⍴ 1 2</code></pre>
<div class="cell-output cell-output-display">
<span style="white-space:pre; font-family: monospace">┌→──┐
↓2 5│
│1 3│
└~──┘
</span>
</div>
<div class="cell-output cell-output-display">
<span style="white-space:pre; font-family: monospace">┌→┐
↓1│
│2│
└~┘
</span>
</div>
</div>
<section id="manual-calculation" class="level2" data-number="3.1">
<h2 data-number="3.1" class="anchored" data-anchor-id="manual-calculation"><span class="header-section-number">3.1</span> Manual Calculation</h2>
<p>We take the rows of <code>N</code> times the columns of <code>M</code> to do a linear combination to do matrix multiplication.</p>
<p><img src="https://latex.codecogs.com/png.latex?1%5Cbegin%7Bbmatrix%7D2%5C%5C1%5Cend%7Bbmatrix%7D%20+%202%5Cbegin%7Bbmatrix%7D5%5C%5C3%5Cend%7Bbmatrix%7D"></p>
<p>We can do this exactly in APL and see our answer.</p>
<div id="cell-8" class="cell">
<pre class="apl cell-code"><code>⎕ ← (col1 ← M[;1] × N[1;]) + (col2 ← M[;2] × N[2;])</code></pre>
<div class="cell-output cell-output-display">
<span style="white-space:pre; font-family: monospace">┌→───┐
│12 7│
└~───┘
</span>
</div>
</div>
</section>
<section id="apl-calculation" class="level2" data-number="3.2">
<h2 data-number="3.2" class="anchored" data-anchor-id="apl-calculation"><span class="header-section-number">3.2</span> APL Calculation</h2>
<section id="dot" class="level3" data-number="3.2.1">
<h3 data-number="3.2.1" class="anchored" data-anchor-id="dot"><span class="header-section-number">3.2.1</span> Dot</h3>
<p>in APL we would normally not write is all out but would write it using the dot (<code>.</code>) function. Let’s figure out what that is and how it works.</p>
<p>The <code>.</code> applies the operators the surround it (<code>⍺⍺</code> and <code>⍵⍵</code>) in a specific way and order called an inner product.</p>
<p>In our matrix multiplication problem it looks like this. <img src="https://latex.codecogs.com/png.latex?%5Cbegin%7Bbmatrix%7D(1%E2%8D%B5%E2%8D%B52)%E2%8D%BA%E2%8D%BA(2%E2%8D%B5%E2%8D%B55)%5C%5C(1%E2%8D%B5%E2%8D%B51)%E2%8D%BA%E2%8D%BA(2%E2%8D%B5%E2%8D%B53)%5Cend%7Bbmatrix%7D"></p>
<p>Let’s walk through this in our matrix multiplication example above one operator at a time to understand it a bit better</p>
</section>
<section id="apply-the-argument" class="level3" data-number="3.2.2">
<h3 data-number="3.2.2" class="anchored" data-anchor-id="apply-the-argument"><span class="header-section-number">3.2.2</span> Apply the <code>⍵⍵</code> argument</h3>
<p>I like to visualize the first step like this:</p>
<p><img src="https://latex.codecogs.com/png.latex?%5Cbegin%7Bbmatrix%7D%E2%8D%B5%E2%8D%B5&amp;&amp;1%5C%5C&amp;%E2%8D%B5%E2%8D%B5&amp;2%5C%5C2&amp;5&amp;%5Cend%7Bbmatrix%7D"></p>
<p><img src="https://latex.codecogs.com/png.latex?%5Cbegin%7Bbmatrix%7D%E2%8D%B5%E2%8D%B5&amp;&amp;1%5C%5C&amp;%E2%8D%B5%E2%8D%B5&amp;2%5C%5C1&amp;3&amp;%5Cend%7Bbmatrix%7D"></p>
<p>We first apply whatever the <code>⍵⍵</code> parameter is and combine elements. Just as we did above manually we need to do multiplication here so we know the <code>⍵⍵</code> parameter must be <code>×</code>. These calculation are:</p>
<p>Matrix 1:</p>
<ul>
<li><code>1 × 2 = 2</code></li>
<li><code>2 × 5 = 10</code></li>
</ul>
<p>Matrix 2:</p>
<ul>
<li><code>1 × 1 = 1</code></li>
<li><code>2 × 3 = 6</code></li>
</ul>
<p>So far we have <code>⍺⍺.×</code>. We can show the result of our calculations above in matrices.</p>
<p><img src="https://latex.codecogs.com/png.latex?%5Cbegin%7Bbmatrix%7D2&amp;%E2%8D%BA%E2%8D%BA%5C%5C&amp;10%5Cend%7Bbmatrix%7D"></p>
<p><img src="https://latex.codecogs.com/png.latex?%5Cbegin%7Bbmatrix%7D1&amp;%E2%8D%BA%E2%8D%BA%5C%5C&amp;6%5Cend%7Bbmatrix%7D"></p>
</section>
<section id="apply-the-argument-1" class="level3" data-number="3.2.3">
<h3 data-number="3.2.3" class="anchored" data-anchor-id="apply-the-argument-1"><span class="header-section-number">3.2.3</span> Apply the ⍺⍺ argument</h3>
<p>The next thing the <code>.</code> operator does is combine all the numbers in each of step 1 resulting matrices using <code>⍺⍺</code>. To get the linear combination we did above we need to add the numbers in each matrix, so the <code>⍺⍺</code> operator must be <code>+</code>.</p>
<p>If we do that addition:</p>
<ul>
<li><p>Matrix 1: <code>2 + 10 = 12</code></p></li>
<li><p>Matrix 2: <code>1 + 6 = 7</code></p></li>
</ul>
<p>Leaving us with our answer of <img src="https://latex.codecogs.com/png.latex?%5Cbegin%7Bbmatrix%7D12%5C%5C7%5Cend%7Bbmatrix%7D"></p>
<p>So to do matrix multiplication we simply need to use:</p>
<div id="cell-16" class="cell">
<pre class="apl cell-code"><code>M +.× N</code></pre>
<div class="cell-output cell-output-display">
<span style="white-space:pre; font-family: monospace">┌→────┐
↓17 24│
│10 14│
└~────┘
</span>
</div>
</div>
</section>
<section id="dot-is-flexible" class="level3" data-number="3.2.4">
<h3 data-number="3.2.4" class="anchored" data-anchor-id="dot-is-flexible"><span class="header-section-number">3.2.4</span> Dot is flexible</h3>
<p>This was just 1 example of using the <code>.</code> operator. We used <code>+</code> as <code>⍺⍺</code> and <code>×</code> as <code>⍵⍵</code> to fit what we needed for this problem.</p>
<p>Now that we understand that, we can flip our operators and look at <code>×.+</code> instead of <code>+.×</code>. We can also do any number of other operators to do lots of different matrix operations. Take a look at the examples below and try calculating them by hand to see what you get!</p>
<div id="cell-20" class="cell">
<pre class="apl cell-code"><code>⍝ using addition.multiplication (normal matrix multiplication) 
M+.×N </code></pre>
<div class="cell-output cell-output-display">
<span style="white-space:pre; font-family: monospace">┌→─┐
↓12│
│ 7│
└~─┘
</span>
</div>
</div>
<div id="cell-21" class="cell">
<pre class="apl cell-code"><code>⍝ using multiplication.addition
M×.+N </code></pre>
<div class="cell-output cell-output-display">
<span style="white-space:pre; font-family: monospace">┌→─┐
↓21│
│10│
└~─┘
</span>
</div>
</div>
<div id="cell-22" class="cell">
<pre class="apl cell-code"><code>⍝ using max.min
M⌈.⌊N</code></pre>
<div class="cell-output cell-output-display">
<span style="white-space:pre; font-family: monospace">┌→┐
↓2│
│2│
└~┘
</span>
</div>
</div>
<div id="cell-23" class="cell">
<pre class="apl cell-code"><code>⍝ using addition.subtraction
M-.+N</code></pre>
<div class="cell-output cell-output-display">
<span style="white-space:pre; font-family: monospace">┌→─┐
↓¯4│
│¯3│
└~─┘
</span>
</div>
</div>
<div id="cell-24" class="cell">
<pre class="apl cell-code"><code>⍝ using exponent.division
M*.÷N</code></pre>
<div class="cell-output cell-output-display">
<span style="white-space:pre; font-family: monospace">┌→──────────┐
↓5.656854249│
│1          │
└~──────────┘
</span>
</div>
</div>
<div id="cell-25" class="cell">
<pre class="apl cell-code"><code>⍝ using factorial.natural_log
M!.⍟N</code></pre>
<div class="cell-output cell-output-display">
<span style="white-space:pre; font-family: monospace">┌→───────────┐
↓1           │
│0.6309297536│
└~───────────┘
</span>
</div>
</div>
</section>
</section>
</section>
<section id="matrix-multiplication-matrix-matrix" class="level1" data-number="4">
<h1 data-number="4"><span class="header-section-number">4</span> Matrix Multiplication (<code>matrix × matrix</code>)</h1>
<p>As you might imagine we can do a variety of shapes. Because we are simply applying our addition and multiplication operators, any shapes where those operators work works. Let’s go through another example, this time with two 2x2 matrices.</p>
<p>First we need to define our variables we want to multiply together.</p>
<div id="cell-28" class="cell">
<pre class="apl cell-code"><code>⎕ ← M ← 2 2 ⍴ 2 5 1 3
⎕ ← N ← 2 2 ⍴ 1 2 3 4</code></pre>
<div class="cell-output cell-output-display">
<span style="white-space:pre; font-family: monospace">┌→──┐
↓2 5│
│1 3│
└~──┘
</span>
</div>
<div class="cell-output cell-output-display">
<span style="white-space:pre; font-family: monospace">┌→──┐
↓1 2│
│3 4│
└~──┘
</span>
</div>
</div>
<section id="manual-calculation-1" class="level3" data-number="4.0.1">
<h3 data-number="4.0.1" class="anchored" data-anchor-id="manual-calculation-1"><span class="header-section-number">4.0.1</span> Manual Calculation</h3>
<p>We learned how to do matrix multiplication earlier which was just taking linear combinations of rows and columns. Let’s try to do that same thing here as well. In our previous example we were using all scalars because 1 row of <code>N</code> was a scalar, but let’s just follow our rule and put a vector in and see what happens.</p>
<p><img src="https://latex.codecogs.com/png.latex?%5Cbegin%7Bbmatrix%7D(%5B1,2%5D%E2%8D%B5%E2%8D%B52)%E2%8D%BA%E2%8D%BA(%5B3,4%5D%E2%8D%B5%E2%8D%B55)%5C%5C(%5B1,2%5D%E2%8D%B5%E2%8D%B51)%E2%8D%BA%E2%8D%BA(%5B3,4%5D%E2%8D%B5%E2%8D%B53)%5Cend%7Bbmatrix%7D"></p>
<p>As you can see this matrix multiplication is still just a linear combination taking the rows of N × the column of M. I believe it is most intuitive to think of matrix multiplication as a linear combination of the columns of M.</p>
<blockquote class="blockquote">
<p>Note: There are many other ways to define functions to get the same number (such as using looping or recursion). The most intuitive way to think about something is not necessarily the most efficient way to program a function to tell a computer to calculate the number (which will depend on what programming language you are using).</p>
</blockquote>
<div id="cell-33" class="cell">
<pre class="apl cell-code"><code>⎕←ans ← ((1 2 × 2) + (3 4 × 5)) ((1 2 × 1) + (3 4 × 3))</code></pre>
<div class="cell-output cell-output-display">
<span style="white-space:pre; font-family: monospace">┌→────────────────┐
│ ┌→────┐ ┌→────┐ │
│ │17 24│ │10 14│ │
│ └~────┘ └~────┘ │
└∊────────────────┘
</span>
</div>
</div>
<p>To make it equivilant to the apl operator we need to reshape this array of arrays into a 2 × 2</p>
<div id="cell-35" class="cell">
<pre class="apl cell-code"><code>⎕ ← ans ← 2 2 ⍴ ∊ ans</code></pre>
<div class="cell-output cell-output-display">
<span style="white-space:pre; font-family: monospace">┌→────┐
↓17 24│
│10 14│
└~────┘
</span>
</div>
</div>
<p>Let’s use the matrix multiplication in APL to prove that it’s really getting the same answer. We can use <code>≡</code>to test for equality</p>
<div id="cell-37" class="cell">
<pre class="apl cell-code"><code>ans ≡ M +.× N</code></pre>
<div class="cell-output cell-output-display">
<span style="white-space:pre; font-family: monospace"> 
1
 
</span>
</div>
</div>
<p>We can also see this in the same matrix format we did in our first example of a matrix and a vector, which is doing the same thing but I think illustrates it clearer. Let’s start with our problem again:</p>
<p><img src="https://latex.codecogs.com/png.latex?%5Cbegin%7Bbmatrix%7D2&amp;5%5C%5C1&amp;3%5Cend%7Bbmatrix%7D"> <img src="https://latex.codecogs.com/png.latex?%5Cbegin%7Bbmatrix%7D1&amp;2%5C%5C3&amp;4%5Cend%7Bbmatrix%7D"></p>
</section>
<section id="apply-the-argument-2" class="level3" data-number="4.0.2">
<h3 data-number="4.0.2" class="anchored" data-anchor-id="apply-the-argument-2"><span class="header-section-number">4.0.2</span> Apply the <code>⍵⍵</code> argument</h3>
<p><img src="https://latex.codecogs.com/png.latex?%5Cbegin%7Bbmatrix%7D%E2%8D%B5%E2%8D%B5&amp;&amp;%5B1,2%5D%5C%5C&amp;%E2%8D%B5%E2%8D%B5&amp;%5B3,4%5D%5C%5C2&amp;5&amp;%5Cend%7Bbmatrix%7D"></p>
<p><img src="https://latex.codecogs.com/png.latex?%5Cbegin%7Bbmatrix%7D%E2%8D%B5%E2%8D%B5&amp;&amp;%5B1,2%5D%5C%5C&amp;%E2%8D%B5%E2%8D%B5&amp;%5B3,4%5D%5C%5C1&amp;3&amp;%5Cend%7Bbmatrix%7D"></p>
<p>Since <code>⍵⍵</code> is <code>×</code> we do that first and get to our next step</p>
</section>
<section id="apply-the-argument-3" class="level3" data-number="4.0.3">
<h3 data-number="4.0.3" class="anchored" data-anchor-id="apply-the-argument-3"><span class="header-section-number">4.0.3</span> Apply the ⍺⍺ argument</h3>
<p><img src="https://latex.codecogs.com/png.latex?%5Cbegin%7Bbmatrix%7D%5B2,4%5D&amp;%E2%8D%BA%E2%8D%BA%5C%5C&amp;%5B15,20%5D%5Cend%7Bbmatrix%7D"></p>
<p><img src="https://latex.codecogs.com/png.latex?%5Cbegin%7Bbmatrix%7D%5B1,2%5D&amp;%E2%8D%BA%E2%8D%BA%5C%5C&amp;%5B9,12%5D%5Cend%7Bbmatrix%7D"></p>
<p><code>⍺⍺</code> is <code>+</code> so we can do the addition to end with</p>
<p><img src="https://latex.codecogs.com/png.latex?%5Cbegin%7Bbmatrix%7D17&amp;24%5Cend%7Bbmatrix%7D"></p>
<p><img src="https://latex.codecogs.com/png.latex?%5Cbegin%7Bbmatrix%7D10&amp;14%5Cend%7Bbmatrix%7D"></p>
<p>Which again matches the inner product that APL does.</p>
<div id="cell-45" class="cell">
<pre class="apl cell-code"><code>M +.× N</code></pre>
<div class="cell-output cell-output-display">
<span style="white-space:pre; font-family: monospace">┌→────┐
↓17 24│
│10 14│
└~────┘
</span>
</div>
</div>


</section>
</section>

 ]]></description>
  <category>APL</category>
  <category>Linear Algebra</category>
  <guid>https://isaac-flath.tech/posts/APL/MatrixMultiplication.html</guid>
  <pubDate>Sun, 10 Jul 2022 04:00:00 GMT</pubDate>
  <media:content url="https://isaac-flath.tech/posts/_TopicImages/APL.jpg" medium="image" type="image/jpeg"/>
</item>
<item>
  <title>Numerical Linear Algebra Part 1</title>
  <dc:creator>Isaac Flath</dc:creator>
  <link>https://isaac-flath.tech/posts/APL/Fastai_Numerical_Linear_Algebra_1.html</link>
  <description><![CDATA[ 





<p>This notebook is a copy of a notebook from the fast.ai fast.ai Numerical linear algebra course. I have modified it to use APL as a learning experience for myself.</p>
<p><strong><a href="https://nbviewer.org/github/fastai/numerical-linear-algebra/blob/master/nbs/1.%20Why%20are%20we%20here.ipynb">Check out the original notebook here</a></strong></p>
<p>I do not have any business affiliation with fast.ai, and <strong>this notebook is not an official fast.ai notebook.</strong></p>
<p>You can read an overview of this Numerical Linear Algebra course in <a href="http://www.fast.ai/2017/07/17/num-lin-alg/">this blog post</a>. The course was originally taught in the <a href="https://www.usfca.edu/arts-sciences/graduate-programs/analytics">University of San Francisco MS in Analytics</a> graduate program. Course lecture videos are <a href="https://www.youtube.com/playlist?list=PLtmWHNX-gukIc92m1K0P6bIOnZb-mg0hY">available on YouTube</a> (note that the notebook numbers and video numbers do not line up, since some notebooks took longer than 1 video to cover).</p>
<p>You can ask questions about the course on <a href="http://forums.fast.ai/c/lin-alg">our fast.ai forums</a>.</p>
<section id="why-are-we-here" class="level1" data-number="1">
<h1 data-number="1"><span class="header-section-number">1</span> 1. Why are we here?</h1>
<p><strong>Note: Future lessons have a lot more code than this one</strong></p>
<section id="why-study-numerical-linear-algebra" class="level2" data-number="1.1">
<h2 data-number="1.1" class="anchored" data-anchor-id="why-study-numerical-linear-algebra"><span class="header-section-number">1.1</span> Why study Numerical Linear Algebra?</h2>
<p><strong>Key Question of this course</strong>: How can we do matrix computations with acceptable speed and acceptable accuracy?</p>
<p>A list of the <a href="http://www.cs.fsu.edu/~lacher/courses/COT4401/notes/cise_v2_i1/index.html">Top 10 Algorithms</a> of science and engineering during the 20th century includes: the <strong>matrix decompositions</strong> approach to linear algebra. It also includes the QR algorithm, which we’ll cover, and Krylov iterative methods which we’ll see an example of. (See here for <a href="https://nickhigham.wordpress.com/2016/03/29/the-top-10-algorithms-in-applied-mathematics/">another take</a>)</p>
<p><img src="https://github.com/fastai/numerical-linear-algebra/raw/master/nbs/images/top10.png" alt="" style="width: 50%"> (source: <a href="http://www.cs.fsu.edu/~lacher/courses/COT4401/notes/cise_v2_i1/guest.pdf">Top 10 Algorithms</a>)</p>
<p>There are 4 things to keep in mind when choosing or designing an algorithm for matrix computations: - Memory Use - Speed - Accuracy - Scalability/Parallelization</p>
<p>Often there will be trade-offs between these categories.</p>
<section id="motivation" class="level3" data-number="1.1.1">
<h3 data-number="1.1.1" class="anchored" data-anchor-id="motivation"><span class="header-section-number">1.1.1</span> Motivation</h3>
<p>Matrices are everywhere– anything that can be put in an Excel spreadsheet is a matrix, and language and pictures can be represented as matrices as well. Knowing what options there are for matrix algorithms, and how to navigate compromises, can make enormous differences to your solutions. For instance, an approximate matrix computation can often be thousands of times faster than an exact one.</p>
<p>It’s not just about knowing the contents of existing libraries, but knowing how they work too. That’s because often you can make variations to an algorithm that aren’t supported by your library, giving you the performance or accuracy that you need. In addition, this field is moving very quickly at the moment, particularly in areas related to <strong>deep learning</strong>, <strong>recommendation systems</strong>, <strong>approximate algorithms</strong>, and <strong>graph analytics</strong>, so you’ll often find there’s recent results that could make big differences in your project, but aren’t in your library.</p>
<p>Knowing how the algorithms really work helps to both debug and accelerate your solution.</p>
</section>
</section>
<section id="matrix-computations" class="level2" data-number="1.2">
<h2 data-number="1.2" class="anchored" data-anchor-id="matrix-computations"><span class="header-section-number">1.2</span> Matrix Computations</h2>
<p>There are two key types of matrix computation, which get combined in many different ways. These are: - Matrix and tensor products - Matrix decompositions</p>
<p>So basically we’re going to be combining matrices, and pulling them apart again!</p>
<section id="matrix-and-tensor-products" class="level3" data-number="1.2.1">
<h3 data-number="1.2.1" class="anchored" data-anchor-id="matrix-and-tensor-products"><span class="header-section-number">1.2.1</span> Matrix and Tensor Products</h3>
<section id="matrix-vector-products" class="level4" data-number="1.2.1.1">
<h4 data-number="1.2.1.1" class="anchored" data-anchor-id="matrix-vector-products"><span class="header-section-number">1.2.1.1</span> Matrix-Vector Products:</h4>
<p>The matrix below gives the probabilities of moving from 1 health state to another in 1 year. If the current health states for a group are: - 85% asymptomatic - 10% symptomatic - 5% AIDS - 0% death</p>
<p>what will be the % in each health state in 1 year?</p>
<p><img src="https://github.com/fastai/numerical-linear-algebra/raw/master/nbs/images/markov_health.jpg" alt="floating point" style="width: 80%">(Source: <a href="https://www.youtube.com/watch?v=0Il-y_WLTo4">Concepts of Markov Chains</a>)</p>
</section>
<section id="answer" class="level4" data-number="1.2.1.2">
<h4 data-number="1.2.1.2" class="anchored" data-anchor-id="answer"><span class="header-section-number">1.2.1.2</span> Answer</h4>
<section id="set-up-data" class="level5" data-number="1.2.1.2.1">
<h5 data-number="1.2.1.2.1" class="anchored" data-anchor-id="set-up-data"><span class="header-section-number">1.2.1.2.1</span> Set up Data</h5>
<p>Create category names vector for display purposes</p>
<div id="cell-20" class="cell">
<pre class="apl cell-code"><code>]box on -style=max</code></pre>
<div class="cell-output cell-output-display">
<span style="white-space:pre; font-family: monospace">┌→────────────────┐
│Was ON -style=max│
└─────────────────┘
</span>
</div>
</div>
<div id="cell-21" class="cell">
<pre class="apl cell-code"><code>Names←'Asymptomatic' 'Symptomatic' 'Aids'  'Death'</code></pre>
</div>
<p>Create current health states array</p>
<div id="cell-23" class="cell">
<pre class="apl cell-code"><code>Names⍪Start←1 4⍴.85 .1 .05 0</code></pre>
<div class="cell-output cell-output-display">
<span style="white-space:pre; font-family: monospace">┌→────────────────────────────────────────────┐
↓ ┌→───────────┐ ┌→──────────┐ ┌→───┐ ┌→────┐ │
│ │Asymptomatic│ │Symptomatic│ │Aids│ │Death│ │
│ └────────────┘ └───────────┘ └────┘ └─────┘ │
│                                             │
│ 0.85           0.1           0.05   0       │
│                                             │
└∊────────────────────────────────────────────┘
</span>
</div>
</div>
<p>Create transition table/stochastic matrix</p>
<div id="cell-25" class="cell">
<pre class="apl cell-code"><code>Transitions←4 4⍴.9 .07 .02 .01 0 .93 .05 .02 0 0 .85 .15 0 0 0 1
((⊂'States')⍪Names)⍪(Names,Transitions)</code></pre>
<div class="cell-output cell-output-display">
<span style="white-space:pre; font-family: monospace">┌→───────────────────────────────────────────────────────────┐
↓ ┌→─────┐       ┌→───────────┐ ┌→──────────┐ ┌→───┐ ┌→────┐ │
│ │States│       │Asymptomatic│ │Symptomatic│ │Aids│ │Death│ │
│ └──────┘       └────────────┘ └───────────┘ └────┘ └─────┘ │
│ ┌→───────────┐                                             │
│ │Asymptomatic│ 0.9            0.07          0.02   0.01    │
│ └────────────┘                                             │
│ ┌→──────────┐                                              │
│ │Symptomatic│  0              0.93          0.05   0.02    │
│ └───────────┘                                              │
│ ┌→───┐                                                     │
│ │Aids│         0              0             0.85   0.15    │
│ └────┘                                                     │
│ ┌→────┐                                                    │
│ │Death│        0              0             0      1       │
│ └─────┘                                                    │
└∊───────────────────────────────────────────────────────────┘
</span>
</div>
</div>
</section>
<section id="answer-calculation" class="level5" data-number="1.2.1.2.2">
<h5 data-number="1.2.1.2.2" class="anchored" data-anchor-id="answer-calculation"><span class="header-section-number">1.2.1.2.2</span> Answer Calculation</h5>
<p>Multiply together to get ending health states</p>
<div id="cell-28" class="cell">
<pre class="apl cell-code"><code>Names⍪End←Start+.×Transitions</code></pre>
<div class="cell-output cell-output-display">
<span style="white-space:pre; font-family: monospace">┌→────────────────────────────────────────────┐
↓ ┌→───────────┐ ┌→──────────┐ ┌→───┐ ┌→────┐ │
│ │Asymptomatic│ │Symptomatic│ │Aids│ │Death│ │
│ └────────────┘ └───────────┘ └────┘ └─────┘ │
│                                             │
│ 0.765          0.1525        0.0645 0.018   │
│                                             │
└∊────────────────────────────────────────────┘
</span>
</div>
</div>
</section>
</section>
<section id="matrix-matrix-products" class="level4" data-number="1.2.1.3">
<h4 data-number="1.2.1.3" class="anchored" data-anchor-id="matrix-matrix-products"><span class="header-section-number">1.2.1.3</span> Matrix-Matrix Products</h4>
<p><img src="https://github.com/fastai/numerical-linear-algebra/raw/master/nbs/images/shop.png" alt="floating point" style="width: 100%">(Source: <a href="https://www.mff.cuni.cz/veda/konference/wds/proc/pdf06/WDS06_106_m8_Ulrychova.pdf">Several Simple Real-world Applications of Linear Algebra Tools</a>)</p>
</section>
<section id="answer-1" class="level4" data-number="1.2.1.4">
<h4 data-number="1.2.1.4" class="anchored" data-anchor-id="answer-1"><span class="header-section-number">1.2.1.4</span> Answer</h4>
<section id="set-up-data-1" class="level5" data-number="1.2.1.4.1">
<h5 data-number="1.2.1.4.1" class="anchored" data-anchor-id="set-up-data-1"><span class="header-section-number">1.2.1.4.1</span> Set up Data</h5>
<p>Lets define the names of all the stuff we are working with for display purposes</p>
<div id="cell-34" class="cell">
<pre class="apl cell-code"><code>items←'roll' 'bun' 'cake' 'bread'
shops←'S1' 'S2'
people←'P1' 'P2' 'P3'</code></pre>
</div>
<p>Demanded quantity of foodstuff</p>
<div id="cell-36" class="cell">
<pre class="apl cell-code"><code>Demanded←3 4⍴6 5 3 1 3 6 2 2 3 4 3 1
((⊂'')⍪items)⍪(people,Demanded)</code></pre>
<div class="cell-output cell-output-display">
<span style="white-space:pre; font-family: monospace">┌→─────────────────────────────────┐
↓ ┌⊖┐  ┌→───┐ ┌→──┐ ┌→───┐ ┌→────┐ │
│ │ │  │roll│ │bun│ │cake│ │bread│ │
│ └─┘  └────┘ └───┘ └────┘ └─────┘ │
│ ┌→─┐                             │
│ │P1│ 6      5     3      1       │
│ └──┘                             │
│ ┌→─┐                             │
│ │P2│ 3      6     2      2       │
│ └──┘                             │
│ ┌→─┐                             │
│ │P3│ 3      4     3      1       │
│ └──┘                             │
└∊─────────────────────────────────┘
</span>
</div>
</div>
<div id="cell-37" class="cell">
<pre class="apl cell-code"><code>Prices←4 2⍴1.5 1 2 2.5 5 4.5 16 17
((⊂'')⍪shops)⍪(items,Prices)</code></pre>
<div class="cell-output cell-output-display">
<span style="white-space:pre; font-family: monospace">┌→──────────────────┐
↓ ┌⊖┐     ┌→─┐ ┌→─┐ │
│ │ │     │S1│ │S2│ │
│ └─┘     └──┘ └──┘ │
│ ┌→───┐            │
│ │roll│  1.5  1    │
│ └────┘            │
│ ┌→──┐             │
│ │bun│   2    2.5  │
│ └───┘             │
│ ┌→───┐            │
│ │cake│  5    4.5  │
│ └────┘            │
│ ┌→────┐           │
│ │bread│ 16   17   │
│ └─────┘           │
└∊──────────────────┘
</span>
</div>
</div>
</section>
<section id="answer-calculation-1" class="level5" data-number="1.2.1.4.2">
<h5 data-number="1.2.1.4.2" class="anchored" data-anchor-id="answer-calculation-1"><span class="header-section-number">1.2.1.4.2</span> Answer Calculation</h5>
<p>We can calculate the price for each shop for each person with matrix multiplication</p>
<div id="cell-40" class="cell">
<pre class="apl cell-code"><code>Ans←Demanded+.×Prices
((⊂'')⍪shops)⍪(people,Ans) ⍝ display</code></pre>
<div class="cell-output cell-output-display">
<span style="white-space:pre; font-family: monospace">┌→───────────────┐
↓ ┌⊖┐  ┌→─┐ ┌→─┐ │
│ │ │  │S1│ │S2│ │
│ └─┘  └──┘ └──┘ │
│ ┌→─┐           │
│ │P1│ 50   49   │
│ └──┘           │
│ ┌→─┐           │
│ │P2│ 58.5 61   │
│ └──┘           │
│ ┌→─┐           │
│ │P3│ 43.5 43.5 │
│ └──┘           │
└∊───────────────┘
</span>
</div>
</div>
<p>Then find the lowest price each person can pay so these folks can budget!</p>
<div id="cell-42" class="cell">
<pre class="apl cell-code"><code>lowest_per_person ← ⌊/Ans
people,3 1⍴lowest_per_person ⍝ display</code></pre>
<div class="cell-output cell-output-display">
<span style="white-space:pre; font-family: monospace">┌→──────────┐
↓ ┌→─┐      │
│ │P1│ 49   │
│ └──┘      │
│ ┌→─┐      │
│ │P2│ 58.5 │
│ └──┘      │
│ ┌→─┐      │
│ │P3│ 43.5 │
│ └──┘      │
└∊──────────┘
</span>
</div>
</div>
<p>We can also identify which store each person should go to based on the min price.</p>
<div id="cell-44" class="cell">
<pre class="apl cell-code"><code>3 2 ⍴ people ⍪ shops ⌷⍨ ⊂ {⍵⍳⌊/⍵}¨↓Ans</code></pre>
<div class="cell-output cell-output-display">
<span style="white-space:pre; font-family: monospace">┌→──────────┐
↓ ┌→─┐ ┌→─┐ │
│ │P1│ │P2│ │
│ └──┘ └──┘ │
│ ┌→─┐ ┌→─┐ │
│ │P3│ │S2│ │
│ └──┘ └──┘ │
│ ┌→─┐ ┌→─┐ │
│ │S1│ │S1│ │
│ └──┘ └──┘ │
└∊──────────┘
</span>
</div>
</div>
</section>
</section>
<section id="image-data" class="level4" data-number="1.2.1.5">
<h4 data-number="1.2.1.5" class="anchored" data-anchor-id="image-data"><span class="header-section-number">1.2.1.5</span> Image Data</h4>
<p>Images can be represented by matrices.</p>
<p><img src="https://github.com/fastai/numerical-linear-algebra/raw/master/nbs/images/digit.gif" alt="digit" style="width: 55%"> (Source: <a href="https://medium.com/@ageitgey/machine-learning-is-fun-part-3-deep-learning-and-convolutional-neural-networks-f40359318721">Adam Geitgey</a>)</p>
</section>
<section id="convolution" class="level4" data-number="1.2.1.6">
<h4 data-number="1.2.1.6" class="anchored" data-anchor-id="convolution"><span class="header-section-number">1.2.1.6</span> Convolution</h4>
<p><em>Convolutions</em> are the heart of convolutional neural networks (CNNs), a type of deep learning, responsible for the huge advances in image recognitionin the last few years. They are now increasingly being used for speech as well, such as <a href="https://code.facebook.com/posts/1978007565818999/a-novel-approach-to-neural-machine-translation/">Facebook AI’s results</a> for speech translation which are 9x faster than RNNs (the current most popular approach for speech translation).</p>
<p>Computers are now more accurate than people at classifying images.</p>
<p><img src="https://github.com/fastai/numerical-linear-algebra/raw/master/nbs/images/sportspredict.jpeg" alt="ImageNet" style="width: 80%"> (Source: <a href="http://karpathy.github.io/2014/07/03/feature-learning-escapades/">Andrej Karpathy</a>)</p>
<p><img src="https://github.com/fastai/numerical-linear-algebra/raw/master/nbs/images/InsideImagenet.png" alt="ImageNet" style="width: 80%"> (Source: <a href="https://blogs.nvidia.com/blog/2014/09/07/imagenet/">Nvidia</a>)</p>
<p>You can think of a convolution as a special kind of matrix product</p>
<p>The 3 images below are all from an excellent blog post written by a fast.ai student on <a href="https://medium.com/impactai/cnns-from-different-viewpoints-fab7f52d159c">CNNs from Different Viewpoints</a>:</p>
<p>A convolution applies a filter to each section of an image: <img src="https://github.com/fastai/numerical-linear-algebra/raw/master/nbs/images/cnn1.png" alt="CNNs" style="width: 40%"></p>
<p>Neural Network Viewpoint: <img src="https://github.com/fastai/numerical-linear-algebra/raw/master/nbs/images/cnn2.png" alt="CNNs" style="width: 40%"></p>
<p>Matrix Multiplication Viewpoint: <img src="https://github.com/fastai/numerical-linear-algebra/raw/master/nbs/images/cnn3.png" alt="CNNs" style="width: 80%"></p>
<p>Let’s see how convolutions can be used for <em>edge detection</em> in <a href="convolution-intro.ipynb">this notebook</a>(originally from the <a href="http://course.fast.ai/">fast.ai Deep Learning Course</a>)</p>
</section>
</section>
<section id="matrix-decompositions" class="level3" data-number="1.2.2">
<h3 data-number="1.2.2" class="anchored" data-anchor-id="matrix-decompositions"><span class="header-section-number">1.2.2</span> Matrix Decompositions</h3>
<p>We will be talking about Matrix Decompositions every day of this course, and will cover the below examples in future lessons:</p>
<ul>
<li><p><strong>Topic Modeling</strong> (NMF and SVD. SVD uses QR) A group of documents can be represented by a term-document matrix <img src="https://github.com/fastai/numerical-linear-algebra/raw/master/nbs/images/document_term.png" alt="term-document matrix" style="width: 70%"> (source: <a href="http://player.slideplayer.com/15/4528582/#">Introduction to Information Retrieval</a>) <img src="https://github.com/fastai/numerical-linear-algebra/raw/master/nbs/images/nmf_doc.png" alt="NMF on documents" style="width: 70%"> (source: <a href="http://perso.telecom-paristech.fr/~essid/teach/NMF_tutorial_ICME-2014.pdf">NMF Tutorial</a>)</p></li>
<li><p><strong>Background removal</strong> (robust PCA, which uses truncated SVD) <img src="https://github.com/fastai/numerical-linear-algebra/raw/master/nbs/images/surveillance3.png" class="img-fluid" alt="background removal"></p></li>
<li><p><strong>Google’s PageRank Algorithm</strong> (eigen decomposition)</p></li>
</ul>
<p><img src="https://github.com/fastai/numerical-linear-algebra/raw/master/nbs/images/page_rank_graph.png" alt="PageRank" style="width: 70%"> (source: <a href="http://computationalculture.net/article/what_is_in_pagerank">What is in PageRank?</a>)</p>
<ul>
<li>List of other decompositions and some applications <a href="https://sites.google.com/site/igorcarron2/matrixfactorizations">matrix factorization jungle</a></li>
</ul>
</section>
</section>
<section id="accuracy" class="level2" data-number="1.3">
<h2 data-number="1.3" class="anchored" data-anchor-id="accuracy"><span class="header-section-number">1.3</span> Accuracy</h2>
<section id="floating-point-arithmetic" class="level3" data-number="1.3.1">
<h3 data-number="1.3.1" class="anchored" data-anchor-id="floating-point-arithmetic"><span class="header-section-number">1.3.1</span> Floating Point Arithmetic</h3>
<p>To understand accuracy, we first need to look at <strong>how</strong> computers (which are finite and discrete) store numbers (which are infinite and continuous)</p>
<section id="exercise" class="level4" data-number="1.3.1.1">
<h4 data-number="1.3.1.1" class="anchored" data-anchor-id="exercise"><span class="header-section-number">1.3.1.1</span> Exercise</h4>
<p>Take a moment to look at the function <img src="https://latex.codecogs.com/png.latex?f"> below. Before you try running it, write on paper what the output would be of <img src="https://latex.codecogs.com/png.latex?x_1%20=%20f(%5Cfrac%7B1%7D%7B10%7D)">. Now, (still on paper) plug that back into <img src="https://latex.codecogs.com/png.latex?f"> and calculate <img src="https://latex.codecogs.com/png.latex?x_2%20=%20f(x_1)">. Keep going for 10 iterations.</p>
<p>This example is taken from page 107 of <em>Numerical Methods</em>, by Greenbaum and Chartier.</p>
<div class="sourceCode" id="cb12" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb12-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> f(x):</span>
<span id="cb12-2">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>:</span>
<span id="cb12-3">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> x</span>
<span id="cb12-4">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>:</span>
<span id="cb12-5">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span></span></code></pre></div>
<div id="cell-60" class="cell">
<pre class="apl cell-code"><code>⍝ Translate function to APL
f←{(2×⍵)-⍵&gt;.5}</code></pre>
</div>
<div id="cell-61" class="cell">
<pre class="apl cell-code"><code>⍝ Create generator
gen←{(f⍣⍵)⍺}</code></pre>
</div>
<div id="cell-62" class="cell">
<pre class="apl cell-code"><code>⍝ First 10 generations
.1 gen¨ ⍳10</code></pre>
<div class="cell-output cell-output-display">
<span style="white-space:pre; font-family: monospace">┌→──────────────────────────────────────┐
│0.2 0.4 0.8 0.6 0.2 0.4 0.8 0.6 0.2 0.4│
└~──────────────────────────────────────┘
</span>
</div>
</div>
<div id="cell-63" class="cell">
<pre class="apl cell-code"><code>⍝ First 80 generations (left to right top to bottom)
16 5⍴.1 gen¨ ⍳80</code></pre>
<div class="cell-output cell-output-display">
<span style="white-space:pre; font-family: monospace">┌→───────────────────────────────────────────────────────────────┐
↓0.2          0.4          0.8          0.6          0.2         │
│0.4          0.8          0.6          0.2          0.4         │
│0.8          0.6          0.2          0.4          0.8         │
│0.6          0.2          0.4          0.8          0.6         │
│0.2          0.4          0.8          0.6000000001 0.2000000002│
│0.4000000004 0.8000000007 0.6000000015 0.200000003  0.400000006 │
│0.8000000119 0.6000000238 0.2000000477 0.4000000954 0.8000001907│
│0.6000003815 0.2000007629 0.4000015259 0.8000030518 0.6000061035│
│0.200012207  0.4000244141 0.8000488281 0.6000976563 0.2001953125│
│0.400390625  0.80078125   0.6015625    0.203125     0.40625     │
│0.8125       0.625        0.25         0.5          1           │
│1            1            1            1            1           │
│1            1            1            1            1           │
│1            1            1            1            1           │
│1            1            1            1            1           │
│1            1            1            1            1           │
└~───────────────────────────────────────────────────────────────┘
</span>
</div>
</div>
<div id="cell-64" class="cell">
<pre class="apl cell-code"><code>⍝ Answer after 80 generations
(f⍣80).1</code></pre>
<div class="cell-output cell-output-display">
<span style="white-space:pre; font-family: monospace"> 
1
 
</span>
</div>
</div>
<p>What went wrong?</p>
</section>
<section id="problem-math-is-continuous-infinite-but-computers-are-discrete-finite" class="level4" data-number="1.3.1.2">
<h4 data-number="1.3.1.2" class="anchored" data-anchor-id="problem-math-is-continuous-infinite-but-computers-are-discrete-finite"><span class="header-section-number">1.3.1.2</span> Problem: math is continuous &amp; infinite, but computers are discrete &amp; finite</h4>
<p>Two Limitations of computer representations of numbers: 1. they can’t be arbitrarily large or small 2. there must be gaps between them</p>
<p>The reason we need to care about accuracy, is because computers can’t store infinitely accurate numbers. It’s possible to create calculations that give very wrong answers (particularly when repeating an operation many times, since each operation could multiply the error).</p>
<p>How computers store numbers:</p>
<p><img src="https://github.com/fastai/numerical-linear-algebra/raw/master/nbs/images/fpa.png" alt="floating point" style="width: 60%"></p>
<p>The <em>mantissa</em> can also be referred to as the <em>significand</em>.</p>
<p>IEEE Double precision arithmetic: - Numbers can be as large as <img src="https://latex.codecogs.com/png.latex?1.79%20%5Ctimes%2010%5E%7B308%7D"> and as small as <img src="https://latex.codecogs.com/png.latex?2.23%20%5Ctimes%2010%5E%7B-308%7D">. - The interval <img src="https://latex.codecogs.com/png.latex?%5B1,2%5D"> is represented by discrete subset: <img src="https://latex.codecogs.com/png.latex?1,%20%5C:%201+2%5E%7B-52%7D,%20%5C:%201+2%20%5Ctimes%202%5E%7B-52%7D,%5C:%201+3%20%5Ctimes%202%5E%7B-52%7D,%5C:%20%5Cldots,%202"></p>
<ul>
<li>The interval <img src="https://latex.codecogs.com/png.latex?%5B2,4%5D"> is represented: <img src="https://latex.codecogs.com/png.latex?2,%20%5C:%202+2%5E%7B-51%7D,%20%5C:%202+2%20%5Ctimes%202%5E%7B-51%7D,%5C:%202+3%20%5Ctimes%202%5E%7B-51%7D,%5C:%20%5Cldots,%204"></li>
</ul>
<p>Floats and doubles are not equidistant:</p>
<p><img src="https://github.com/fastai/numerical-linear-algebra/raw/master/nbs/images/fltscale-wh.png" alt="floating point" style="width: 100%"> Source: <a href="http://www.volkerschatz.com/science/float.html">What you never wanted to know about floating point but will be forced to find out</a></p>
<p><strong>Machine Epsilon</strong></p>
<p>Half the distance between 1 and the next larger number. This can vary by computer. IEEE standards for double precision specify <img src="https://latex.codecogs.com/png.latex?%20%5Cvarepsilon_%7Bmachine%7D%20=%202%5E%7B-53%7D%20%5Capprox%201.11%20%5Ctimes%2010%5E%7B-16%7D"></p>
<p><strong>Two important properties of Floating Point Arithmetic</strong>:</p>
<ul>
<li><p>The difference between a real number <img src="https://latex.codecogs.com/png.latex?x"> and its closest floating point approximation <img src="https://latex.codecogs.com/png.latex?fl(x)"> is always smaller than <img src="https://latex.codecogs.com/png.latex?%5Cvarepsilon_%7Bmachine%7D"> in relative terms. For some <img src="https://latex.codecogs.com/png.latex?%5Cvarepsilon">, where <img src="https://latex.codecogs.com/png.latex?%5Clvert%20%5Cvarepsilon%20%5Crvert%20%5Cleq%20%5Cvarepsilon_%7Bmachine%7D">, <img src="https://latex.codecogs.com/png.latex?fl(x)=x%20%5Ccdot%20(1%20+%20%5Cvarepsilon)"></p></li>
<li><p>Where * is any operation (<img src="https://latex.codecogs.com/png.latex?+,%20-,%20%5Ctimes,%20%5Cdiv">), and <img src="https://latex.codecogs.com/png.latex?%5Ccircledast"> is its floating point analogue, <img src="https://latex.codecogs.com/png.latex?%20x%20%5Ccircledast%20y%20=%20(x%20*%20y)(1%20+%20%5Cvarepsilon)"> for some <img src="https://latex.codecogs.com/png.latex?%5Cvarepsilon">, where <img src="https://latex.codecogs.com/png.latex?%5Clvert%20%5Cvarepsilon%20%5Crvert%20%5Cleq%20%5Cvarepsilon_%7Bmachine%7D"> That is, every operation of floating point arithmetic is exact up to a relative error of size at most <img src="https://latex.codecogs.com/png.latex?%5Cvarepsilon_%7Bmachine%7D"></p></li>
</ul>
</section>
<section id="history" class="level4" data-number="1.3.1.3">
<h4 data-number="1.3.1.3" class="anchored" data-anchor-id="history"><span class="header-section-number">1.3.1.3</span> History</h4>
<p>Floating point arithmetic may seem like a clear choice in hindsight, but there have been many, many ways of storing numbers: - fixed-point arithmetic - logarithmic and semilogarithmic number systems - continued-fractions - rational numbers - possibly infinite strings of rational numbers - level-index number systems - fixed-slash and floating-slash number systems - 2-adic numbers</p>
<p>For references, see <a href="https://perso.ens-lyon.fr/jean-michel.muller/chapitre1.pdf">Chapter 1</a> (which is free) of the <a href="http://www.springer.com/gp/book/9780817647049">Handbook of Floating-Point Arithmetic</a>. Yes, there is an entire 16 chapter book on floating point!</p>
<p>Timeline History of Floating Point Arithmetic: - ~1600 BC: Babylonian radix-60 system was earliest floating-point system (Donald Knuth). Represented the significand of a radix-60 floating-point representation (if ratio of two numbers is a power of 60, represented the same) - 1630 Slide rule. Manipulate only significands (radix-10) - 1914 Leonardo Torres y Quevedo described an electromechanical implementation of Babbage’s Analytical Engine with Floating Point Arithmetic. - 1941 First real, modern implementation. Konrad Zuse’s Z3 computer. Used radix-2, with 14 bit significand, 7 bit exponents, and 1 sign bit. - 1985 IEEE 754-1985 Standard for Binary Floating-Point Arithmetic released. Has increased accuracy, reliability, and portability. <a href="https://people.eecs.berkeley.edu/~wkahan/">William Kahan</a> played leading role.</p>
<p>“Many different ways of approximating real numbers on computers have been introduced.. And yet, floating-point arithmetic is <strong>by far the most widely used</strong> way of representing real numbers in modern computers. Simulating an infinite, continuous set (the real numbers) with a finite set (the “machine numbers”) is not a straightforward task: <strong>clever compromises must be found between, speed, accuracy, dynamic range, ease of use and implementation, and memory</strong>. It appears that floating-point arithmetic, with adequately chosen parameters (radix, precision, extremal exponents, etc.), is a very good compromise for most numerical applications.”</p>
<p>Although a radix value of 2 (binary) seems like the pretty clear winner now for computers, a variety of other radix values have been used at various point:</p>
<ul>
<li>radix-8 used by early machines PDP-10, Burroughs 570 and 6700</li>
<li>radix-16 IBM 360</li>
<li>radix-10 financial calculations, pocket calculators, Maple</li>
<li>radix-3 Russian SETUN computer (1958). Benefits: minimizes beta x p (symbols x digits), for a fixed largest representable number beta^p - 1. Rounding = truncation</li>
<li>radix-2 most common. Reasons: easy to implement. Studies have shown (with implicit leading bit) this gives better worst-case or average accuracy than all other radices.</li>
</ul>
</section>
</section>
<section id="conditioning-and-stability" class="level3" data-number="1.3.2">
<h3 data-number="1.3.2" class="anchored" data-anchor-id="conditioning-and-stability"><span class="header-section-number">1.3.2</span> Conditioning and Stability</h3>
<p>Since we can not represent numbers exactly on a computer (due to the finiteness of our storage, and the gaps between numbers in floating point architecture), it becomes important to know <em>how small perturbations in the input to a problem impact the output</em>.</p>
<p><strong>“A stable algorithm gives nearly the right answer to nearly the right question.”</strong> –Trefethen</p>
<p><strong>Conditioning</strong>: perturbation behavior of a mathematical problem (e.g.&nbsp;least squares)</p>
<p><strong>Stability</strong>: perturbation behavior of an algorithm used to solve that problem on a computer (e.g.&nbsp;least squares algorithms, householder, back substitution, gaussian elimination)</p>
<p>Example: Eigenvalues of a Matrix</p>
<section id="create-matrices" class="level5" data-number="1.3.2.0.1">
<h5 data-number="1.3.2.0.1" class="anchored" data-anchor-id="create-matrices"><span class="header-section-number">1.3.2.0.1</span> Create matrices</h5>
<div id="cell-82" class="cell">
<pre class="apl cell-code"><code>⎕←A←2 2⍴1 1000 0 1
⎕←B←2 2⍴1 1000 .001 1</code></pre>
<div class="cell-output cell-output-display">
<span style="white-space:pre; font-family: monospace">┌→─────┐
↓1 1000│
│0    1│
└~─────┘
</span>
</div>
<div class="cell-output cell-output-display">
<span style="white-space:pre; font-family: monospace">┌→─────────┐
↓1     1000│
│0.001    1│
└~─────────┘
</span>
</div>
</div>
</section>
<section id="calculate-eigenvalues-quadratic" class="level5" data-number="1.3.2.0.2">
<h5 data-number="1.3.2.0.2" class="anchored" data-anchor-id="calculate-eigenvalues-quadratic"><span class="header-section-number">1.3.2.0.2</span> Calculate Eigenvalues (quadratic)</h5>
<div id="cell-84" class="cell">
<pre class="apl cell-code"><code>I ← {⍵ ⍵ ⍴ 1, ⍵⍴0} ⍝ calculate identity
tf← {+/+/(⍵×I 2)} ⍝ Calculate Trace
df ← {(×/×/(⍵×I 2)+0=I 2)-×/×/(I 2)+⍵×0=I 2} ⍝ Calculate Determinant

⍝ Eigenvalue calculation
e1←{2÷⍨⍵-.5*⍨(⍵*2)-4×⍺} ⍝ Eigenvalue 1
e2←{2÷⍨⍵+.5*⍨(⍵*2)-4×⍺} ⍝ Eigenvalue 2

⍝ Get both eigenvalues
eigenvalues←{(d e2 t),(d←df ⍵)e1(t←tf ⍵)} ⍝ Get both eigenvalues</code></pre>
</div>
<div id="cell-85" class="cell">
<pre class="apl cell-code"><code>eigenvalues A
eigenvalues B</code></pre>
<div class="cell-output cell-output-display">
<span style="white-space:pre; font-family: monospace">┌→──┐
│1 1│
└~──┘
</span>
</div>
<div class="cell-output cell-output-display">
<span style="white-space:pre; font-family: monospace">┌→──┐
│2 0│
└~──┘
</span>
</div>
</div>
<p><strong>Reminder: Two properties of Floating Point Arithmetic</strong></p>
<ul>
<li><p>The difference between a real number <img src="https://latex.codecogs.com/png.latex?x"> and its closest floating point approximation <img src="https://latex.codecogs.com/png.latex?fl(x)"> is always smaller than <img src="https://latex.codecogs.com/png.latex?%5Cvarepsilon_%7Bmachine%7D"> in relative terms.</p></li>
<li><p>Every operation <img src="https://latex.codecogs.com/png.latex?+,%20-,%20%5Ctimes,%20%5Cdiv"> of floating point arithmetic is exact up to a relative error of size at most <img src="https://latex.codecogs.com/png.latex?%5Cvarepsilon_%7Bmachine%7D"></p></li>
</ul>
<p>Examples we’ll see: - Classical vs Modified Gram-Schmidt accuracy - Gram-Schmidt vs.&nbsp;Householder (2 different ways of computing QR factorization), how orthogonal the answer is - Condition of a system of equations</p>
</section>
</section>
<section id="approximation-accuracy" class="level3" data-number="1.3.3">
<h3 data-number="1.3.3" class="anchored" data-anchor-id="approximation-accuracy"><span class="header-section-number">1.3.3</span> Approximation accuracy</h3>
<p>It’s rare that we need to do highly accurate matrix computations at scale. In fact, often we’re doing some kind of machine learning, and less accurate approaches can prevent overfitting.</p>
<p>If we accept some decrease in accuracy, then we can often increase speed by orders of magnitude (and/or decrease memory use) by using approximate algorithms. These algorithms typically give a correct answer with some probability. By rerunning the algorithm multiple times you can generally increase that probability multiplicatively!</p>
<p><strong>Example</strong>: A <strong>bloom filter</strong> allows searching for set membership with 1% false positives, using &lt;10 bits per element. This often represents reductions in memory use of thousands of times.</p>
<p><img src="https://github.com/fastai/numerical-linear-algebra/raw/master/nbs/images/bloom_filter.png" alt="Bloom Filters" style="width: 60%"></p>
<p>The false positives can be easily handled by having a second (exact) stage check all returned items - for rare items this can be very effective. For instance, many web browsers use a bloom filter to create a set of blocked pages (e.g.&nbsp;pages with viruses), since blocked web pages are only a small fraction of the whole web. A false positive can be handled here by taking anything returned by the bloom filter and checking against a web service with the full exact list. (See this <a href="https://llimllib.github.io/bloomfilter-tutorial/">bloom filter tutorial</a> for more details).</p>
</section>
<section id="expensive-errors" class="level3" data-number="1.3.4">
<h3 data-number="1.3.4" class="anchored" data-anchor-id="expensive-errors"><span class="header-section-number">1.3.4</span> Expensive Errors</h3>
<p><em>The below examples are from Greenbaum &amp; Chartier.</em></p>
<p>European Space Agency spent 10 years and $7 billion on the Ariane 5 Rocket.</p>
<p>What can happen when you try to fit a 64 bit number into a 16 bit space (integer overflow):</p>
<div id="cell-91" class="cell">
<pre class="apl cell-code"><code>⍝from IPython.display import YouTubeVideo
⍝YouTubeVideo("PK_yguLapgA")</code></pre>
</div>
<p>Here is a floating point error that cost Intel $475 million:</p>
<p><a href="http://www.nytimes.com/1994/11/24/business/company-news-flaw-undermines-accuracy-of-pentium-chips.html">1994 NYTimes article about Intel Pentium Error</a> <img src="https://github.com/fastai/numerical-linear-algebra/raw/master/nbs/images/pentium_nytimes.png" class="img-fluid" alt="article"></p>
<p><strong>Resources</strong>: See Lecture 13 of Trefethen &amp; Bau and Chapter 5 of Greenbaum &amp; Chartier for more on Floating Point Arithmetic</p>
</section>
</section>
<section id="memory-use" class="level2" data-number="1.4">
<h2 data-number="1.4" class="anchored" data-anchor-id="memory-use"><span class="header-section-number">1.4</span> Memory Use</h2>
<section id="sparse-vs-dense" class="level3" data-number="1.4.1">
<h3 data-number="1.4.1" class="anchored" data-anchor-id="sparse-vs-dense"><span class="header-section-number">1.4.1</span> Sparse vs Dense</h3>
<p>Above we covered how <em>numbers</em> are stored, now let’s talk about how <em>matrices</em> are stored. A key way to save memory (and computation) is not to store all of your matrix. Instead, just store the non-zero elements. This is called <strong>sparse</strong> storage, and it is well suited to sparse matrices, that is, matrices where most elements are zero.</p>
<p><img src="https://github.com/fastai/numerical-linear-algebra/raw/master/nbs/images/sparse.png" alt="floating point" style="width: 50%"></p>
<p>Here is an example of the matrix from a finite element problem, which shows up in engineering (for instance, when modeling the air-flow around a plane). In this example, the non-zero elements are black and the zero elements are white: <img src="https://github.com/fastai/numerical-linear-algebra/raw/master/nbs/images/Finite_element_sparse_matrix.png" alt="floating point" style="width: 50%"> <a href="https://commons.wikimedia.org/w/index.php?curid=2245335">Source</a></p>
<p>There are also special types of structured matrix, such as diagonal, tri-diagonal, hessenberg, and triangular, which each display particular patterns of sparsity, which can be leveraged to reduce memory and computation.</p>
<p>The opposite of a sparse matrix is a <strong>dense</strong> matrix, along with dense storage, which simply refers to a matrix containing mostly non-zeros, in which every element is stored explicitly. Since sparse matrices are helpful and common, numerical linear algebra focuses on maintaining sparsity through as many operations in a computation as possible.</p>
</section>
</section>
<section id="speed" class="level2" data-number="1.5">
<h2 data-number="1.5" class="anchored" data-anchor-id="speed"><span class="header-section-number">1.5</span> Speed</h2>
<p>Speed differences come from a number of areas, particularly: - Computational complexity - Vectorization - Scaling to multiple cores and nodes - Locality</p>
<section id="computational-complexity" class="level3" data-number="1.5.1">
<h3 data-number="1.5.1" class="anchored" data-anchor-id="computational-complexity"><span class="header-section-number">1.5.1</span> Computational complexity</h3>
<p>If you are unfamiliar with computational complexity and <img src="https://latex.codecogs.com/png.latex?%5Cmathcal%7BO%7D"> notation, you can read about it <a href="https://www.interviewcake.com/article/java/big-o-notation-time-and-space-complexity">on Interview Cake</a> and <a href="https://www.codecademy.com/courses/big-o/0/3">practice on Codecademy</a>. Algorithms are generally expressed in terms of computation complexity with respect to the number of rows and number of columns in the matrix. E.g. you may find an algorithm described as <img src="https://latex.codecogs.com/png.latex?%5Cmathcal%7BO(n%5E2m)%7D">.</p>
</section>
<section id="vectorization" class="level3" data-number="1.5.2">
<h3 data-number="1.5.2" class="anchored" data-anchor-id="vectorization"><span class="header-section-number">1.5.2</span> Vectorization</h3>
<p>Modern CPUs and GPUs can apply an operation to multiple elements at once on a single core. For instance, take the exponent of 4 floats in a vector in a single step. This is called SIMD. You will not be explicitly writing SIMD code (which tends to require assembly language or special C “intrinsics”), but instead will use vectorized operations in libraries like numpy, which in turn rely on specially tuned vectorized low level linear algebra APIs (in particular, BLAS, and LAPACK).</p>
<section id="matrix-computation-packages-blas-and-lapack" class="level4" data-number="1.5.2.1">
<h4 data-number="1.5.2.1" class="anchored" data-anchor-id="matrix-computation-packages-blas-and-lapack"><span class="header-section-number">1.5.2.1</span> Matrix Computation Packages: BLAS and LAPACK</h4>
<p><a href="http://www.netlib.org/blas/">BLAS (Basic Linear Algebra Subprograms)</a>: specification for low-level matrix and vector arithmetic operations. These are the standard building blocks for performing basic vector and matrix operations. BLAS originated as a Fortran library in 1979. Examples of BLAS libraries include: AMD Core Math Library (ACML), ATLAS, Intel Math Kernel Library (MKL), and OpenBLAS.</p>
<p><a href="http://www.netlib.org/lapack/">LAPACK</a> is written in Fortran, provides routines for solving systems of linear equations, eigenvalue problems, and singular value problems. Matrix factorizations (LU, Cholesky, QR, SVD, Schur). Dense and banded matrices are handled, but not general sparse matrices. Real and complex, single and double precision.</p>
<p>1970s and 1980s: EISPACK (eigenvalue routines) and LINPACK (linear equations and linear least-squares routines) libraries</p>
<p><strong>LAPACK original goal</strong>: make LINAPCK and EISPACK run efficiently on shared-memory vector and parallel processors and exploit cache on modern cache-based architectures (initially released in 1992). EISPACK and LINPACK ignore multi-layered memory hierarchies and spend too much time moving data around.</p>
<p>LAPACK uses highly optimized block operations implementations (which much be implemented on each machine) LAPACK written so as much of the computation as possible is performed by BLAS.</p>
</section>
</section>
<section id="locality" class="level3" data-number="1.5.3">
<h3 data-number="1.5.3" class="anchored" data-anchor-id="locality"><span class="header-section-number">1.5.3</span> Locality</h3>
<p>Using slower ways to access data (e.g.&nbsp;over the internet) can be up to a billion times slower than faster ways (e.g.&nbsp;from a register). But there’s much less fast storage than slow storage. So once we have data in fast storage, we want to do any computation required at that time, rather than having to load it multiple times each time we need it. In addition, for most types of storage its much faster to access data items that are stored next to each other, so we should try to always use any data stored nearby that we know we’ll need soon. These two issues are known as locality.</p>
<section id="speed-of-different-types-of-memory" class="level4" data-number="1.5.3.1">
<h4 data-number="1.5.3.1" class="anchored" data-anchor-id="speed-of-different-types-of-memory"><span class="header-section-number">1.5.3.1</span> Speed of different types of memory</h4>
<p>Here are some <em>numbers everyone should know</em> (from the legendary <a href="http://static.googleusercontent.com/media/research.google.com/en/us/people/jeff/stanford-295-talk.pdf">Jeff Dean</a>): - L1 cache reference 0.5 ns - L2 cache reference 7 ns - Main memory reference/RAM 100 ns - Send 2K bytes over 1 Gbps network 20,000 ns - Read 1 MB sequentially from memory 250,000 ns - Round trip within same datacenter 500,000 ns - Disk seek 10,000,000 ns - Read 1 MB sequentially from network 10,000,000 ns - Read 1 MB sequentially from disk 30,000,000 ns - Send packet CA-&gt;Netherlands-&gt;CA 150,000,000 ns</p>
<p>And here is an updated, interactive <a href="https://people.eecs.berkeley.edu/~rcs/research/interactive_latency.html">version</a>, which includes a timeline of how these numbers have changed.</p>
<p><strong>Key take-away</strong>: Each successive memory type is (at least) an order of magnitude worse than the one before it. Disk seeks are <strong>very slow</strong>.</p>
<p>This video has a great example of showing several ways you could compute the blur of a photo, with various trade-offs. Don’t worry about the C code that appears, just focus on the red and green moving pictures of matrix computation.</p>
<p>Although the video is about a new language called Halide, it is a good illustration the issues it raises are universal. Watch minutes 1-13:</p>
<div id="cell-111" class="cell">
<pre class="apl cell-code"><code>⍝ from IPython.display import YouTubeVideo
⍝ YouTubeVideo("3uiEyEKji0M")</code></pre>
</div>
<p>Locality is hard. Potential trade-offs: - redundant computation to save memory bandwidth - sacrificing parallelism to get better reuse</p>
</section>
<section id="temporaries" class="level4" data-number="1.5.3.2">
<h4 data-number="1.5.3.2" class="anchored" data-anchor-id="temporaries"><span class="header-section-number">1.5.3.2</span> Temporaries</h4>
<p>The issue of “temporaries” occurs when the result of a calculation is stored in a temporary variable in RAM, and then that variable is loaded to do another calculation on it. This is many orders of magnitude slower than simply keeping the data in cache or registers and doing all necessary computations before storing the final result in RAM. This is particularly an issue for us since numpy generally creates temporaries for every single operation or function it does. E.g. <img src="https://latex.codecogs.com/png.latex?a=b%5Ccdot%20c%5E2+ln(d)"> will create four temporaries (since there are four operations and functions).</p>
</section>
</section>
<section id="scaling-to-multiple-cores-and-nodes" class="level3" data-number="1.5.4">
<h3 data-number="1.5.4" class="anchored" data-anchor-id="scaling-to-multiple-cores-and-nodes"><span class="header-section-number">1.5.4</span> Scaling to multiple cores and nodes</h3>
<p>We have a separate section for scalability, but it’s worth noting that this is also important for speed - if we can’t scale across all the computing resources we have, we’ll be stuck with slower computation.</p>
</section>
</section>
<section id="scalability-parallelization" class="level2" data-number="1.6">
<h2 data-number="1.6" class="anchored" data-anchor-id="scalability-parallelization"><span class="header-section-number">1.6</span> Scalability / parallelization</h2>
<p>Often we’ll find that we have more data than we have memory to handle, or time to compute. In such a case we would like to be able to scale our algorithm across <a href="http://www.makeuseof.com/tag/processor-core-makeuseof-explains-2/">multiple cores</a> (within one computer) or nodes (i.e.&nbsp;multiple computers on a network). We will not be tackling multi-node scaling in this course, although we will look at scaling across multiple cores (called parallelization). In general, scalable algorithms are those where the input can be broken up into smaller pieces, each of which are handled by a different core/computer, and then are put back together at the end.</p>


</section>
</section>

 ]]></description>
  <category>APL</category>
  <category>Linear Algebra</category>
  <guid>https://isaac-flath.tech/posts/APL/Fastai_Numerical_Linear_Algebra_1.html</guid>
  <pubDate>Sun, 10 Jul 2022 04:00:00 GMT</pubDate>
  <media:content url="https://isaac-flath.tech/posts/_TopicImages/LinearAlgebra1.png" medium="image" type="image/png" height="105" width="144"/>
</item>
<item>
  <title>Tabular Data Intro</title>
  <dc:creator>Isaac Flath</dc:creator>
  <link>https://isaac-flath.tech/posts/APL/TabularData.html</link>
  <description><![CDATA[ 





<section id="tabular-data" class="level1" data-number="1">
<h1 data-number="1"><span class="header-section-number">1</span> Tabular Data</h1>
<p>This article will get us started reading and working with tabular data. The goal is to read in some csv data, do a few basic operations (filtering, aggregation, etc.), and create some basic plots.</p>
<div id="2e404a29" class="cell">
<pre class="apl cell-code"><code>]box on -style=max</code></pre>
<div class="cell-output cell-output-display">
<span style="white-space:pre; font-family: monospace">┌→────────────────┐
│Was ON -style=max│
└─────────────────┘
</span>
</div>
</div>
</section>
<section id="moving-average" class="level1" data-number="2">
<h1 data-number="2"><span class="header-section-number">2</span> Moving Average</h1>
<p>We will start with a moving average as the simplest model. To do this we need to accomplish a few things:</p>
<ol type="1">
<li>Load data from CSV</li>
<li>Filter data</li>
<li>Calculate Moving Average</li>
<li>Plot</li>
</ol>
<section id="load-data-from-csv" class="level2" data-number="2.1">
<h2 data-number="2.1" class="anchored" data-anchor-id="load-data-from-csv"><span class="header-section-number">2.1</span> Load Data from CSV</h2>
<p>APL has a CSV function to read csv data in that we can use. I am using simple stock ticker data for a moving average.</p>
<div id="46c3c00c" class="cell">
<pre class="apl cell-code"><code>eod ← 'eod-quotemedia.csv'
eod_ar ← ⎕CSV eod '' 4
⍴ eod_ar ⍝ Check Size</code></pre>
<div class="cell-output cell-output-display">
<span style="white-space:pre; font-family: monospace">┌→───────┐
│490738 3│
└~───────┘
</span>
</div>
</div>
<p>We can get the head of the dataframe by selecting the first 5 rows and 3 columns. It’s handy to have a small sized piece of data as you develop so we store in it’s own array also. <code>↑</code> Lets us specify the head slice.</p>
<div id="439abab9" class="cell">
<pre class="apl cell-code"><code>⎕←eod_ar_s ← 5 3 ↑ eod_ar</code></pre>
<div class="cell-output cell-output-display">
<span style="white-space:pre; font-family: monospace">┌→──────────────────────────────────┐
↓ ┌→───┐       ┌→─────┐ ┌→────────┐ │
│ │date│       │ticker│ │adj_close│ │
│ └────┘       └──────┘ └─────────┘ │
│ ┌→─────────┐ ┌→┐                  │
│ │2013-07-01│ │A│      29.9942     │
│ └──────────┘ └─┘                  │
│ ┌→─────────┐ ┌→┐                  │
│ │2013-07-02│ │A│      29.6501     │
│ └──────────┘ └─┘                  │
│ ┌→─────────┐ ┌→┐                  │
│ │2013-07-03│ │A│      29.7052     │
│ └──────────┘ └─┘                  │
│ ┌→─────────┐ ┌→┐                  │
│ │2013-07-05│ │A│      30.4346     │
│ └──────────┘ └─┘                  │
└∊──────────────────────────────────┘
</span>
</div>
</div>
</section>
<section id="filter-for-1-ticker" class="level2" data-number="2.2">
<h2 data-number="2.2" class="anchored" data-anchor-id="filter-for-1-ticker"><span class="header-section-number">2.2</span> Filter for 1 ticker</h2>
<p>Next, we need to filter for a particular ticker. The first thing we need to know is where the column we want to sort on is located. We can of course see that it’s the second column, but let’s pretend we need to use APL for this to get some practice.</p>
<div id="333b690a" class="cell">
<pre class="apl cell-code"><code>⎕ ← ticker_loc ← ,/ ⍸ 1⌷eod_ar ∊ ⊂'ticker'</code></pre>
<div class="cell-output cell-output-display">
<span style="white-space:pre; font-family: monospace"> 
2
 
</span>
</div>
</div>
<p>Let’s break this down a bit:</p>
<ul>
<li><code>1⌷eod_ar</code> Gets the first row - this is our header row</li>
<li><code>∊ ⊂'ticker'</code> Determines where ‘ticker’ is and returns a mask ([0 1 0]</li>
<li><code>⍸</code> is applied to get the location of the true values (2)</li>
<li><code>,/</code> Applies a concatenation to flatten from an array to a value</li>
</ul>
<p>The next step is getting a truth mask (ie <code>[0 1 1 0 0]</code>) that tells us which rows contain the value to filter for, in this case <code>AAPL</code></p>
<div id="97baae7a" class="cell">
<pre class="apl cell-code"><code>tickers ← eod_ar[;ticker_loc] ∊ ⊂ 'AAPL'</code></pre>
</div>
<p>Similar to our first filtering section, <code>∊ ⊂ 'AAPL'</code> is checking membership of <code>eod_ar[;ticker_loc]</code> to return the mask.</p>
<p>We can see we found 1009 rows out of 490,738 that had this ticker.</p>
<div id="f86a824d" class="cell">
<pre class="apl cell-code"><code>⍝ We have a truth array (0/1) of whether row contains 'AAPL' or not
('size',⍴ tickers) , 'Found',+/tickers 
'min',(⌈/ tickers) , 'max',⌊/tickers</code></pre>
<div class="cell-output cell-output-display">
<span style="white-space:pre; font-family: monospace">┌→─────────────────────┐
│size 490738 Found 1009│
└+─────────────────────┘
</span>
</div>
<div class="cell-output cell-output-display">
<span style="white-space:pre; font-family: monospace">┌→──────────┐
│min 1 max 0│
└+──────────┘
</span>
</div>
</div>
<p><code>+/</code> distributes the <code>+</code> sign between each item in the list giving us a sum of the vector. The same approach can be used for <code>⌊</code> and <code>⌈</code> to get minimum and maximum values (0 and 1). <code>⍴</code> gives us our shape.</p>
<p>Next we need to use this mask to actually filter out data. This is quite easy and we can pass our mask with our full array to do that filtering using <code>⌿</code></p>
<div id="d12eb0ae" class="cell">
<pre class="apl cell-code"><code>AAPL ← tickers ⌿ eod_ar</code></pre>
</div>
<p>So when we put that together our full solution is:</p>
<div id="045e65f6" class="cell">
<pre class="apl cell-code"><code>col_loc ← ,/ ⍸ 1⌷eod_ar ∊ ⊂'ticker'           ⍝ Column Location
AAPL ← eod_ar ⌿⍨ eod_ar[;col_loc] ∊ ⊂ 'AAPL'  ⍝ Filter Array
5 3 ↑ AAPL                                    ⍝ Head of array</code></pre>
<div class="cell-output cell-output-display">
<span style="white-space:pre; font-family: monospace">┌→────────────────────────────┐
↓ ┌→─────────┐ ┌→───┐         │
│ │2013-07-01│ │AAPL│ 53.1092 │
│ └──────────┘ └────┘         │
│ ┌→─────────┐ ┌→───┐         │
│ │2013-07-02│ │AAPL│ 54.3122 │
│ └──────────┘ └────┘         │
│ ┌→─────────┐ ┌→───┐         │
│ │2013-07-03│ │AAPL│ 54.612  │
│ └──────────┘ └────┘         │
│ ┌→─────────┐ ┌→───┐         │
│ │2013-07-05│ │AAPL│ 54.1734 │
│ └──────────┘ └────┘         │
│ ┌→─────────┐ ┌→───┐         │
│ │2013-07-08│ │AAPL│ 53.8658 │
│ └──────────┘ └────┘         │
└∊────────────────────────────┘
</span>
</div>
</div>
</section>
<section id="calculate-moving-average" class="level2" data-number="2.3">
<h2 data-number="2.3" class="anchored" data-anchor-id="calculate-moving-average"><span class="header-section-number">2.3</span> Calculate Moving Average</h2>
<p>We will calculate a 90 period moving average over the stock prices for the AAPL ticker we just filtered for.</p>
<div id="6f26ff30" class="cell">
<pre class="apl cell-code"><code>ws ← 90</code></pre>
</div>
<p>Let’s start with calculating a moving sum. Instead of using <code>+/</code> to sum over the full list, we can use <code>+⌿</code> to get a moving sum based on the <code>ws</code> we give it.</p>
<div id="4b6af2cf" class="cell">
<pre class="apl cell-code"><code>movsum ← ws +⌿ AAPL[;3]</code></pre>
</div>
<p>When we have a moving sum, a moving average is easy. Simply divide the moving sum by the window size to get an average.</p>
<div id="5bab78b8" class="cell">
<pre class="apl cell-code"><code>movavg ← movsum ÷ ws
'movavg length:',⍴ movavg
'AAPL length:', ⍴ AAPL[;3]</code></pre>
<div class="cell-output cell-output-display">
<span style="white-space:pre; font-family: monospace">┌→─────────────────┐
│movavg length: 920│
└+─────────────────┘
</span>
</div>
<div class="cell-output cell-output-display">
<span style="white-space:pre; font-family: monospace">┌→────────────────┐
│AAPL length: 1009│
└+────────────────┘
</span>
</div>
</div>
<p>Our moving average is shorter than our original data because we are not calculating when we don’t have enough data at the beginning of our time period. Let’s pad the beginning with the raw values.</p>
<div id="82435191" class="cell">
<pre class="apl cell-code"><code>padded ← ((ws-1) ↑ AAPL[;3]) , movavg
'padded length:',⍴ padded
'AAPL length:', ⍴ AAPL[;3]</code></pre>
<div class="cell-output cell-output-display">
<span style="white-space:pre; font-family: monospace">┌→──────────────────┐
│padded length: 1009│
└+──────────────────┘
</span>
</div>
<div class="cell-output cell-output-display">
<span style="white-space:pre; font-family: monospace">┌→────────────────┐
│AAPL length: 1009│
└+────────────────┘
</span>
</div>
</div>
<p>So the full moving average with padding back to original size looks like this</p>
<div id="9e37f470" class="cell">
<pre class="apl cell-code"><code>movavg ← (ws ↑ AAPL[;3]) , ws ÷⍨ ws +⌿ AAPL[;3]</code></pre>
</div>
</section>
<section id="plot" class="level2" data-number="2.4">
<h2 data-number="2.4" class="anchored" data-anchor-id="plot"><span class="header-section-number">2.4</span> Plot</h2>
<p>We can not plot our original data with our moving average. It’s a bit annoying I have to pass in <code>movavg</code> twice to get it to work. It is probably something I am not understanding about how plotting works in APL.</p>
<div id="b53a7527" class="cell">
<pre class="apl cell-code"><code>]Plot AAPL[;3] movavg movavg</code></pre>
<div class="cell-output cell-output-display">
<svg version="1.1" baseprofile="full" width="100%" height="100%" viewbox="0 0 4320 3240" xmlns="http://www.w3.org/2000/svg" xlink="http://www.w3.org/1999/xlink" xmlns:ev="http://www.w3.org/2001/xml-events">
<desc>Created by Causeway SVG engine - SharpPlot v3.71.0</desc>
<g stroke-miterlimit="100">
<desc>Paint the paper =====</desc>
 <g fill="White">
  <rect x="0" y="0" width="4320" height="3240"></rect>
 </g>
<desc>Border =====</desc>
<desc>Region =====</desc>
<desc>X-Axis Ticks =====</desc>
<desc>X-Axis tickmarks</desc>
 <path fill="none" stroke-width="7.2" stroke="Black" d="M400 2720L400 2764M736 2720L736 2764M1073 2720L1073 2764M1409 2720L1409 2764M1745 2720L1745 2764M2082 2720L2082 2764M2418 2720L2418 2764M2755 2720L2755 2764M3091 2720L3091 2764M3427 2720L3427 2764M3764 2720L3764 2764M4100 2720L4100 2764"></path>
<desc>Y-Axis Ticks =====</desc>
<desc>Y-Axis tickmarks</desc>
 <path fill="none" stroke-width="7.2" stroke="Black" d="M400 2720L367 2720M400 2515L367 2515M400 2309L367 2309M400 2104L367 2104M400 1898L367 1898M400 1693L367 1693M400 1487L367 1487M400 1282L367 1282M400 1076L367 1076M400 871L367 871M400 665L367 665M400 460L367 460"></path>
<desc>Axes =====</desc>
 <path fill="none" stroke-width="12" stroke="Black" d="M400 2764L400 416M356 2720L4144 2720"></path>
<desc>Y-axis labels</desc>
 <g font-family="Times New Roman" font-size="80" text-anchor="end">
  <text x="335" y="2740">50</text>
  <text x="335" y="2535">60</text>
  <text x="335" y="2329">70</text>
  <text x="335" y="2124">80</text>
  <text x="335" y="1918">90</text>
  <text x="335" y="1713">100</text>
  <text x="335" y="1507">110</text>
  <text x="335" y="1302">120</text>
  <text x="335" y="1096">130</text>
  <text x="335" y="891">140</text>
  <text x="335" y="685">150</text>
  <text x="335" y="480">160</text>
 </g>
<desc>for X-axis labels</desc>
 <g font-family="Times New Roman" font-size="80" text-anchor="middle">
  <text x="400" y="2844">0</text>
  <text x="736" y="2844">100</text>
  <text x="1073" y="2844">200</text>
  <text x="1409" y="2844">300</text>
  <text x="1745" y="2844">400</text>
  <text x="2082" y="2844">500</text>
  <text x="2418" y="2844">600</text>
  <text x="2755" y="2844">700</text>
  <text x="3091" y="2844">800</text>
  <text x="3427" y="2844">900</text>
  <text x="3764" y="2844">1000</text>
  <text x="4100" y="2844">1100</text>
 </g>
<desc>Heading, subheading and footnotes =====</desc>
<desc>Start of Line Chart ===========</desc>
<desc>Points follow ...</desc>
<desc>Line</desc>
 <g stroke-width="3" stroke="Navy" stroke-linejoin="round" stroke-linecap="round" fill="none">
  <path d="M3794 834L3791 841 3787 797 3784 840 3780 798 3777 788 3774 801 3770 796 3767 814 3764 787 3760 869 3757 828 3754 811 3750 782 3747 806 3743 734 3740 612 3737 604 3733 623 3730 633 3727 603 3723 649 3720 657 3717 639 3713 640 3710 635 3706 645 3703 636 3700 632 3696 651 3693 662 3690 708 3686 602 3683 598 3680 590 3676 633 3673 660 3669 645 3666 665 3663 746 3659 795 3656 785 3653 775 3649 794 3646 853 3643 850 3639 853 3636 836 3632 853 3629 881 3626 878 3622 913 3619 903 3616 890 3612 906 3609 891 3606 894 3602 863 3599 859 3595 853 3592 846 3589 831 3585 852 3582 853 3579 848 3575 844 3572 850 3569 909 3565 914 3562 908 3558 898 3555 930 3552 897 3548 927 3545 913 3542 918 3538 947 3535 943 3532 944 3528 953 3525 947 3521 936 3518 940 3515 931 3511 948 3508 931 3505 987 3501 989 3498 994 3495 997 3491 985 3488 993 3484 1013 3481 1021 3478 1017 3474 1027 3471 1062 3468 1086 3464 1079 3461 1099 3458 1109 3454 1134 3451 1158 3447 1169 3444 1165 3441 1313 3437 1307 3434 1301 3431 1301 3427 1302 3424 1341 3421 1338 3417 1340 3414 1344 3410 1340 3407 1340 3404 1359 3400 1355 3397 1345 3394 1358 3390 1360 3387 1382 3384 1408 3380 1420 3377 1417 3373 1424 3370 1406 3367 1405 3363 1395 3360 1410 3357 1414 3353 1399 3350 1401 3347 1407 3343 1421 3340 1424 3336 1437 3333 1437 3330 1474 3326 1461 3323 1498 3320 1520 3316 1542 3313 1559 3310 1543 3306 1551 3303 1530 3299 1511 3296 1509 3293 1505 3289 1516 3286 1505 3283 1506 3279 1539 3276 1542 3273 1541 3269 1599 3266 1627 3262 1572 3259 1585 3256 1523 3252 1519 3249 1532 3246 1564 3242 1544 3239 1520 3236 1522 3232 1481 3229 1478 3225 1463 3222 1441 3219 1387 3215 1399 3212 1420 3209 1411 3205 1410 3202 1403 3199 1401 3195 1400 3192 1413 3188 1406 3185 1426 3182 1431 3178 1471 3175 1474 3172 1491 3168 1492 3165 1502 3162 1491 3158 1509 3155 1473 3151 1490 3148 1495 3145 1498 3141 1460 3138 1481 3135 1481 3131 1481 3128 1454 3125 1441 3121 1517 3118 1593 3114 1643 3111 1689 3108 1641 3104 1585 3101 1598 3098 1597 3094 1617 3091 1630 3088 1632 3084 1616 3081 1613 3077 1601 3074 1591 3071 1575 3067 1582 3064 1565 3061 1570 3057 1568 3054 1564 3051 1562 3047 1588 3044 1593 3040 1592 3037 1576 3034 1585 3030 1602 3027 1634 3024 1647 3020 1673 3017 1642 3014 1679 3010 1676 3007 1704 3003 1828 3000 1815 2997 1789 2993 1774 2990 1763 2987 1765 2983 1766 2980 1787 2977 1786 2973 1824 2970 1814 2966 1822 2963 1828 2960 1843 2956 1851 2953 1862 2950 1844 2946 1850 2943 1873 2940 1890 2936 1920 2933 1893 2929 1840 2926 1851 2923 1843 2919 1860 2916 1855 2913 1811 2909 1819 2906 1813 2903 1815 2899 1786 2896 1769 2892 1783 2889 1782 2886 1790 2882 1804 2879 1808 2876 1793 2872 1765 2869 1755 2866 1754 2862 1770 2859 1804 2855 1833 2852 1857 2849 1877 2845 1870 2842 1892 2839 1884 2835 1950 2832 1954 2829 1911 2825 1893 2822 1905 2818 1907 2815 1896 2812 1889 2808 1869 2805 1900 2802 1898 2798 1876 2795 1817 2792 1689 2788 1674 2785 1662 2781 1657 2778 1634 2775 1638 2771 1627 2768 1580 2765 1536 2761 1537 2758 1568 2755 1596 2751 1604 2748 1606 2744 1558 2741 1581 2738 1555 2734 1577 2731 1597 2728 1586 2724 1623 2721 1672 2718 1663 2714 1653 2711 1642 2707 1658 2704 1658 2701 1660 2697 1657 2694 1684 2691 1725 2687 1730 2684 1751 2681 1752 2677 1754 2674 1737 2670 1715 2667 1745 2664 1760 2660 1764 2657 1840 2654 1835 2650 1838 2647 1851 2644 1879 2640 1836 2637 1853 2633 1848 2630 1811 2627 1841 2623 1893 2620 1899 2617 1887 2613 1873 2610 1873 2607 1892 2603 1841 2600 1857 2596 1893 2593 1855 2590 1837 2586 1901 2583 1914 2580 1785 2576 1796 2573 1757 2570 1858 2566 1848 2563 1850 2559 1841 2556 1794 2553 1836 2549 1786 2546 1814 2543 1845 2539 1855 2536 1771 2533 1732 2529 1680 2526 1682 2522 1641 2519 1613 2516 1651 2512 1627 2509 1616 2506 1643 2502 1641 2499 1667 2496 1609 2492 1562 2489 1579 2485 1540 2482 1526 2479 1468 2475 1478 2472 1427 2469 1426 2465 1412 2462 1487 2459 1465 2455 1445 2452 1426 2448 1435 2445 1431 2442 1414 2438 1437 2435 1406 2432 1416 2428 1446 2425 1516 2422 1507 2418 1543 2415 1476 2411 1469 2408 1456 2405 1381 2401 1372 2398 1374 2395 1363 2391 1352 2388 1379 2385 1412 2381 1392 2378 1417 2374 1509 2371 1495 2368 1421 2364 1490 2361 1524 2358 1524 2354 1564 2351 1578 2348 1562 2344 1594 2341 1563 2337 1567 2334 1557 2331 1608 2327 1583 2324 1572 2321 1583 2317 1591 2314 1606 2311 1599 2307 1616 2304 1550 2300 1506 2297 1500 2294 1514 2290 1532 2287 1496 2284 1531 2280 1521 2277 1473 2274 1475 2270 1494 2267 1516 2263 1548 2260 1595 2257 1553 2253 1612 2250 1591 2247 1552 2243 1642 2240 1544 2237 1534 2233 1541 2230 1604 2226 1720 2223 1732 2220 1681 2216 1546 2213 1500 2210 1471 2206 1458 2203 1481 2200 1497 2196 1496 2193 1530 2189 1408 2186 1490 2183 1498 2179 1503 2176 1517 2173 1443 2169 1388 2166 1367 2163 1355 2159 1347 2156 1359 2152 1326 2149 1313 2146 1312 2142 1204 2139 1178 2136 1226 2132 1248 2129 1280 2126 1304 2122 1303 2119 1349 2115 1412 2112 1363 2109 1302 2105 1296 2102 1288 2099 1285 2095 1308 2092 1325 2089 1282 2085 1267 2082 1255 2078 1276 2075 1265 2072 1285 2068 1260 2065 1271 2062 1265 2058 1278 2055 1274 2052 1246 2048 1240 2045 1269 2041 1261 2038 1245 2035 1231 2031 1216 2028 1219 2025 1208 2021 1213 2018 1184 2015 1179 2011 1226 2008 1169 2004 1192 2001 1217 1998 1217 1994 1215 1991 1243 1988 1239 1984 1296 1981 1299 1978 1290 1974 1265 1971 1311 1967 1326 1964 1310 1961 1254 1957 1249 1954 1323 1951 1255 1947 1218 1944 1178 1941 1224 1937 1235 1934 1256 1930 1289 1927 1276 1924 1331 1920 1303 1917 1291 1914 1301 1910 1290 1907 1285 1904 1296 1900 1314 1897 1306 1893 1280 1890 1320 1887 1340 1883 1337 1880 1299 1877 1360 1873 1341 1870 1357 1867 1293 1863 1283 1860 1308 1856 1278 1853 1259 1850 1286 1846 1327 1843 1353 1840 1337 1836 1379 1833 1335 1830 1284 1826 1295 1823 1299 1819 1257 1816 1241 1813 1247 1809 1259 1806 1221 1803 1252 1799 1187 1796 1171 1793 1239 1789 1259 1786 1254 1782 1271 1779 1286 1776 1298 1772 1328 1769 1384 1766 1428 1762 1443 1759 1424 1756 1440 1752 1458 1749 1458 1745 1487 1742 1453 1739 1522 1735 1641 1732 1565 1729 1567 1725 1578 1722 1633 1719 1649 1715 1702 1712 1686 1708 1629 1705 1621 1702 1639 1698 1586 1695 1588 1692 1668 1688 1697 1685 1697 1682 1638 1678 1617 1675 1576 1671 1549 1668 1548 1665 1586 1661 1576 1658 1568 1655 1590 1651 1574 1648 1636 1645 1688 1641 1659 1638 1630 1634 1594 1631 1587 1628 1545 1624 1578 1621 1528 1618 1519 1614 1510 1611 1535 1608 1527 1604 1452 1601 1451 1597 1478 1594 1458 1591 1500 1587 1503 1584 1535 1581 1519 1577 1548 1574 1544 1571 1570 1567 1601 1564 1631 1560 1647 1557 1644 1554 1650 1550 1656 1547 1661 1544 1645 1540 1672 1537 1692 1534 1685 1530 1697 1527 1728 1523 1726 1520 1733 1517 1769 1513 1779 1510 1831 1507 1871 1503 1898 1500 1873 1497 1850 1493 1830 1490 1812 1486 1806 1483 1811 1480 1850 1476 1833 1473 1833 1470 1828 1466 1842 1463 1812 1460 1824 1456 1812 1453 1867 1449 1792 1446 1775 1443 1806 1439 1808 1436 1792 1433 1796 1429 1810 1426 1795 1423 1794 1419 1799 1416 1807 1412 1865 1409 1858 1406 1846 1402 1862 1399 1846 1396 1763 1392 1778 1389 1783 1386 1785 1382 1809 1379 1796 1375 1801 1372 1815 1369 1815 1365 1816 1362 1842 1359 1865 1355 1874 1352 1879 1349 1903 1345 1903 1342 1927 1338 1932 1335 1932 1332 1929 1328 1920 1325 1910 1322 1920 1318 1871 1315 1867 1312 1854 1308 1880 1305 1892 1301 1889 1298 1936 1295 1951 1291 1942 1288 1968 1285 1935 1281 1925 1278 1903 1275 1927 1271 1930 1268 1924 1264 1924 1261 1913 1258 1950 1254 1960 1251 1959 1248 1971 1244 1989 1241 2010 1238 2020 1234 2021 1231 2011 1227 2009 1224 1991 1221 1985 1217 1987 1214 1985 1211 2002 1207 1983 1204 1953 1201 1945 1197 1956 1194 1984 1190 1979 1187 1986 1184 2006 1180 2030 1177 2019 1174 2012 1170 2043 1167 2039 1164 2070 1160 2089 1157 2091 1153 2096 1150 2096 1147 2115 1143 2139 1140 2125 1137 2126 1133 2128 1130 2148 1127 2141 1123 2139 1120 2133 1116 2115 1113 2138 1110 2141 1106 2145 1103 2139 1100 2134 1096 2194 1093 2205 1090 2322 1086 2303 1083 2305 1079 2322 1076 2338 1073 2341 1069 2330 1066 2336 1063 2326 1059 2307 1056 2326 1053 2326 1049 2303 1046 2284 1042 2274 1039 2276 1036 2290 1032 2289 1029 2288 1026 2281 1022 2267 1019 2283 1016 2300 1012 2311 1009 2304 1005 2304 1002 2317 999 2322 995 2306 992 2290 989 2291 985 2305 982 2307 979 2306 975 2301 972 2305 968 2314 965 2318 962 2314 958 2342 955 2329 952 2315 948 2321 945 2305 942 2288 938 2264 935 2270 931 2269 928 2292 925 2292 921 2311 918 2336 915 2355 911 2363 908 2374 905 2393 901 2396 898 2398 894 2395 891 2380 888 2261 884 2273 881 2246 878 2258 874 2265 871 2288 868 2251 864 2243 861 2272 857 2301 854 2308 851 2299 847 2280 844 2289 841 2279 837 2287 834 2254 831 2233 827 2250 824 2235 820 2225 817 2215 814 2208 810 2265 807 2277 804 2260 800 2249 797 2242 794 2250 790 2234 787 2232 783 2220 780 2218 777 2235 773 2214 770 2222 767 2218 763 2259 760 2246 757 2273 753 2307 750 2333 746 2344 743 2340 740 2357 736 2345 733 2347 730 2330 726 2321 723 2342 720 2343 716 2346 713 2342 709 2364 706 2341 703 2337 699 2333 696 2351 693 2344 689 2338 686 2360 683 2325 679 2336 676 2320 672 2338 669 2352 666 2348 662 2381 659 2393 656 2402 652 2409 649 2416 646 2425 642 2433 639 2441 635 2456 632 2438 629 2451 625 2450 622 2433 619 2438 615 2468 612 2452 609 2442 605 2455 602 2434 598 2430 595 2493 592 2480 588 2500 585 2525 582 2539 578 2499 575 2479 572 2492 568 2420 565 2389 561 2410 558 2418 555 2409 551 2436 548 2440 545 2428 541 2430 538 2436 535 2397 531 2403 528 2397 524 2399 521 2402 518 2384 514 2399 511 2411 508 2409 504 2433 501 2493 498 2528 494 2510 491 2507 487 2507 484 2496 481 2514 477 2530 474 2541 471 2539 467 2553 464 2571 461 2578 457 2573 454 2630 450 2611 447 2614 444 2596 440 2600 437 2600 434 2608 430 2610 427 2608 424 2625 420 2621 417 2641 413 2634 410 2625 407 2631 403 2656"></path>
 </g>
<desc>Points follow ...</desc>
<desc>Line</desc>
 <g stroke-width="3" stroke="Maroon" stroke-linejoin="round" stroke-linecap="round" stroke-dasharray="9 12" fill="none">
  <path d="M3797 810L3794 812 3791 814 3787 816 3784 818 3780 821 3777 823 3774 826 3770 829 3767 832 3764 836 3760 839 3757 842 3754 846 3750 850 3747 854 3743 861 3740 868 3737 876 3733 884 3730 891 3727 899 3723 907 3720 914 3717 922 3713 930 3710 938 3706 946 3703 954 3700 962 3696 970 3693 977 3690 985 3686 994 3683 1003 3680 1012 3676 1021 3673 1029 3669 1038 3666 1046 3663 1053 3659 1060 3656 1067 3653 1074 3649 1081 3646 1087 3643 1093 3639 1100 3636 1106 3632 1113 3629 1120 3626 1127 3622 1133 3619 1141 3616 1148 3612 1155 3609 1162 3606 1169 3602 1177 3599 1184 3595 1191 3592 1199 3589 1206 3585 1213 3582 1221 3579 1229 3575 1236 3572 1245 3569 1253 3565 1260 3562 1267 3558 1274 3555 1281 3552 1288 3548 1295 3545 1302 3542 1309 3538 1315 3535 1321 3532 1327 3528 1333 3525 1338 3521 1343 3518 1348 3515 1354 3511 1359 3508 1364 3505 1369 3501 1374 3498 1378 3495 1383 3491 1387 3488 1392 3484 1397 3481 1402 3478 1407 3474 1412 3471 1417 3468 1421 3464 1426 3461 1431 3458 1435 3454 1439 3451 1442 3447 1446 3444 1449 3441 1451 3437 1453 3434 1455 3431 1457 3427 1458 3424 1460 3421 1463 3417 1466 3414 1470 3410 1474 3407 1476 3404 1479 3400 1482 3397 1485 3394 1488 3390 1491 3387 1493 3384 1496 3380 1498 3377 1500 3373 1501 3370 1503 3367 1505 3363 1507 3360 1509 3357 1510 3353 1512 3350 1514 3347 1516 3343 1518 3340 1520 3336 1522 3333 1523 3330 1525 3326 1527 3323 1529 3320 1530 3316 1532 3313 1533 3310 1535 3306 1538 3303 1541 3299 1544 3296 1547 3293 1550 3289 1553 3286 1556 3283 1559 3279 1562 3276 1565 3273 1568 3269 1570 3266 1573 3262 1576 3259 1579 3256 1582 3252 1586 3249 1590 3246 1593 3242 1597 3239 1601 3236 1605 3232 1609 3229 1614 3225 1618 3222 1622 3219 1628 3215 1632 3212 1637 3209 1641 3205 1646 3202 1650 3199 1654 3195 1658 3192 1662 3188 1667 3185 1671 3182 1675 3178 1678 3175 1682 3172 1685 3168 1688 3165 1691 3162 1694 3158 1698 3155 1702 3151 1706 3148 1710 3145 1715 3141 1719 3138 1725 3135 1730 3131 1735 3128 1740 3125 1745 3121 1749 3118 1752 3114 1755 3111 1757 3108 1760 3104 1764 3101 1767 3098 1769 3094 1770 3091 1770 3088 1771 3084 1771 3081 1771 3077 1772 3074 1772 3071 1772 3067 1772 3064 1771 3061 1771 3057 1772 3054 1772 3051 1773 3047 1772 3044 1772 3040 1772 3037 1772 3034 1772 3030 1772 3027 1772 3024 1772 3020 1772 3017 1772 3014 1771 3010 1771 3007 1771 3003 1769 3000 1767 2997 1766 2993 1765 2990 1765 2987 1765 2983 1765 2980 1764 2977 1764 2973 1763 2970 1762 2966 1761 2963 1760 2960 1760 2956 1760 2953 1760 2950 1760 2946 1760 2943 1760 2940 1760 2936 1759 2933 1758 2929 1758 2926 1758 2923 1759 2919 1759 2916 1759 2913 1760 2909 1761 2906 1761 2903 1762 2899 1763 2896 1764 2892 1764 2889 1766 2886 1767 2882 1767 2879 1767 2876 1766 2872 1767 2869 1768 2866 1770 2862 1770 2859 1770 2855 1770 2852 1769 2849 1769 2845 1768 2842 1768 2839 1767 2835 1764 2832 1761 2829 1759 2825 1756 2822 1753 2818 1750 2815 1747 2812 1744 2808 1741 2805 1738 2802 1736 2798 1733 2795 1730 2792 1729 2788 1727 2785 1726 2781 1724 2778 1722 2775 1720 2771 1718 2768 1716 2765 1715 2761 1714 2758 1713 2755 1711 2751 1709 2748 1707 2744 1706 2741 1704 2738 1702 2734 1701 2731 1699 2728 1698 2724 1697 2721 1695 2718 1693 2714 1691 2711 1689 2707 1686 2704 1683 2701 1680 2697 1677 2694 1673 2691 1669 2687 1665 2684 1661 2681 1658 2677 1655 2674 1652 2670 1649 2667 1646 2664 1644 2660 1641 2657 1638 2654 1635 2650 1632 2647 1629 2644 1626 2640 1623 2637 1619 2633 1617 2630 1614 2627 1611 2623 1608 2620 1604 2617 1601 2613 1598 2610 1595 2607 1591 2603 1588 2600 1584 2596 1580 2593 1576 2590 1572 2586 1568 2583 1564 2580 1560 2576 1557 2573 1554 2570 1550 2566 1547 2563 1544 2559 1541 2556 1539 2553 1536 2549 1533 2546 1531 2543 1528 2539 1524 2536 1522 2533 1520 2529 1521 2526 1521 2522 1522 2519 1521 2516 1519 2512 1518 2509 1516 2506 1514 2502 1513 2499 1511 2496 1510 2492 1508 2489 1507 2485 1507 2482 1506 2479 1507 2475 1506 2472 1506 2469 1505 2465 1505 2462 1503 2459 1502 2455 1501 2452 1499 2448 1498 2445 1496 2442 1493 2438 1491 2435 1489 2432 1487 2428 1486 2425 1483 2422 1482 2418 1480 2415 1479 2411 1477 2408 1475 2405 1474 2401 1473 2398 1473 2395 1472 2391 1471 2388 1470 2385 1468 2381 1467 2378 1465 2374 1463 2371 1460 2368 1459 2364 1456 2361 1453 2358 1451 2354 1447 2351 1443 2348 1440 2344 1436 2341 1433 2337 1429 2334 1425 2331 1421 2327 1417 2324 1413 2321 1408 2317 1404 2314 1400 2311 1395 2307 1390 2304 1386 2300 1383 2297 1380 2294 1377 2290 1374 2287 1372 2284 1369 2280 1366 2277 1364 2274 1362 2270 1360 2267 1358 2263 1355 2260 1351 2257 1348 2253 1345 2250 1340 2247 1336 2243 1332 2240 1328 2237 1325 2233 1322 2230 1319 2226 1314 2223 1309 2220 1305 2216 1302 2213 1300 2210 1298 2206 1296 2203 1294 2200 1292 2196 1290 2193 1288 2189 1287 2186 1285 2183 1283 2179 1281 2176 1279 2173 1278 2169 1277 2166 1276 2163 1276 2159 1275 2156 1274 2152 1274 2149 1274 2146 1274 2142 1276 2139 1278 2136 1279 2132 1279 2129 1280 2126 1280 2122 1279 2119 1278 2115 1276 2112 1275 2109 1274 2105 1273 2102 1272 2099 1271 2095 1270 2092 1270 2089 1269 2085 1269 2082 1270 2078 1270 2075 1271 2072 1272 2068 1274 2065 1276 2062 1277 2058 1279 2055 1281 2052 1283 2048 1286 2045 1288 2041 1291 2038 1296 2035 1299 2031 1303 2028 1307 2025 1312 2021 1317 2018 1322 2015 1328 2011 1333 2008 1338 2004 1343 2001 1347 1998 1351 1994 1356 1991 1361 1988 1366 1984 1370 1981 1373 1978 1376 1974 1380 1971 1382 1967 1385 1964 1388 1961 1392 1957 1395 1954 1398 1951 1402 1947 1408 1944 1413 1941 1418 1937 1421 1934 1425 1930 1428 1927 1431 1924 1434 1920 1436 1917 1438 1914 1441 1910 1444 1907 1445 1904 1447 1900 1449 1897 1451 1893 1453 1890 1455 1887 1457 1883 1459 1880 1462 1877 1464 1873 1467 1870 1469 1867 1473 1863 1477 1860 1481 1856 1485 1853 1490 1850 1494 1846 1497 1843 1501 1840 1505 1836 1508 1833 1512 1830 1517 1826 1522 1823 1527 1819 1532 1816 1538 1813 1545 1809 1552 1806 1559 1803 1566 1799 1573 1796 1581 1793 1587 1789 1593 1786 1599 1782 1606 1779 1612 1776 1618 1772 1623 1769 1628 1766 1633 1762 1637 1759 1641 1756 1646 1752 1650 1749 1653 1745 1657 1742 1661 1739 1664 1735 1665 1732 1668 1729 1671 1725 1673 1722 1675 1719 1677 1715 1678 1712 1680 1708 1683 1705 1685 1702 1688 1698 1690 1695 1692 1692 1693 1688 1694 1685 1695 1682 1697 1678 1699 1675 1702 1671 1705 1668 1708 1665 1711 1661 1714 1658 1717 1655 1720 1651 1724 1648 1727 1645 1730 1641 1733 1638 1736 1634 1740 1631 1743 1628 1748 1624 1751 1621 1755 1618 1759 1614 1763 1611 1767 1608 1771 1604 1776 1601 1781 1597 1786 1594 1792 1591 1797 1587 1802 1584 1806 1581 1810 1577 1814 1574 1819 1571 1823 1567 1826 1564 1829 1560 1833 1557 1836 1554 1840 1550 1843 1547 1847 1544 1851 1540 1855 1537 1858 1534 1862 1530 1865 1527 1868 1523 1871 1520 1874 1517 1877 1513 1879 1510 1881 1507 1882 1503 1882 1500 1883 1497 1885 1493 1886 1490 1888 1486 1890 1483 1893 1480 1895 1476 1897 1473 1899 1470 1901 1466 1904 1463 1907 1460 1910 1456 1913 1453 1916 1449 1919 1446 1923 1443 1927 1439 1930 1436 1934 1433 1938 1429 1942 1426 1946 1423 1949 1419 1953 1416 1956 1412 1960 1409 1963 1406 1966 1402 1969 1399 1973 1396 1978 1392 1984 1389 1990 1386 1995 1382 2001 1379 2007 1375 2013 1372 2019 1369 2025 1365 2030 1362 2035 1359 2041 1355 2046 1352 2050 1349 2055 1345 2059 1342 2063 1338 2066 1335 2070 1332 2074 1328 2078 1325 2082 1322 2086 1318 2091 1315 2096 1312 2101 1308 2106 1305 2111 1301 2115 1298 2120 1295 2123 1291 2127 1288 2131 1285 2135 1281 2139 1278 2144 1275 2148 1271 2152 1268 2157 1264 2161 1261 2166 1258 2170 1254 2174 1251 2178 1248 2182 1244 2185 1241 2188 1238 2190 1234 2193 1231 2196 1227 2199 1224 2203 1221 2207 1217 2211 1214 2215 1211 2219 1207 2224 1204 2229 1201 2234 1197 2239 1194 2243 1190 2246 1187 2249 1184 2252 1180 2255 1177 2257 1174 2260 1170 2263 1167 2265 1164 2267 1160 2270 1157 2272 1153 2274 1150 2276 1147 2278 1143 2280 1140 2282 1137 2283 1133 2284 1130 2285 1127 2286 1123 2287 1120 2288 1116 2289 1113 2291 1110 2292 1106 2293 1103 2295 1100 2296 1096 2297 1093 2297 1090 2296 1086 2295 1083 2294 1079 2293 1076 2292 1073 2290 1069 2289 1066 2288 1063 2287 1059 2287 1056 2287 1053 2287 1049 2287 1046 2288 1042 2289 1039 2290 1036 2290 1032 2291 1029 2291 1026 2292 1022 2293 1019 2293 1016 2294 1012 2294 1009 2295 1005 2295 1002 2295 999 2296 995 2296 992 2297 989 2297 985 2298 982 2298 979 2298 975 2298 972 2299 968 2299 965 2300 962 2301 958 2302 955 2302 952 2304 948 2305 945 2306 942 2308 938 2310 935 2312 931 2314 928 2316 925 2317 921 2319 918 2320 915 2321 911 2322 908 2323 905 2323 901 2324 898 2325 894 2326 891 2327 888 2330 884 2333 881 2336 878 2338 874 2341 871 2342 868 2344 864 2346 861 2347 857 2348 854 2350 851 2351 847 2353 844 2355 841 2356 837 2358 834 2359 831 2361 827 2363 824 2365 820 2366 817 2368 814 2371 810 2372 807 2374 804 2377 800 2380 797 2383 794 2386 790 2389 787 2391 783 2395 780 2398 777 2402 773 2405 770 2409 767 2413 763 2416 760 2420 757 2424 753 2427 750 2430 746 2433 743 2436 740 2439 736 2442 733 2445 730 2448 726 2451 723 2454 720 2458 716 2461 713 2464 709 2467 706 2470 703 2337 699 2333 696 2351 693 2344 689 2338 686 2360 683 2325 679 2336 676 2320 672 2338 669 2352 666 2348 662 2381 659 2393 656 2402 652 2409 649 2416 646 2425 642 2433 639 2441 635 2456 632 2438 629 2451 625 2450 622 2433 619 2438 615 2468 612 2452 609 2442 605 2455 602 2434 598 2430 595 2493 592 2480 588 2500 585 2525 582 2539 578 2499 575 2479 572 2492 568 2420 565 2389 561 2410 558 2418 555 2409 551 2436 548 2440 545 2428 541 2430 538 2436 535 2397 531 2403 528 2397 524 2399 521 2402 518 2384 514 2399 511 2411 508 2409 504 2433 501 2493 498 2528 494 2510 491 2507 487 2507 484 2496 481 2514 477 2530 474 2541 471 2539 467 2553 464 2571 461 2578 457 2573 454 2630 450 2611 447 2614 444 2596 440 2600 437 2600 434 2608 430 2610 427 2608 424 2625 420 2621 417 2641 413 2634 410 2625 407 2631 403 2656"></path>
 </g>
<desc>Points follow ...</desc>
<desc>Line</desc>
 <g stroke-width="3" stroke="Teal" stroke-linejoin="round" stroke-linecap="round" stroke-dasharray="0.3 5.7" fill="none">
  <path d="M3797 810L3794 812 3791 814 3787 816 3784 818 3780 821 3777 823 3774 826 3770 829 3767 832 3764 836 3760 839 3757 842 3754 846 3750 850 3747 854 3743 861 3740 868 3737 876 3733 884 3730 891 3727 899 3723 907 3720 914 3717 922 3713 930 3710 938 3706 946 3703 954 3700 962 3696 970 3693 977 3690 985 3686 994 3683 1003 3680 1012 3676 1021 3673 1029 3669 1038 3666 1046 3663 1053 3659 1060 3656 1067 3653 1074 3649 1081 3646 1087 3643 1093 3639 1100 3636 1106 3632 1113 3629 1120 3626 1127 3622 1133 3619 1141 3616 1148 3612 1155 3609 1162 3606 1169 3602 1177 3599 1184 3595 1191 3592 1199 3589 1206 3585 1213 3582 1221 3579 1229 3575 1236 3572 1245 3569 1253 3565 1260 3562 1267 3558 1274 3555 1281 3552 1288 3548 1295 3545 1302 3542 1309 3538 1315 3535 1321 3532 1327 3528 1333 3525 1338 3521 1343 3518 1348 3515 1354 3511 1359 3508 1364 3505 1369 3501 1374 3498 1378 3495 1383 3491 1387 3488 1392 3484 1397 3481 1402 3478 1407 3474 1412 3471 1417 3468 1421 3464 1426 3461 1431 3458 1435 3454 1439 3451 1442 3447 1446 3444 1449 3441 1451 3437 1453 3434 1455 3431 1457 3427 1458 3424 1460 3421 1463 3417 1466 3414 1470 3410 1474 3407 1476 3404 1479 3400 1482 3397 1485 3394 1488 3390 1491 3387 1493 3384 1496 3380 1498 3377 1500 3373 1501 3370 1503 3367 1505 3363 1507 3360 1509 3357 1510 3353 1512 3350 1514 3347 1516 3343 1518 3340 1520 3336 1522 3333 1523 3330 1525 3326 1527 3323 1529 3320 1530 3316 1532 3313 1533 3310 1535 3306 1538 3303 1541 3299 1544 3296 1547 3293 1550 3289 1553 3286 1556 3283 1559 3279 1562 3276 1565 3273 1568 3269 1570 3266 1573 3262 1576 3259 1579 3256 1582 3252 1586 3249 1590 3246 1593 3242 1597 3239 1601 3236 1605 3232 1609 3229 1614 3225 1618 3222 1622 3219 1628 3215 1632 3212 1637 3209 1641 3205 1646 3202 1650 3199 1654 3195 1658 3192 1662 3188 1667 3185 1671 3182 1675 3178 1678 3175 1682 3172 1685 3168 1688 3165 1691 3162 1694 3158 1698 3155 1702 3151 1706 3148 1710 3145 1715 3141 1719 3138 1725 3135 1730 3131 1735 3128 1740 3125 1745 3121 1749 3118 1752 3114 1755 3111 1757 3108 1760 3104 1764 3101 1767 3098 1769 3094 1770 3091 1770 3088 1771 3084 1771 3081 1771 3077 1772 3074 1772 3071 1772 3067 1772 3064 1771 3061 1771 3057 1772 3054 1772 3051 1773 3047 1772 3044 1772 3040 1772 3037 1772 3034 1772 3030 1772 3027 1772 3024 1772 3020 1772 3017 1772 3014 1771 3010 1771 3007 1771 3003 1769 3000 1767 2997 1766 2993 1765 2990 1765 2987 1765 2983 1765 2980 1764 2977 1764 2973 1763 2970 1762 2966 1761 2963 1760 2960 1760 2956 1760 2953 1760 2950 1760 2946 1760 2943 1760 2940 1760 2936 1759 2933 1758 2929 1758 2926 1758 2923 1759 2919 1759 2916 1759 2913 1760 2909 1761 2906 1761 2903 1762 2899 1763 2896 1764 2892 1764 2889 1766 2886 1767 2882 1767 2879 1767 2876 1766 2872 1767 2869 1768 2866 1770 2862 1770 2859 1770 2855 1770 2852 1769 2849 1769 2845 1768 2842 1768 2839 1767 2835 1764 2832 1761 2829 1759 2825 1756 2822 1753 2818 1750 2815 1747 2812 1744 2808 1741 2805 1738 2802 1736 2798 1733 2795 1730 2792 1729 2788 1727 2785 1726 2781 1724 2778 1722 2775 1720 2771 1718 2768 1716 2765 1715 2761 1714 2758 1713 2755 1711 2751 1709 2748 1707 2744 1706 2741 1704 2738 1702 2734 1701 2731 1699 2728 1698 2724 1697 2721 1695 2718 1693 2714 1691 2711 1689 2707 1686 2704 1683 2701 1680 2697 1677 2694 1673 2691 1669 2687 1665 2684 1661 2681 1658 2677 1655 2674 1652 2670 1649 2667 1646 2664 1644 2660 1641 2657 1638 2654 1635 2650 1632 2647 1629 2644 1626 2640 1623 2637 1619 2633 1617 2630 1614 2627 1611 2623 1608 2620 1604 2617 1601 2613 1598 2610 1595 2607 1591 2603 1588 2600 1584 2596 1580 2593 1576 2590 1572 2586 1568 2583 1564 2580 1560 2576 1557 2573 1554 2570 1550 2566 1547 2563 1544 2559 1541 2556 1539 2553 1536 2549 1533 2546 1531 2543 1528 2539 1524 2536 1522 2533 1520 2529 1521 2526 1521 2522 1522 2519 1521 2516 1519 2512 1518 2509 1516 2506 1514 2502 1513 2499 1511 2496 1510 2492 1508 2489 1507 2485 1507 2482 1506 2479 1507 2475 1506 2472 1506 2469 1505 2465 1505 2462 1503 2459 1502 2455 1501 2452 1499 2448 1498 2445 1496 2442 1493 2438 1491 2435 1489 2432 1487 2428 1486 2425 1483 2422 1482 2418 1480 2415 1479 2411 1477 2408 1475 2405 1474 2401 1473 2398 1473 2395 1472 2391 1471 2388 1470 2385 1468 2381 1467 2378 1465 2374 1463 2371 1460 2368 1459 2364 1456 2361 1453 2358 1451 2354 1447 2351 1443 2348 1440 2344 1436 2341 1433 2337 1429 2334 1425 2331 1421 2327 1417 2324 1413 2321 1408 2317 1404 2314 1400 2311 1395 2307 1390 2304 1386 2300 1383 2297 1380 2294 1377 2290 1374 2287 1372 2284 1369 2280 1366 2277 1364 2274 1362 2270 1360 2267 1358 2263 1355 2260 1351 2257 1348 2253 1345 2250 1340 2247 1336 2243 1332 2240 1328 2237 1325 2233 1322 2230 1319 2226 1314 2223 1309 2220 1305 2216 1302 2213 1300 2210 1298 2206 1296 2203 1294 2200 1292 2196 1290 2193 1288 2189 1287 2186 1285 2183 1283 2179 1281 2176 1279 2173 1278 2169 1277 2166 1276 2163 1276 2159 1275 2156 1274 2152 1274 2149 1274 2146 1274 2142 1276 2139 1278 2136 1279 2132 1279 2129 1280 2126 1280 2122 1279 2119 1278 2115 1276 2112 1275 2109 1274 2105 1273 2102 1272 2099 1271 2095 1270 2092 1270 2089 1269 2085 1269 2082 1270 2078 1270 2075 1271 2072 1272 2068 1274 2065 1276 2062 1277 2058 1279 2055 1281 2052 1283 2048 1286 2045 1288 2041 1291 2038 1296 2035 1299 2031 1303 2028 1307 2025 1312 2021 1317 2018 1322 2015 1328 2011 1333 2008 1338 2004 1343 2001 1347 1998 1351 1994 1356 1991 1361 1988 1366 1984 1370 1981 1373 1978 1376 1974 1380 1971 1382 1967 1385 1964 1388 1961 1392 1957 1395 1954 1398 1951 1402 1947 1408 1944 1413 1941 1418 1937 1421 1934 1425 1930 1428 1927 1431 1924 1434 1920 1436 1917 1438 1914 1441 1910 1444 1907 1445 1904 1447 1900 1449 1897 1451 1893 1453 1890 1455 1887 1457 1883 1459 1880 1462 1877 1464 1873 1467 1870 1469 1867 1473 1863 1477 1860 1481 1856 1485 1853 1490 1850 1494 1846 1497 1843 1501 1840 1505 1836 1508 1833 1512 1830 1517 1826 1522 1823 1527 1819 1532 1816 1538 1813 1545 1809 1552 1806 1559 1803 1566 1799 1573 1796 1581 1793 1587 1789 1593 1786 1599 1782 1606 1779 1612 1776 1618 1772 1623 1769 1628 1766 1633 1762 1637 1759 1641 1756 1646 1752 1650 1749 1653 1745 1657 1742 1661 1739 1664 1735 1665 1732 1668 1729 1671 1725 1673 1722 1675 1719 1677 1715 1678 1712 1680 1708 1683 1705 1685 1702 1688 1698 1690 1695 1692 1692 1693 1688 1694 1685 1695 1682 1697 1678 1699 1675 1702 1671 1705 1668 1708 1665 1711 1661 1714 1658 1717 1655 1720 1651 1724 1648 1727 1645 1730 1641 1733 1638 1736 1634 1740 1631 1743 1628 1748 1624 1751 1621 1755 1618 1759 1614 1763 1611 1767 1608 1771 1604 1776 1601 1781 1597 1786 1594 1792 1591 1797 1587 1802 1584 1806 1581 1810 1577 1814 1574 1819 1571 1823 1567 1826 1564 1829 1560 1833 1557 1836 1554 1840 1550 1843 1547 1847 1544 1851 1540 1855 1537 1858 1534 1862 1530 1865 1527 1868 1523 1871 1520 1874 1517 1877 1513 1879 1510 1881 1507 1882 1503 1882 1500 1883 1497 1885 1493 1886 1490 1888 1486 1890 1483 1893 1480 1895 1476 1897 1473 1899 1470 1901 1466 1904 1463 1907 1460 1910 1456 1913 1453 1916 1449 1919 1446 1923 1443 1927 1439 1930 1436 1934 1433 1938 1429 1942 1426 1946 1423 1949 1419 1953 1416 1956 1412 1960 1409 1963 1406 1966 1402 1969 1399 1973 1396 1978 1392 1984 1389 1990 1386 1995 1382 2001 1379 2007 1375 2013 1372 2019 1369 2025 1365 2030 1362 2035 1359 2041 1355 2046 1352 2050 1349 2055 1345 2059 1342 2063 1338 2066 1335 2070 1332 2074 1328 2078 1325 2082 1322 2086 1318 2091 1315 2096 1312 2101 1308 2106 1305 2111 1301 2115 1298 2120 1295 2123 1291 2127 1288 2131 1285 2135 1281 2139 1278 2144 1275 2148 1271 2152 1268 2157 1264 2161 1261 2166 1258 2170 1254 2174 1251 2178 1248 2182 1244 2185 1241 2188 1238 2190 1234 2193 1231 2196 1227 2199 1224 2203 1221 2207 1217 2211 1214 2215 1211 2219 1207 2224 1204 2229 1201 2234 1197 2239 1194 2243 1190 2246 1187 2249 1184 2252 1180 2255 1177 2257 1174 2260 1170 2263 1167 2265 1164 2267 1160 2270 1157 2272 1153 2274 1150 2276 1147 2278 1143 2280 1140 2282 1137 2283 1133 2284 1130 2285 1127 2286 1123 2287 1120 2288 1116 2289 1113 2291 1110 2292 1106 2293 1103 2295 1100 2296 1096 2297 1093 2297 1090 2296 1086 2295 1083 2294 1079 2293 1076 2292 1073 2290 1069 2289 1066 2288 1063 2287 1059 2287 1056 2287 1053 2287 1049 2287 1046 2288 1042 2289 1039 2290 1036 2290 1032 2291 1029 2291 1026 2292 1022 2293 1019 2293 1016 2294 1012 2294 1009 2295 1005 2295 1002 2295 999 2296 995 2296 992 2297 989 2297 985 2298 982 2298 979 2298 975 2298 972 2299 968 2299 965 2300 962 2301 958 2302 955 2302 952 2304 948 2305 945 2306 942 2308 938 2310 935 2312 931 2314 928 2316 925 2317 921 2319 918 2320 915 2321 911 2322 908 2323 905 2323 901 2324 898 2325 894 2326 891 2327 888 2330 884 2333 881 2336 878 2338 874 2341 871 2342 868 2344 864 2346 861 2347 857 2348 854 2350 851 2351 847 2353 844 2355 841 2356 837 2358 834 2359 831 2361 827 2363 824 2365 820 2366 817 2368 814 2371 810 2372 807 2374 804 2377 800 2380 797 2383 794 2386 790 2389 787 2391 783 2395 780 2398 777 2402 773 2405 770 2409 767 2413 763 2416 760 2420 757 2424 753 2427 750 2430 746 2433 743 2436 740 2439 736 2442 733 2445 730 2448 726 2451 723 2454 720 2458 716 2461 713 2464 709 2467 706 2470 703 2337 699 2333 696 2351 693 2344 689 2338 686 2360 683 2325 679 2336 676 2320 672 2338 669 2352 666 2348 662 2381 659 2393 656 2402 652 2409 649 2416 646 2425 642 2433 639 2441 635 2456 632 2438 629 2451 625 2450 622 2433 619 2438 615 2468 612 2452 609 2442 605 2455 602 2434 598 2430 595 2493 592 2480 588 2500 585 2525 582 2539 578 2499 575 2479 572 2492 568 2420 565 2389 561 2410 558 2418 555 2409 551 2436 548 2440 545 2428 541 2430 538 2436 535 2397 531 2403 528 2397 524 2399 521 2402 518 2384 514 2399 511 2411 508 2409 504 2433 501 2493 498 2528 494 2510 491 2507 487 2507 484 2496 481 2514 477 2530 474 2541 471 2539 467 2553 464 2571 461 2578 457 2573 454 2630 450 2611 447 2614 444 2596 440 2600 437 2600 434 2608 430 2610 427 2608 424 2625 420 2621 417 2641 413 2634 410 2625 407 2631 403 2656"></path>
 </g>
<desc>Reset to original origin</desc>
</g>
</svg>
</div>
<div class="cell-output cell-output-display">
<span style="white-space:pre; font-family: monospace">┌⊖┐
⌽0│
└~┘
</span>
</div>
</div>
</section>
<section id="full-solution" class="level2" data-number="2.5">
<h2 data-number="2.5" class="anchored" data-anchor-id="full-solution"><span class="header-section-number">2.5</span> Full Solution</h2>
<div id="7b0780ab" class="cell">
<pre class="apl cell-code"><code>eod_ar ← ⎕CSV 'eod-quotemedia.csv' '' 4
col_loc ← ,/ ⍸ 1⌷eod_ar ∊ ⊂'ticker'       
AAPL ← eod_ar ⌿⍨ eod_ar[;col_loc] ∊ ⊂ 'AAPL'  
movavg ← (ws ↑ AAPL[;3]) , ws ÷⍨ (ws←90) +⌿ AAPL[;3]
]Plot AAPL[;3] movavg movavg</code></pre>
<div class="cell-output cell-output-display">
<svg version="1.1" baseprofile="full" width="100%" height="100%" viewbox="0 0 4320 3240" xmlns="http://www.w3.org/2000/svg" xlink="http://www.w3.org/1999/xlink" xmlns:ev="http://www.w3.org/2001/xml-events">
<desc>Created by Causeway SVG engine - SharpPlot v3.71.0</desc>
<g stroke-miterlimit="100">
<desc>Paint the paper =====</desc>
 <g fill="White">
  <rect x="0" y="0" width="4320" height="3240"></rect>
 </g>
<desc>Border =====</desc>
<desc>Region =====</desc>
<desc>X-Axis Ticks =====</desc>
<desc>X-Axis tickmarks</desc>
 <path fill="none" stroke-width="7.2" stroke="Black" d="M400 2720L400 2764M736 2720L736 2764M1073 2720L1073 2764M1409 2720L1409 2764M1745 2720L1745 2764M2082 2720L2082 2764M2418 2720L2418 2764M2755 2720L2755 2764M3091 2720L3091 2764M3427 2720L3427 2764M3764 2720L3764 2764M4100 2720L4100 2764"></path>
<desc>Y-Axis Ticks =====</desc>
<desc>Y-Axis tickmarks</desc>
 <path fill="none" stroke-width="7.2" stroke="Black" d="M400 2720L367 2720M400 2515L367 2515M400 2309L367 2309M400 2104L367 2104M400 1898L367 1898M400 1693L367 1693M400 1487L367 1487M400 1282L367 1282M400 1076L367 1076M400 871L367 871M400 665L367 665M400 460L367 460"></path>
<desc>Axes =====</desc>
 <path fill="none" stroke-width="12" stroke="Black" d="M400 2764L400 416M356 2720L4144 2720"></path>
<desc>Y-axis labels</desc>
 <g font-family="Times New Roman" font-size="80" text-anchor="end">
  <text x="335" y="2740">50</text>
  <text x="335" y="2535">60</text>
  <text x="335" y="2329">70</text>
  <text x="335" y="2124">80</text>
  <text x="335" y="1918">90</text>
  <text x="335" y="1713">100</text>
  <text x="335" y="1507">110</text>
  <text x="335" y="1302">120</text>
  <text x="335" y="1096">130</text>
  <text x="335" y="891">140</text>
  <text x="335" y="685">150</text>
  <text x="335" y="480">160</text>
 </g>
<desc>for X-axis labels</desc>
 <g font-family="Times New Roman" font-size="80" text-anchor="middle">
  <text x="400" y="2844">0</text>
  <text x="736" y="2844">100</text>
  <text x="1073" y="2844">200</text>
  <text x="1409" y="2844">300</text>
  <text x="1745" y="2844">400</text>
  <text x="2082" y="2844">500</text>
  <text x="2418" y="2844">600</text>
  <text x="2755" y="2844">700</text>
  <text x="3091" y="2844">800</text>
  <text x="3427" y="2844">900</text>
  <text x="3764" y="2844">1000</text>
  <text x="4100" y="2844">1100</text>
 </g>
<desc>Heading, subheading and footnotes =====</desc>
<desc>Start of Line Chart ===========</desc>
<desc>Points follow ...</desc>
<desc>Line</desc>
 <g stroke-width="3" stroke="Navy" stroke-linejoin="round" stroke-linecap="round" fill="none">
  <path d="M3794 834L3791 841 3787 797 3784 840 3780 798 3777 788 3774 801 3770 796 3767 814 3764 787 3760 869 3757 828 3754 811 3750 782 3747 806 3743 734 3740 612 3737 604 3733 623 3730 633 3727 603 3723 649 3720 657 3717 639 3713 640 3710 635 3706 645 3703 636 3700 632 3696 651 3693 662 3690 708 3686 602 3683 598 3680 590 3676 633 3673 660 3669 645 3666 665 3663 746 3659 795 3656 785 3653 775 3649 794 3646 853 3643 850 3639 853 3636 836 3632 853 3629 881 3626 878 3622 913 3619 903 3616 890 3612 906 3609 891 3606 894 3602 863 3599 859 3595 853 3592 846 3589 831 3585 852 3582 853 3579 848 3575 844 3572 850 3569 909 3565 914 3562 908 3558 898 3555 930 3552 897 3548 927 3545 913 3542 918 3538 947 3535 943 3532 944 3528 953 3525 947 3521 936 3518 940 3515 931 3511 948 3508 931 3505 987 3501 989 3498 994 3495 997 3491 985 3488 993 3484 1013 3481 1021 3478 1017 3474 1027 3471 1062 3468 1086 3464 1079 3461 1099 3458 1109 3454 1134 3451 1158 3447 1169 3444 1165 3441 1313 3437 1307 3434 1301 3431 1301 3427 1302 3424 1341 3421 1338 3417 1340 3414 1344 3410 1340 3407 1340 3404 1359 3400 1355 3397 1345 3394 1358 3390 1360 3387 1382 3384 1408 3380 1420 3377 1417 3373 1424 3370 1406 3367 1405 3363 1395 3360 1410 3357 1414 3353 1399 3350 1401 3347 1407 3343 1421 3340 1424 3336 1437 3333 1437 3330 1474 3326 1461 3323 1498 3320 1520 3316 1542 3313 1559 3310 1543 3306 1551 3303 1530 3299 1511 3296 1509 3293 1505 3289 1516 3286 1505 3283 1506 3279 1539 3276 1542 3273 1541 3269 1599 3266 1627 3262 1572 3259 1585 3256 1523 3252 1519 3249 1532 3246 1564 3242 1544 3239 1520 3236 1522 3232 1481 3229 1478 3225 1463 3222 1441 3219 1387 3215 1399 3212 1420 3209 1411 3205 1410 3202 1403 3199 1401 3195 1400 3192 1413 3188 1406 3185 1426 3182 1431 3178 1471 3175 1474 3172 1491 3168 1492 3165 1502 3162 1491 3158 1509 3155 1473 3151 1490 3148 1495 3145 1498 3141 1460 3138 1481 3135 1481 3131 1481 3128 1454 3125 1441 3121 1517 3118 1593 3114 1643 3111 1689 3108 1641 3104 1585 3101 1598 3098 1597 3094 1617 3091 1630 3088 1632 3084 1616 3081 1613 3077 1601 3074 1591 3071 1575 3067 1582 3064 1565 3061 1570 3057 1568 3054 1564 3051 1562 3047 1588 3044 1593 3040 1592 3037 1576 3034 1585 3030 1602 3027 1634 3024 1647 3020 1673 3017 1642 3014 1679 3010 1676 3007 1704 3003 1828 3000 1815 2997 1789 2993 1774 2990 1763 2987 1765 2983 1766 2980 1787 2977 1786 2973 1824 2970 1814 2966 1822 2963 1828 2960 1843 2956 1851 2953 1862 2950 1844 2946 1850 2943 1873 2940 1890 2936 1920 2933 1893 2929 1840 2926 1851 2923 1843 2919 1860 2916 1855 2913 1811 2909 1819 2906 1813 2903 1815 2899 1786 2896 1769 2892 1783 2889 1782 2886 1790 2882 1804 2879 1808 2876 1793 2872 1765 2869 1755 2866 1754 2862 1770 2859 1804 2855 1833 2852 1857 2849 1877 2845 1870 2842 1892 2839 1884 2835 1950 2832 1954 2829 1911 2825 1893 2822 1905 2818 1907 2815 1896 2812 1889 2808 1869 2805 1900 2802 1898 2798 1876 2795 1817 2792 1689 2788 1674 2785 1662 2781 1657 2778 1634 2775 1638 2771 1627 2768 1580 2765 1536 2761 1537 2758 1568 2755 1596 2751 1604 2748 1606 2744 1558 2741 1581 2738 1555 2734 1577 2731 1597 2728 1586 2724 1623 2721 1672 2718 1663 2714 1653 2711 1642 2707 1658 2704 1658 2701 1660 2697 1657 2694 1684 2691 1725 2687 1730 2684 1751 2681 1752 2677 1754 2674 1737 2670 1715 2667 1745 2664 1760 2660 1764 2657 1840 2654 1835 2650 1838 2647 1851 2644 1879 2640 1836 2637 1853 2633 1848 2630 1811 2627 1841 2623 1893 2620 1899 2617 1887 2613 1873 2610 1873 2607 1892 2603 1841 2600 1857 2596 1893 2593 1855 2590 1837 2586 1901 2583 1914 2580 1785 2576 1796 2573 1757 2570 1858 2566 1848 2563 1850 2559 1841 2556 1794 2553 1836 2549 1786 2546 1814 2543 1845 2539 1855 2536 1771 2533 1732 2529 1680 2526 1682 2522 1641 2519 1613 2516 1651 2512 1627 2509 1616 2506 1643 2502 1641 2499 1667 2496 1609 2492 1562 2489 1579 2485 1540 2482 1526 2479 1468 2475 1478 2472 1427 2469 1426 2465 1412 2462 1487 2459 1465 2455 1445 2452 1426 2448 1435 2445 1431 2442 1414 2438 1437 2435 1406 2432 1416 2428 1446 2425 1516 2422 1507 2418 1543 2415 1476 2411 1469 2408 1456 2405 1381 2401 1372 2398 1374 2395 1363 2391 1352 2388 1379 2385 1412 2381 1392 2378 1417 2374 1509 2371 1495 2368 1421 2364 1490 2361 1524 2358 1524 2354 1564 2351 1578 2348 1562 2344 1594 2341 1563 2337 1567 2334 1557 2331 1608 2327 1583 2324 1572 2321 1583 2317 1591 2314 1606 2311 1599 2307 1616 2304 1550 2300 1506 2297 1500 2294 1514 2290 1532 2287 1496 2284 1531 2280 1521 2277 1473 2274 1475 2270 1494 2267 1516 2263 1548 2260 1595 2257 1553 2253 1612 2250 1591 2247 1552 2243 1642 2240 1544 2237 1534 2233 1541 2230 1604 2226 1720 2223 1732 2220 1681 2216 1546 2213 1500 2210 1471 2206 1458 2203 1481 2200 1497 2196 1496 2193 1530 2189 1408 2186 1490 2183 1498 2179 1503 2176 1517 2173 1443 2169 1388 2166 1367 2163 1355 2159 1347 2156 1359 2152 1326 2149 1313 2146 1312 2142 1204 2139 1178 2136 1226 2132 1248 2129 1280 2126 1304 2122 1303 2119 1349 2115 1412 2112 1363 2109 1302 2105 1296 2102 1288 2099 1285 2095 1308 2092 1325 2089 1282 2085 1267 2082 1255 2078 1276 2075 1265 2072 1285 2068 1260 2065 1271 2062 1265 2058 1278 2055 1274 2052 1246 2048 1240 2045 1269 2041 1261 2038 1245 2035 1231 2031 1216 2028 1219 2025 1208 2021 1213 2018 1184 2015 1179 2011 1226 2008 1169 2004 1192 2001 1217 1998 1217 1994 1215 1991 1243 1988 1239 1984 1296 1981 1299 1978 1290 1974 1265 1971 1311 1967 1326 1964 1310 1961 1254 1957 1249 1954 1323 1951 1255 1947 1218 1944 1178 1941 1224 1937 1235 1934 1256 1930 1289 1927 1276 1924 1331 1920 1303 1917 1291 1914 1301 1910 1290 1907 1285 1904 1296 1900 1314 1897 1306 1893 1280 1890 1320 1887 1340 1883 1337 1880 1299 1877 1360 1873 1341 1870 1357 1867 1293 1863 1283 1860 1308 1856 1278 1853 1259 1850 1286 1846 1327 1843 1353 1840 1337 1836 1379 1833 1335 1830 1284 1826 1295 1823 1299 1819 1257 1816 1241 1813 1247 1809 1259 1806 1221 1803 1252 1799 1187 1796 1171 1793 1239 1789 1259 1786 1254 1782 1271 1779 1286 1776 1298 1772 1328 1769 1384 1766 1428 1762 1443 1759 1424 1756 1440 1752 1458 1749 1458 1745 1487 1742 1453 1739 1522 1735 1641 1732 1565 1729 1567 1725 1578 1722 1633 1719 1649 1715 1702 1712 1686 1708 1629 1705 1621 1702 1639 1698 1586 1695 1588 1692 1668 1688 1697 1685 1697 1682 1638 1678 1617 1675 1576 1671 1549 1668 1548 1665 1586 1661 1576 1658 1568 1655 1590 1651 1574 1648 1636 1645 1688 1641 1659 1638 1630 1634 1594 1631 1587 1628 1545 1624 1578 1621 1528 1618 1519 1614 1510 1611 1535 1608 1527 1604 1452 1601 1451 1597 1478 1594 1458 1591 1500 1587 1503 1584 1535 1581 1519 1577 1548 1574 1544 1571 1570 1567 1601 1564 1631 1560 1647 1557 1644 1554 1650 1550 1656 1547 1661 1544 1645 1540 1672 1537 1692 1534 1685 1530 1697 1527 1728 1523 1726 1520 1733 1517 1769 1513 1779 1510 1831 1507 1871 1503 1898 1500 1873 1497 1850 1493 1830 1490 1812 1486 1806 1483 1811 1480 1850 1476 1833 1473 1833 1470 1828 1466 1842 1463 1812 1460 1824 1456 1812 1453 1867 1449 1792 1446 1775 1443 1806 1439 1808 1436 1792 1433 1796 1429 1810 1426 1795 1423 1794 1419 1799 1416 1807 1412 1865 1409 1858 1406 1846 1402 1862 1399 1846 1396 1763 1392 1778 1389 1783 1386 1785 1382 1809 1379 1796 1375 1801 1372 1815 1369 1815 1365 1816 1362 1842 1359 1865 1355 1874 1352 1879 1349 1903 1345 1903 1342 1927 1338 1932 1335 1932 1332 1929 1328 1920 1325 1910 1322 1920 1318 1871 1315 1867 1312 1854 1308 1880 1305 1892 1301 1889 1298 1936 1295 1951 1291 1942 1288 1968 1285 1935 1281 1925 1278 1903 1275 1927 1271 1930 1268 1924 1264 1924 1261 1913 1258 1950 1254 1960 1251 1959 1248 1971 1244 1989 1241 2010 1238 2020 1234 2021 1231 2011 1227 2009 1224 1991 1221 1985 1217 1987 1214 1985 1211 2002 1207 1983 1204 1953 1201 1945 1197 1956 1194 1984 1190 1979 1187 1986 1184 2006 1180 2030 1177 2019 1174 2012 1170 2043 1167 2039 1164 2070 1160 2089 1157 2091 1153 2096 1150 2096 1147 2115 1143 2139 1140 2125 1137 2126 1133 2128 1130 2148 1127 2141 1123 2139 1120 2133 1116 2115 1113 2138 1110 2141 1106 2145 1103 2139 1100 2134 1096 2194 1093 2205 1090 2322 1086 2303 1083 2305 1079 2322 1076 2338 1073 2341 1069 2330 1066 2336 1063 2326 1059 2307 1056 2326 1053 2326 1049 2303 1046 2284 1042 2274 1039 2276 1036 2290 1032 2289 1029 2288 1026 2281 1022 2267 1019 2283 1016 2300 1012 2311 1009 2304 1005 2304 1002 2317 999 2322 995 2306 992 2290 989 2291 985 2305 982 2307 979 2306 975 2301 972 2305 968 2314 965 2318 962 2314 958 2342 955 2329 952 2315 948 2321 945 2305 942 2288 938 2264 935 2270 931 2269 928 2292 925 2292 921 2311 918 2336 915 2355 911 2363 908 2374 905 2393 901 2396 898 2398 894 2395 891 2380 888 2261 884 2273 881 2246 878 2258 874 2265 871 2288 868 2251 864 2243 861 2272 857 2301 854 2308 851 2299 847 2280 844 2289 841 2279 837 2287 834 2254 831 2233 827 2250 824 2235 820 2225 817 2215 814 2208 810 2265 807 2277 804 2260 800 2249 797 2242 794 2250 790 2234 787 2232 783 2220 780 2218 777 2235 773 2214 770 2222 767 2218 763 2259 760 2246 757 2273 753 2307 750 2333 746 2344 743 2340 740 2357 736 2345 733 2347 730 2330 726 2321 723 2342 720 2343 716 2346 713 2342 709 2364 706 2341 703 2337 699 2333 696 2351 693 2344 689 2338 686 2360 683 2325 679 2336 676 2320 672 2338 669 2352 666 2348 662 2381 659 2393 656 2402 652 2409 649 2416 646 2425 642 2433 639 2441 635 2456 632 2438 629 2451 625 2450 622 2433 619 2438 615 2468 612 2452 609 2442 605 2455 602 2434 598 2430 595 2493 592 2480 588 2500 585 2525 582 2539 578 2499 575 2479 572 2492 568 2420 565 2389 561 2410 558 2418 555 2409 551 2436 548 2440 545 2428 541 2430 538 2436 535 2397 531 2403 528 2397 524 2399 521 2402 518 2384 514 2399 511 2411 508 2409 504 2433 501 2493 498 2528 494 2510 491 2507 487 2507 484 2496 481 2514 477 2530 474 2541 471 2539 467 2553 464 2571 461 2578 457 2573 454 2630 450 2611 447 2614 444 2596 440 2600 437 2600 434 2608 430 2610 427 2608 424 2625 420 2621 417 2641 413 2634 410 2625 407 2631 403 2656"></path>
 </g>
<desc>Points follow ...</desc>
<desc>Line</desc>
 <g stroke-width="3" stroke="Maroon" stroke-linejoin="round" stroke-linecap="round" stroke-dasharray="9 12" fill="none">
  <path d="M3797 810L3794 812 3791 814 3787 816 3784 818 3780 821 3777 823 3774 826 3770 829 3767 832 3764 836 3760 839 3757 842 3754 846 3750 850 3747 854 3743 861 3740 868 3737 876 3733 884 3730 891 3727 899 3723 907 3720 914 3717 922 3713 930 3710 938 3706 946 3703 954 3700 962 3696 970 3693 977 3690 985 3686 994 3683 1003 3680 1012 3676 1021 3673 1029 3669 1038 3666 1046 3663 1053 3659 1060 3656 1067 3653 1074 3649 1081 3646 1087 3643 1093 3639 1100 3636 1106 3632 1113 3629 1120 3626 1127 3622 1133 3619 1141 3616 1148 3612 1155 3609 1162 3606 1169 3602 1177 3599 1184 3595 1191 3592 1199 3589 1206 3585 1213 3582 1221 3579 1229 3575 1236 3572 1245 3569 1253 3565 1260 3562 1267 3558 1274 3555 1281 3552 1288 3548 1295 3545 1302 3542 1309 3538 1315 3535 1321 3532 1327 3528 1333 3525 1338 3521 1343 3518 1348 3515 1354 3511 1359 3508 1364 3505 1369 3501 1374 3498 1378 3495 1383 3491 1387 3488 1392 3484 1397 3481 1402 3478 1407 3474 1412 3471 1417 3468 1421 3464 1426 3461 1431 3458 1435 3454 1439 3451 1442 3447 1446 3444 1449 3441 1451 3437 1453 3434 1455 3431 1457 3427 1458 3424 1460 3421 1463 3417 1466 3414 1470 3410 1474 3407 1476 3404 1479 3400 1482 3397 1485 3394 1488 3390 1491 3387 1493 3384 1496 3380 1498 3377 1500 3373 1501 3370 1503 3367 1505 3363 1507 3360 1509 3357 1510 3353 1512 3350 1514 3347 1516 3343 1518 3340 1520 3336 1522 3333 1523 3330 1525 3326 1527 3323 1529 3320 1530 3316 1532 3313 1533 3310 1535 3306 1538 3303 1541 3299 1544 3296 1547 3293 1550 3289 1553 3286 1556 3283 1559 3279 1562 3276 1565 3273 1568 3269 1570 3266 1573 3262 1576 3259 1579 3256 1582 3252 1586 3249 1590 3246 1593 3242 1597 3239 1601 3236 1605 3232 1609 3229 1614 3225 1618 3222 1622 3219 1628 3215 1632 3212 1637 3209 1641 3205 1646 3202 1650 3199 1654 3195 1658 3192 1662 3188 1667 3185 1671 3182 1675 3178 1678 3175 1682 3172 1685 3168 1688 3165 1691 3162 1694 3158 1698 3155 1702 3151 1706 3148 1710 3145 1715 3141 1719 3138 1725 3135 1730 3131 1735 3128 1740 3125 1745 3121 1749 3118 1752 3114 1755 3111 1757 3108 1760 3104 1764 3101 1767 3098 1769 3094 1770 3091 1770 3088 1771 3084 1771 3081 1771 3077 1772 3074 1772 3071 1772 3067 1772 3064 1771 3061 1771 3057 1772 3054 1772 3051 1773 3047 1772 3044 1772 3040 1772 3037 1772 3034 1772 3030 1772 3027 1772 3024 1772 3020 1772 3017 1772 3014 1771 3010 1771 3007 1771 3003 1769 3000 1767 2997 1766 2993 1765 2990 1765 2987 1765 2983 1765 2980 1764 2977 1764 2973 1763 2970 1762 2966 1761 2963 1760 2960 1760 2956 1760 2953 1760 2950 1760 2946 1760 2943 1760 2940 1760 2936 1759 2933 1758 2929 1758 2926 1758 2923 1759 2919 1759 2916 1759 2913 1760 2909 1761 2906 1761 2903 1762 2899 1763 2896 1764 2892 1764 2889 1766 2886 1767 2882 1767 2879 1767 2876 1766 2872 1767 2869 1768 2866 1770 2862 1770 2859 1770 2855 1770 2852 1769 2849 1769 2845 1768 2842 1768 2839 1767 2835 1764 2832 1761 2829 1759 2825 1756 2822 1753 2818 1750 2815 1747 2812 1744 2808 1741 2805 1738 2802 1736 2798 1733 2795 1730 2792 1729 2788 1727 2785 1726 2781 1724 2778 1722 2775 1720 2771 1718 2768 1716 2765 1715 2761 1714 2758 1713 2755 1711 2751 1709 2748 1707 2744 1706 2741 1704 2738 1702 2734 1701 2731 1699 2728 1698 2724 1697 2721 1695 2718 1693 2714 1691 2711 1689 2707 1686 2704 1683 2701 1680 2697 1677 2694 1673 2691 1669 2687 1665 2684 1661 2681 1658 2677 1655 2674 1652 2670 1649 2667 1646 2664 1644 2660 1641 2657 1638 2654 1635 2650 1632 2647 1629 2644 1626 2640 1623 2637 1619 2633 1617 2630 1614 2627 1611 2623 1608 2620 1604 2617 1601 2613 1598 2610 1595 2607 1591 2603 1588 2600 1584 2596 1580 2593 1576 2590 1572 2586 1568 2583 1564 2580 1560 2576 1557 2573 1554 2570 1550 2566 1547 2563 1544 2559 1541 2556 1539 2553 1536 2549 1533 2546 1531 2543 1528 2539 1524 2536 1522 2533 1520 2529 1521 2526 1521 2522 1522 2519 1521 2516 1519 2512 1518 2509 1516 2506 1514 2502 1513 2499 1511 2496 1510 2492 1508 2489 1507 2485 1507 2482 1506 2479 1507 2475 1506 2472 1506 2469 1505 2465 1505 2462 1503 2459 1502 2455 1501 2452 1499 2448 1498 2445 1496 2442 1493 2438 1491 2435 1489 2432 1487 2428 1486 2425 1483 2422 1482 2418 1480 2415 1479 2411 1477 2408 1475 2405 1474 2401 1473 2398 1473 2395 1472 2391 1471 2388 1470 2385 1468 2381 1467 2378 1465 2374 1463 2371 1460 2368 1459 2364 1456 2361 1453 2358 1451 2354 1447 2351 1443 2348 1440 2344 1436 2341 1433 2337 1429 2334 1425 2331 1421 2327 1417 2324 1413 2321 1408 2317 1404 2314 1400 2311 1395 2307 1390 2304 1386 2300 1383 2297 1380 2294 1377 2290 1374 2287 1372 2284 1369 2280 1366 2277 1364 2274 1362 2270 1360 2267 1358 2263 1355 2260 1351 2257 1348 2253 1345 2250 1340 2247 1336 2243 1332 2240 1328 2237 1325 2233 1322 2230 1319 2226 1314 2223 1309 2220 1305 2216 1302 2213 1300 2210 1298 2206 1296 2203 1294 2200 1292 2196 1290 2193 1288 2189 1287 2186 1285 2183 1283 2179 1281 2176 1279 2173 1278 2169 1277 2166 1276 2163 1276 2159 1275 2156 1274 2152 1274 2149 1274 2146 1274 2142 1276 2139 1278 2136 1279 2132 1279 2129 1280 2126 1280 2122 1279 2119 1278 2115 1276 2112 1275 2109 1274 2105 1273 2102 1272 2099 1271 2095 1270 2092 1270 2089 1269 2085 1269 2082 1270 2078 1270 2075 1271 2072 1272 2068 1274 2065 1276 2062 1277 2058 1279 2055 1281 2052 1283 2048 1286 2045 1288 2041 1291 2038 1296 2035 1299 2031 1303 2028 1307 2025 1312 2021 1317 2018 1322 2015 1328 2011 1333 2008 1338 2004 1343 2001 1347 1998 1351 1994 1356 1991 1361 1988 1366 1984 1370 1981 1373 1978 1376 1974 1380 1971 1382 1967 1385 1964 1388 1961 1392 1957 1395 1954 1398 1951 1402 1947 1408 1944 1413 1941 1418 1937 1421 1934 1425 1930 1428 1927 1431 1924 1434 1920 1436 1917 1438 1914 1441 1910 1444 1907 1445 1904 1447 1900 1449 1897 1451 1893 1453 1890 1455 1887 1457 1883 1459 1880 1462 1877 1464 1873 1467 1870 1469 1867 1473 1863 1477 1860 1481 1856 1485 1853 1490 1850 1494 1846 1497 1843 1501 1840 1505 1836 1508 1833 1512 1830 1517 1826 1522 1823 1527 1819 1532 1816 1538 1813 1545 1809 1552 1806 1559 1803 1566 1799 1573 1796 1581 1793 1587 1789 1593 1786 1599 1782 1606 1779 1612 1776 1618 1772 1623 1769 1628 1766 1633 1762 1637 1759 1641 1756 1646 1752 1650 1749 1653 1745 1657 1742 1661 1739 1664 1735 1665 1732 1668 1729 1671 1725 1673 1722 1675 1719 1677 1715 1678 1712 1680 1708 1683 1705 1685 1702 1688 1698 1690 1695 1692 1692 1693 1688 1694 1685 1695 1682 1697 1678 1699 1675 1702 1671 1705 1668 1708 1665 1711 1661 1714 1658 1717 1655 1720 1651 1724 1648 1727 1645 1730 1641 1733 1638 1736 1634 1740 1631 1743 1628 1748 1624 1751 1621 1755 1618 1759 1614 1763 1611 1767 1608 1771 1604 1776 1601 1781 1597 1786 1594 1792 1591 1797 1587 1802 1584 1806 1581 1810 1577 1814 1574 1819 1571 1823 1567 1826 1564 1829 1560 1833 1557 1836 1554 1840 1550 1843 1547 1847 1544 1851 1540 1855 1537 1858 1534 1862 1530 1865 1527 1868 1523 1871 1520 1874 1517 1877 1513 1879 1510 1881 1507 1882 1503 1882 1500 1883 1497 1885 1493 1886 1490 1888 1486 1890 1483 1893 1480 1895 1476 1897 1473 1899 1470 1901 1466 1904 1463 1907 1460 1910 1456 1913 1453 1916 1449 1919 1446 1923 1443 1927 1439 1930 1436 1934 1433 1938 1429 1942 1426 1946 1423 1949 1419 1953 1416 1956 1412 1960 1409 1963 1406 1966 1402 1969 1399 1973 1396 1978 1392 1984 1389 1990 1386 1995 1382 2001 1379 2007 1375 2013 1372 2019 1369 2025 1365 2030 1362 2035 1359 2041 1355 2046 1352 2050 1349 2055 1345 2059 1342 2063 1338 2066 1335 2070 1332 2074 1328 2078 1325 2082 1322 2086 1318 2091 1315 2096 1312 2101 1308 2106 1305 2111 1301 2115 1298 2120 1295 2123 1291 2127 1288 2131 1285 2135 1281 2139 1278 2144 1275 2148 1271 2152 1268 2157 1264 2161 1261 2166 1258 2170 1254 2174 1251 2178 1248 2182 1244 2185 1241 2188 1238 2190 1234 2193 1231 2196 1227 2199 1224 2203 1221 2207 1217 2211 1214 2215 1211 2219 1207 2224 1204 2229 1201 2234 1197 2239 1194 2243 1190 2246 1187 2249 1184 2252 1180 2255 1177 2257 1174 2260 1170 2263 1167 2265 1164 2267 1160 2270 1157 2272 1153 2274 1150 2276 1147 2278 1143 2280 1140 2282 1137 2283 1133 2284 1130 2285 1127 2286 1123 2287 1120 2288 1116 2289 1113 2291 1110 2292 1106 2293 1103 2295 1100 2296 1096 2297 1093 2297 1090 2296 1086 2295 1083 2294 1079 2293 1076 2292 1073 2290 1069 2289 1066 2288 1063 2287 1059 2287 1056 2287 1053 2287 1049 2287 1046 2288 1042 2289 1039 2290 1036 2290 1032 2291 1029 2291 1026 2292 1022 2293 1019 2293 1016 2294 1012 2294 1009 2295 1005 2295 1002 2295 999 2296 995 2296 992 2297 989 2297 985 2298 982 2298 979 2298 975 2298 972 2299 968 2299 965 2300 962 2301 958 2302 955 2302 952 2304 948 2305 945 2306 942 2308 938 2310 935 2312 931 2314 928 2316 925 2317 921 2319 918 2320 915 2321 911 2322 908 2323 905 2323 901 2324 898 2325 894 2326 891 2327 888 2330 884 2333 881 2336 878 2338 874 2341 871 2342 868 2344 864 2346 861 2347 857 2348 854 2350 851 2351 847 2353 844 2355 841 2356 837 2358 834 2359 831 2361 827 2363 824 2365 820 2366 817 2368 814 2371 810 2372 807 2374 804 2377 800 2380 797 2383 794 2386 790 2389 787 2391 783 2395 780 2398 777 2402 773 2405 770 2409 767 2413 763 2416 760 2420 757 2424 753 2427 750 2430 746 2433 743 2436 740 2439 736 2442 733 2445 730 2448 726 2451 723 2454 720 2458 716 2461 713 2464 709 2467 706 2470 703 2337 699 2333 696 2351 693 2344 689 2338 686 2360 683 2325 679 2336 676 2320 672 2338 669 2352 666 2348 662 2381 659 2393 656 2402 652 2409 649 2416 646 2425 642 2433 639 2441 635 2456 632 2438 629 2451 625 2450 622 2433 619 2438 615 2468 612 2452 609 2442 605 2455 602 2434 598 2430 595 2493 592 2480 588 2500 585 2525 582 2539 578 2499 575 2479 572 2492 568 2420 565 2389 561 2410 558 2418 555 2409 551 2436 548 2440 545 2428 541 2430 538 2436 535 2397 531 2403 528 2397 524 2399 521 2402 518 2384 514 2399 511 2411 508 2409 504 2433 501 2493 498 2528 494 2510 491 2507 487 2507 484 2496 481 2514 477 2530 474 2541 471 2539 467 2553 464 2571 461 2578 457 2573 454 2630 450 2611 447 2614 444 2596 440 2600 437 2600 434 2608 430 2610 427 2608 424 2625 420 2621 417 2641 413 2634 410 2625 407 2631 403 2656"></path>
 </g>
<desc>Points follow ...</desc>
<desc>Line</desc>
 <g stroke-width="3" stroke="Teal" stroke-linejoin="round" stroke-linecap="round" stroke-dasharray="0.3 5.7" fill="none">
  <path d="M3797 810L3794 812 3791 814 3787 816 3784 818 3780 821 3777 823 3774 826 3770 829 3767 832 3764 836 3760 839 3757 842 3754 846 3750 850 3747 854 3743 861 3740 868 3737 876 3733 884 3730 891 3727 899 3723 907 3720 914 3717 922 3713 930 3710 938 3706 946 3703 954 3700 962 3696 970 3693 977 3690 985 3686 994 3683 1003 3680 1012 3676 1021 3673 1029 3669 1038 3666 1046 3663 1053 3659 1060 3656 1067 3653 1074 3649 1081 3646 1087 3643 1093 3639 1100 3636 1106 3632 1113 3629 1120 3626 1127 3622 1133 3619 1141 3616 1148 3612 1155 3609 1162 3606 1169 3602 1177 3599 1184 3595 1191 3592 1199 3589 1206 3585 1213 3582 1221 3579 1229 3575 1236 3572 1245 3569 1253 3565 1260 3562 1267 3558 1274 3555 1281 3552 1288 3548 1295 3545 1302 3542 1309 3538 1315 3535 1321 3532 1327 3528 1333 3525 1338 3521 1343 3518 1348 3515 1354 3511 1359 3508 1364 3505 1369 3501 1374 3498 1378 3495 1383 3491 1387 3488 1392 3484 1397 3481 1402 3478 1407 3474 1412 3471 1417 3468 1421 3464 1426 3461 1431 3458 1435 3454 1439 3451 1442 3447 1446 3444 1449 3441 1451 3437 1453 3434 1455 3431 1457 3427 1458 3424 1460 3421 1463 3417 1466 3414 1470 3410 1474 3407 1476 3404 1479 3400 1482 3397 1485 3394 1488 3390 1491 3387 1493 3384 1496 3380 1498 3377 1500 3373 1501 3370 1503 3367 1505 3363 1507 3360 1509 3357 1510 3353 1512 3350 1514 3347 1516 3343 1518 3340 1520 3336 1522 3333 1523 3330 1525 3326 1527 3323 1529 3320 1530 3316 1532 3313 1533 3310 1535 3306 1538 3303 1541 3299 1544 3296 1547 3293 1550 3289 1553 3286 1556 3283 1559 3279 1562 3276 1565 3273 1568 3269 1570 3266 1573 3262 1576 3259 1579 3256 1582 3252 1586 3249 1590 3246 1593 3242 1597 3239 1601 3236 1605 3232 1609 3229 1614 3225 1618 3222 1622 3219 1628 3215 1632 3212 1637 3209 1641 3205 1646 3202 1650 3199 1654 3195 1658 3192 1662 3188 1667 3185 1671 3182 1675 3178 1678 3175 1682 3172 1685 3168 1688 3165 1691 3162 1694 3158 1698 3155 1702 3151 1706 3148 1710 3145 1715 3141 1719 3138 1725 3135 1730 3131 1735 3128 1740 3125 1745 3121 1749 3118 1752 3114 1755 3111 1757 3108 1760 3104 1764 3101 1767 3098 1769 3094 1770 3091 1770 3088 1771 3084 1771 3081 1771 3077 1772 3074 1772 3071 1772 3067 1772 3064 1771 3061 1771 3057 1772 3054 1772 3051 1773 3047 1772 3044 1772 3040 1772 3037 1772 3034 1772 3030 1772 3027 1772 3024 1772 3020 1772 3017 1772 3014 1771 3010 1771 3007 1771 3003 1769 3000 1767 2997 1766 2993 1765 2990 1765 2987 1765 2983 1765 2980 1764 2977 1764 2973 1763 2970 1762 2966 1761 2963 1760 2960 1760 2956 1760 2953 1760 2950 1760 2946 1760 2943 1760 2940 1760 2936 1759 2933 1758 2929 1758 2926 1758 2923 1759 2919 1759 2916 1759 2913 1760 2909 1761 2906 1761 2903 1762 2899 1763 2896 1764 2892 1764 2889 1766 2886 1767 2882 1767 2879 1767 2876 1766 2872 1767 2869 1768 2866 1770 2862 1770 2859 1770 2855 1770 2852 1769 2849 1769 2845 1768 2842 1768 2839 1767 2835 1764 2832 1761 2829 1759 2825 1756 2822 1753 2818 1750 2815 1747 2812 1744 2808 1741 2805 1738 2802 1736 2798 1733 2795 1730 2792 1729 2788 1727 2785 1726 2781 1724 2778 1722 2775 1720 2771 1718 2768 1716 2765 1715 2761 1714 2758 1713 2755 1711 2751 1709 2748 1707 2744 1706 2741 1704 2738 1702 2734 1701 2731 1699 2728 1698 2724 1697 2721 1695 2718 1693 2714 1691 2711 1689 2707 1686 2704 1683 2701 1680 2697 1677 2694 1673 2691 1669 2687 1665 2684 1661 2681 1658 2677 1655 2674 1652 2670 1649 2667 1646 2664 1644 2660 1641 2657 1638 2654 1635 2650 1632 2647 1629 2644 1626 2640 1623 2637 1619 2633 1617 2630 1614 2627 1611 2623 1608 2620 1604 2617 1601 2613 1598 2610 1595 2607 1591 2603 1588 2600 1584 2596 1580 2593 1576 2590 1572 2586 1568 2583 1564 2580 1560 2576 1557 2573 1554 2570 1550 2566 1547 2563 1544 2559 1541 2556 1539 2553 1536 2549 1533 2546 1531 2543 1528 2539 1524 2536 1522 2533 1520 2529 1521 2526 1521 2522 1522 2519 1521 2516 1519 2512 1518 2509 1516 2506 1514 2502 1513 2499 1511 2496 1510 2492 1508 2489 1507 2485 1507 2482 1506 2479 1507 2475 1506 2472 1506 2469 1505 2465 1505 2462 1503 2459 1502 2455 1501 2452 1499 2448 1498 2445 1496 2442 1493 2438 1491 2435 1489 2432 1487 2428 1486 2425 1483 2422 1482 2418 1480 2415 1479 2411 1477 2408 1475 2405 1474 2401 1473 2398 1473 2395 1472 2391 1471 2388 1470 2385 1468 2381 1467 2378 1465 2374 1463 2371 1460 2368 1459 2364 1456 2361 1453 2358 1451 2354 1447 2351 1443 2348 1440 2344 1436 2341 1433 2337 1429 2334 1425 2331 1421 2327 1417 2324 1413 2321 1408 2317 1404 2314 1400 2311 1395 2307 1390 2304 1386 2300 1383 2297 1380 2294 1377 2290 1374 2287 1372 2284 1369 2280 1366 2277 1364 2274 1362 2270 1360 2267 1358 2263 1355 2260 1351 2257 1348 2253 1345 2250 1340 2247 1336 2243 1332 2240 1328 2237 1325 2233 1322 2230 1319 2226 1314 2223 1309 2220 1305 2216 1302 2213 1300 2210 1298 2206 1296 2203 1294 2200 1292 2196 1290 2193 1288 2189 1287 2186 1285 2183 1283 2179 1281 2176 1279 2173 1278 2169 1277 2166 1276 2163 1276 2159 1275 2156 1274 2152 1274 2149 1274 2146 1274 2142 1276 2139 1278 2136 1279 2132 1279 2129 1280 2126 1280 2122 1279 2119 1278 2115 1276 2112 1275 2109 1274 2105 1273 2102 1272 2099 1271 2095 1270 2092 1270 2089 1269 2085 1269 2082 1270 2078 1270 2075 1271 2072 1272 2068 1274 2065 1276 2062 1277 2058 1279 2055 1281 2052 1283 2048 1286 2045 1288 2041 1291 2038 1296 2035 1299 2031 1303 2028 1307 2025 1312 2021 1317 2018 1322 2015 1328 2011 1333 2008 1338 2004 1343 2001 1347 1998 1351 1994 1356 1991 1361 1988 1366 1984 1370 1981 1373 1978 1376 1974 1380 1971 1382 1967 1385 1964 1388 1961 1392 1957 1395 1954 1398 1951 1402 1947 1408 1944 1413 1941 1418 1937 1421 1934 1425 1930 1428 1927 1431 1924 1434 1920 1436 1917 1438 1914 1441 1910 1444 1907 1445 1904 1447 1900 1449 1897 1451 1893 1453 1890 1455 1887 1457 1883 1459 1880 1462 1877 1464 1873 1467 1870 1469 1867 1473 1863 1477 1860 1481 1856 1485 1853 1490 1850 1494 1846 1497 1843 1501 1840 1505 1836 1508 1833 1512 1830 1517 1826 1522 1823 1527 1819 1532 1816 1538 1813 1545 1809 1552 1806 1559 1803 1566 1799 1573 1796 1581 1793 1587 1789 1593 1786 1599 1782 1606 1779 1612 1776 1618 1772 1623 1769 1628 1766 1633 1762 1637 1759 1641 1756 1646 1752 1650 1749 1653 1745 1657 1742 1661 1739 1664 1735 1665 1732 1668 1729 1671 1725 1673 1722 1675 1719 1677 1715 1678 1712 1680 1708 1683 1705 1685 1702 1688 1698 1690 1695 1692 1692 1693 1688 1694 1685 1695 1682 1697 1678 1699 1675 1702 1671 1705 1668 1708 1665 1711 1661 1714 1658 1717 1655 1720 1651 1724 1648 1727 1645 1730 1641 1733 1638 1736 1634 1740 1631 1743 1628 1748 1624 1751 1621 1755 1618 1759 1614 1763 1611 1767 1608 1771 1604 1776 1601 1781 1597 1786 1594 1792 1591 1797 1587 1802 1584 1806 1581 1810 1577 1814 1574 1819 1571 1823 1567 1826 1564 1829 1560 1833 1557 1836 1554 1840 1550 1843 1547 1847 1544 1851 1540 1855 1537 1858 1534 1862 1530 1865 1527 1868 1523 1871 1520 1874 1517 1877 1513 1879 1510 1881 1507 1882 1503 1882 1500 1883 1497 1885 1493 1886 1490 1888 1486 1890 1483 1893 1480 1895 1476 1897 1473 1899 1470 1901 1466 1904 1463 1907 1460 1910 1456 1913 1453 1916 1449 1919 1446 1923 1443 1927 1439 1930 1436 1934 1433 1938 1429 1942 1426 1946 1423 1949 1419 1953 1416 1956 1412 1960 1409 1963 1406 1966 1402 1969 1399 1973 1396 1978 1392 1984 1389 1990 1386 1995 1382 2001 1379 2007 1375 2013 1372 2019 1369 2025 1365 2030 1362 2035 1359 2041 1355 2046 1352 2050 1349 2055 1345 2059 1342 2063 1338 2066 1335 2070 1332 2074 1328 2078 1325 2082 1322 2086 1318 2091 1315 2096 1312 2101 1308 2106 1305 2111 1301 2115 1298 2120 1295 2123 1291 2127 1288 2131 1285 2135 1281 2139 1278 2144 1275 2148 1271 2152 1268 2157 1264 2161 1261 2166 1258 2170 1254 2174 1251 2178 1248 2182 1244 2185 1241 2188 1238 2190 1234 2193 1231 2196 1227 2199 1224 2203 1221 2207 1217 2211 1214 2215 1211 2219 1207 2224 1204 2229 1201 2234 1197 2239 1194 2243 1190 2246 1187 2249 1184 2252 1180 2255 1177 2257 1174 2260 1170 2263 1167 2265 1164 2267 1160 2270 1157 2272 1153 2274 1150 2276 1147 2278 1143 2280 1140 2282 1137 2283 1133 2284 1130 2285 1127 2286 1123 2287 1120 2288 1116 2289 1113 2291 1110 2292 1106 2293 1103 2295 1100 2296 1096 2297 1093 2297 1090 2296 1086 2295 1083 2294 1079 2293 1076 2292 1073 2290 1069 2289 1066 2288 1063 2287 1059 2287 1056 2287 1053 2287 1049 2287 1046 2288 1042 2289 1039 2290 1036 2290 1032 2291 1029 2291 1026 2292 1022 2293 1019 2293 1016 2294 1012 2294 1009 2295 1005 2295 1002 2295 999 2296 995 2296 992 2297 989 2297 985 2298 982 2298 979 2298 975 2298 972 2299 968 2299 965 2300 962 2301 958 2302 955 2302 952 2304 948 2305 945 2306 942 2308 938 2310 935 2312 931 2314 928 2316 925 2317 921 2319 918 2320 915 2321 911 2322 908 2323 905 2323 901 2324 898 2325 894 2326 891 2327 888 2330 884 2333 881 2336 878 2338 874 2341 871 2342 868 2344 864 2346 861 2347 857 2348 854 2350 851 2351 847 2353 844 2355 841 2356 837 2358 834 2359 831 2361 827 2363 824 2365 820 2366 817 2368 814 2371 810 2372 807 2374 804 2377 800 2380 797 2383 794 2386 790 2389 787 2391 783 2395 780 2398 777 2402 773 2405 770 2409 767 2413 763 2416 760 2420 757 2424 753 2427 750 2430 746 2433 743 2436 740 2439 736 2442 733 2445 730 2448 726 2451 723 2454 720 2458 716 2461 713 2464 709 2467 706 2470 703 2337 699 2333 696 2351 693 2344 689 2338 686 2360 683 2325 679 2336 676 2320 672 2338 669 2352 666 2348 662 2381 659 2393 656 2402 652 2409 649 2416 646 2425 642 2433 639 2441 635 2456 632 2438 629 2451 625 2450 622 2433 619 2438 615 2468 612 2452 609 2442 605 2455 602 2434 598 2430 595 2493 592 2480 588 2500 585 2525 582 2539 578 2499 575 2479 572 2492 568 2420 565 2389 561 2410 558 2418 555 2409 551 2436 548 2440 545 2428 541 2430 538 2436 535 2397 531 2403 528 2397 524 2399 521 2402 518 2384 514 2399 511 2411 508 2409 504 2433 501 2493 498 2528 494 2510 491 2507 487 2507 484 2496 481 2514 477 2530 474 2541 471 2539 467 2553 464 2571 461 2578 457 2573 454 2630 450 2611 447 2614 444 2596 440 2600 437 2600 434 2608 430 2610 427 2608 424 2625 420 2621 417 2641 413 2634 410 2625 407 2631 403 2656"></path>
 </g>
<desc>Reset to original origin</desc>
</g>
</svg>
</div>
<div class="cell-output cell-output-display">
<span style="white-space:pre; font-family: monospace">┌⊖┐
⌽0│
└~┘
</span>
</div>
</div>


</section>
</section>

 ]]></description>
  <category>APL</category>
  <category>Tabular Modeling</category>
  <guid>https://isaac-flath.tech/posts/APL/TabularData.html</guid>
  <pubDate>Thu, 07 Jul 2022 04:00:00 GMT</pubDate>
  <media:content url="https://isaac-flath.tech/posts/_TopicImages/TabularData1.png" medium="image" type="image/png" height="144" width="144"/>
</item>
<item>
  <title>Introduction to Attribution</title>
  <dc:creator>Isaac Flath</dc:creator>
  <link>https://isaac-flath.tech/posts/Other/MarketingAttribution.html</link>
  <description><![CDATA[ 





<section id="what-is-attribution" class="level1" data-number="1">
<h1 data-number="1"><span class="header-section-number">1</span> What is Attribution?</h1>
<p>Attribution is all about attributing a cause to a result. In this post I will discuss it at a high level in the context of seeking a conversion or sale. So what does that mean and why does that matter exactly?</p>
<p>In a company you have many different ways you can influence customers or potential customers. A few examples:</p>
<ol type="1">
<li>Phone Call</li>
<li>Email with picture A</li>
<li>Email with picture B</li>
<li>Send a Coupon</li>
</ol>
<p>Imagine you just made a sale and you had sent a coupon, called, and sent an email to that customer in the last 6 months. Which one was responsible for the sale? Was it just one responsible or was the combination of mediums important? How do I know if the phone call was “worth it”? What about the coupon? Should I replicate this combination or are there better combinations?</p>
<p>The answers to all of this require great data about what the causes are (action) that led to the effect (sale). This is what attribution is all about.</p>
<p>If you wonder whether you should be using attribution in your efforts just ask yourself the following questions.</p>
<div class="callout callout-style-default callout-note callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Ask Yourself
</div>
</div>
<div class="callout-body-container callout-body">
<ul>
<li>Do you want to know what activities you have done led to sales?<br>
</li>
<li>Do you want to know whether a campaign you launched was worth it?<br>
</li>
<li>Do you want to know what marketing you do is effective?</li>
</ul>
</div>
</div>
<p>If the answer is yes to any of those, you should get comfy with a few different attribution models.</p>
</section>
<section id="purpose-of-this-post" class="level1" data-number="2">
<h1 data-number="2"><span class="header-section-number">2</span> Purpose of this post</h1>
<p>Now that we understand the problem and it’s importance, let me be specific about what I hope to accomplish in this post.</p>
<ul>
<li><p><strong>Primary Goal:</strong> Communicate a high level understanding of several basic approach to attribution, how they work, what they are good at, what they are not so good at.</p></li>
<li><p><strong>Secondary Goal:</strong> Expand on the questions in the “What is Attribution?” section and give some ideas for how this data can actually be used and why it is so powerful once you have it.</p></li>
</ul>
</section>
<section id="last-touch-attribution" class="level1" data-number="3">
<h1 data-number="3"><span class="header-section-number">3</span> Last-Touch Attribution</h1>
<p>Let’s start with the simplest attribution model, Last-Touch Attribution.</p>
<p><strong>What is last-touch attribution?</strong></p>
<p>This is just what it sounds like - you attribute the sale to the last touch. Last-Touch Attribution would say whatever the most recent activity was before the sale was 100% responsible for that sale.</p>
<p><strong>Example Interaction</strong></p>
<p>For Last-Touch let’s consider a scenario where we are selling pens and pencils. We send a bunch of ads to see what sticks and attribute it like this (all to the last-touch).</p>
<p><img src="https://isaac-flath.tech/posts/_my_icons/Attribution_LastTouch.png" class="img-fluid"></p>
<p><strong>Why would you use last-touch attribution</strong>?</p>
<p>Because last-touch gives sole weight to the last interaction, it can be very helpful in products or companies where customers do not think about the purchase for extended periods of time.</p>
<div class="callout callout-style-default callout-note callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Example
</div>
</div>
<div class="callout-body-container callout-body">
<p>If you are selling cheap pens and pencils, a customer probably didn’t start thinking about the purchase over the course of multiple interactions and work up to the decision to buy. They probably simply knew they were going to need some soon or were running low, and they saw an ad at the right time with the right message and clicked to buy. In that scenario, last-touch could be very appropriate.</p>
</div>
</div>
<p><strong>Why would you avoid last-touch attribution</strong>?</p>
<p>If we consider the context of our example, it’s clear that it’s not appropriate for inter-related advertising channels or actions. In our example, they only opened the email because they were thinking about the product. They only got to the popup because they opened the email and clicked through. In this type of scenario, it isn’t accurate to say the final action gets all the credit. In many luxury products, last-touch is not ideal.</p>
<blockquote class="blockquote">
<p>Note: There is a similar strategy called “First-Touch” attribution which does this same idea but weights the first touch exclusively instead of the last touch.</p>
</blockquote>
</section>
<section id="multi-touch-attribution" class="level1" data-number="4">
<h1 data-number="4"><span class="header-section-number">4</span> Multi-Touch Attribution</h1>
<p>While the last-touch attribution is appropriate in some situations, it has some obvious flaws that can make it very inaccurate in some industries.</p>
<p>Multi-touch Attribution was created to solve the problem of interactions over time. Last-Touch Attribution assumed the most recent action was solely responsible, but in reality there could be many attributing factors. We will cover four types - no-decay, time-decay, position-decay, and U-shaped.</p>
<div class="callout-ip">
<p>“no-decay” is often called linear. I try to avoid that term as it can be confusing when business and technical teams come together since both time-decay and position-decay can decay at a linear rate.</p>
</div>
<section id="no-decay" class="level2" data-number="4.1">
<h2 data-number="4.1" class="anchored" data-anchor-id="no-decay"><span class="header-section-number">4.1</span> No-Decay</h2>
<p><strong>What is no-decay attribution?</strong></p>
<p>No-decay attribution gives every interaction equal weight. This would say if you sent 4 advertisements to the customer, they are each 25% responsible for the sale.</p>
<p><strong>Example Interaction</strong></p>
<div class="callout callout-style-default callout-note callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Example
</div>
</div>
<div class="callout-body-container callout-body">
<p>My dad just planned a trip to Joshua Tree. He visited long ago and has been getting regular email, letters, and voice mails updating him on new events to encourage him to return. For months he didn’t open or respond to a single one, but it did get him thinking about how much he enjoyed it and would like to go back. Eventually he opened an email and did some research to plan his trip and is going next month</p>
</div>
</div>
<p><img src="https://isaac-flath.tech/posts/_my_icons/Attribution_NoDecay.png" class="img-fluid"></p>
<p><strong>Why would you use no-decay attribution</strong>?</p>
<p>No-decay attribution can be in scenarios where any given interaction could trigger a sale, you just need it to land at the right time and different people continue to think through. If the customer doesn’t say no, then they may later say yes. In some scenarios which they say “yes” to isn’t consistent so you can equally weight them all.</p>
</section>
<section id="position-decay-and-time-day" class="level2" data-number="4.2">
<h2 data-number="4.2" class="anchored" data-anchor-id="position-decay-and-time-day"><span class="header-section-number">4.2</span> Position-Decay and Time-Day</h2>
<p><strong>What is position-decay and time-decay attribution?</strong></p>
<p>Position-decay and weight-decay are both means of putting more attribution to recent actions and less on older action.</p>
<p>Position-decay does not care about time (ie days), but does care about how many actions ago. For example the most recent email, the 2nd most recent email, the 3rd most recent email, etc. Maybe all of those happened in the last 2 weeks or maybe they were spread out over 2 months, position-decay only sees how many positions it is removed from the sale.</p>
<p>Time-decay is very similar to position-decay but instead instead of decaying based on number of actions, attribution decays based on time (ie days) from the sale.</p>
<div class="callout callout-style-default callout-note callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Example
</div>
</div>
<div class="callout-body-container callout-body">
<p>Imagine you want to get a new couch (or your spouse wants you to get a new couch). It’s not really a priority or very urgent You do a quick amazon search but don’t buy in the moment and plan to come back to it later to figure out what to buy and who from. It’s not particularly important because you already have one and while it would be nice to have a nicer one, it really isn’t a big deal. This could go on for years, but with the right messaging this person could be motivated to buy.</p>
</div>
</div>
<p><img src="https://isaac-flath.tech/posts/_my_icons/Attribution_TimeDecay.png" class="img-fluid"></p>
<p><strong>Why would you use position-decay or time-decay attribution</strong>?</p>
<p>You may get various advertisements about it before you eventually take the time to place the purchase. While each does have importance to help remind you to make the purchase - the one that triggers you to buy is most important because it hit at the time with the message to motivate you to actually take action. Maybe the messaging was better, maybe the time it was sent was better, but for whatever reason it was better. The older messages did have an impact because it kept it at the forefront of your mind, but the older it was the clearer it is that it did not trigger a purchase. The final final action is what triggered the buy and you feel it deserves the most credit.</p>
</section>
<section id="u-shaped" class="level2" data-number="4.3">
<h2 data-number="4.3" class="anchored" data-anchor-id="u-shaped"><span class="header-section-number">4.3</span> U-Shaped</h2>
<p><strong>What is u-shaped attribution?</strong></p>
<p>A u-shaped attribution weighs the first and last touches most heavily, with lighter weights on the middle interactions.</p>
<p><strong>Example Interaction</strong></p>
<div class="callout callout-style-default callout-note callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Example
</div>
</div>
<div class="callout-body-container callout-body">
<p>To re-use the example from before, My dad just planned a trip to Joshua Tree. He visited long ago and has been getting regular email, letters, and voice mails updating him on new events to encourage him to return. For months he didn’t open or respond to a single one, but it did get him thinking about how much he enjoyed it and would like to go back. Eventually he opened an email and did some research to plan his trip and is going next month</p>
</div>
</div>
<p><img src="https://isaac-flath.tech/posts/_my_icons/Attribution_UShaped.png" class="img-fluid"></p>
<p><strong>Why would you use u-shaped attribution</strong>?</p>
<p>In this case you could argue that the initial outreach that got him thinking about going on the trip was was very important. The final communication that got him to purchase was also important. The stuff that happened in the middle mattered but wasn’t as critical and wasn’t even looked at. Because of this both the first and last touch are given heavy attribution while the middle stuff is given less.</p>
<p>In some luxury products this can be a great attribution methodology.</p>
</section>
</section>
<section id="markov-models" class="level1" data-number="5">
<h1 data-number="5"><span class="header-section-number">5</span> Markov Models</h1>
<p>Markov models are a bit more involved. The steps are:</p>
<ol type="1">
<li>Calculate probabilities to create a transition matrix</li>
<li>Calculate Removal Effect to determine attribution</li>
</ol>
<div class="callout callout-style-default callout-tip callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Tip
</div>
</div>
<div class="callout-body-container callout-body">
<p>Rather than attributing on a record by record level, attribution normally happens in groups on an action or channel level. In marketing contexts these are often referred to as campaigns where you can attribute sales to different channels within a campaign.</p>
</div>
</div>
<section id="transition-table" class="level2" data-number="5.1">
<h2 data-number="5.1" class="anchored" data-anchor-id="transition-table"><span class="header-section-number">5.1</span> Transition Table</h2>
<p>The transition table stores probabilities for all transitions. If I send an email, what’s the probability that a phone call is next? What’s the probability that a popup is next? What’s the probability that a sale is next? All combinations are stored in a transition table.</p>
<div class="callout callout-style-default callout-tip callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Tip
</div>
</div>
<div class="callout-body-container callout-body">
<blockquote class="blockquote">
<p>Note: This data is also sometimes represented as a graph with nodes being actions and edges being probabilities.</p>
</blockquote>
</div>
</div>
<p>Here I have a simply dummy transition table. For each action or state, we have the probability of what the next action is. This is calculated from your existing marketing data and is effectively a model of your marketing communication actions. From each action I can predict the chance of other actions occurring after that. This also means that I can see how they interact as I can see the different paths and probabilities to all those paths.</p>
<p>You will notice that <code>Sale</code> and <code>NotSale</code> don’t lead to anything else. Once a sale is made the goal is met. In some businesses it makes sense to cut it off here, and in others it makes sense to allow for longer chains where “completing” the chain is multiple buys in succession. For simplicity and the sake of high level learning I will assume the goal is a single sale.</p>
<p><code>NotSale</code> can mean many things to businesses. It could mean you failed to sell, or failed to upgrade the customer, it could mean that the customer asked you to not contact them in any way in the future. Regardless, the goal of a sale failed (usually in the scope of a campaign).</p>
<div id="cell-17" class="cell">
<div class="cell-output cell-output-display">
<div>


<table class="dataframe caption-top table table-sm table-striped small" data-quarto-postprocess="true" data-border="1">
<thead>
<tr class="header">
<th data-quarto-table-cell-role="th"></th>
<th data-quarto-table-cell-role="th">Phone</th>
<th data-quarto-table-cell-role="th">Email</th>
<th data-quarto-table-cell-role="th">Popup</th>
<th data-quarto-table-cell-role="th">Sale</th>
<th data-quarto-table-cell-role="th">NotSale</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td data-quarto-table-cell-role="th">Phone</td>
<td>0.20</td>
<td>0.30</td>
<td>0.35</td>
<td>0.05</td>
<td>0.10</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">Email</td>
<td>0.20</td>
<td>0.34</td>
<td>0.25</td>
<td>0.10</td>
<td>0.11</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">Popup</td>
<td>0.22</td>
<td>0.31</td>
<td>0.30</td>
<td>0.08</td>
<td>0.09</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">Sale</td>
<td>1.00</td>
<td>0.00</td>
<td>0.00</td>
<td>0.00</td>
<td>0.00</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">NotSale</td>
<td>0.00</td>
<td>0.00</td>
<td>0.00</td>
<td>0.00</td>
<td>1.00</td>
</tr>
</tbody>
</table>

</div>
</div>
</div>
</section>
<section id="removal-effect" class="level2" data-number="5.2">
<h2 data-number="5.2" class="anchored" data-anchor-id="removal-effect"><span class="header-section-number">5.2</span> Removal Effect</h2>
<p>Now that we have all the probabilities of all the interactions we can measure what the sale rate is for any given chain. We can also use those probabilities to run simulations. We can then run those simulations without 1 action and see how it effects the sale rate. The difference in that is the removal weight. By calculating this removal weight for each action, we can determine the amount to attribute to a particular action or channel.</p>
<div id="cell-20" class="cell">
<div class="cell-output cell-output-display">
<pre><code>{'total_revenue': 219797.21000000002,
 'Popup': 0.49192217051969217,
 'Email': 0.16007477186631336,
 'Phone': 0.3480030576139944}</code></pre>
</div>
</div>
</section>
</section>
<section id="gotchas-to-consider" class="level1" data-number="6">
<h1 data-number="6"><span class="header-section-number">6</span> Gotchas to consider</h1>
<p>In any attribution approach there are some things to consider. The goal of this section isn’t to scare you off, but just to ensure you realize that you can’t just take one of these and implement it without further thought. Each of these areas would require further research and thought as you seek to implement an attribution model in your organization.</p>
<ul>
<li>Just because you sent an email and the customer clicked through and bought doesn’t mean they wouldn’t have bought without that email. Some of those customers would have bought anyway so really your marketing effort did nothing, but may still get credit for the sale. This can skew your ROI calculations.</li>
<li>You may not be able to track all touch points. Any interaction the customer has you want to be able to track - so spend time thinking about what all the possible touch points are and how reliably you can track each of them. There may be some you can’t track - but you need to be aware of those and not just ignore them.</li>
<li>Digital tracking to understand those touch points can be extremely difficult, especially as people have more and more devices they use (phone, tablet, work computer, personal computer, etc.). People may look up a product on their computer, go visit a store, and then look up reviews on their phone before buying. Tying all those together can be challenging, but helps to get the whole picture.</li>
<li>Not all customers are equal. Different customers respond to different channels in different ways. Some customers are expensive to sell to others are relatively easy. Segmenting revenue reports by channel and by other customer segments is important so that you have a plan for all your customers and not just planning for the average.</li>
<li>For every <em>hypothesis</em> on how customers behave and how you should attribute, you should be trying to verify that as best you can with data. Can you see any patterns in who buys and who does not that supports your theory?</li>
</ul>
</section>
<section id="conclusion" class="level1" data-number="7">
<h1 data-number="7"><span class="header-section-number">7</span> Conclusion</h1>
<p>I hope you learned a bit about marketing attribution. These are the basics and are a great starting point. Proper attribution is important because once you can properly attribute the causes of sales you can calculate ROI. When you can calculate ROI you can make data driven decisions about effectiveness of experiments campaigns and initiatives. The better you can measure success the faster you can experiment with marketing initiatives and the more confident you can be in the results you are seeing. Marketing is not a discipline where anyone has the “right” answer and can jump in and have every campaign land perfectly. It’s all about setting things up so as you try things you learn as much as possible from what worked and what didn’t so your next marketing effort is more informed and has an increased chance of success.</p>
<p>Two other critical things I hope you got from this:</p>
<ul>
<li>The core concepts are something that anyone can understand, even if you don’t understand any of the code.</li>
<li>Why you would use one attribution methodology vs another is as much a business question as it is a technical question, so these decisions should be made through collaboration of the 2 teams.</li>
</ul>


</section>

 ]]></description>
  <category>Tabular Modeling</category>
  <guid>https://isaac-flath.tech/posts/Other/MarketingAttribution.html</guid>
  <pubDate>Sat, 17 Jul 2021 04:00:00 GMT</pubDate>
  <media:content url="https://isaac-flath.tech/posts/_TopicImages/Algorithm.jpg" medium="image" type="image/jpeg"/>
</item>
<item>
  <title>Practical Chatbots</title>
  <dc:creator>Isaac Flath</dc:creator>
  <link>https://isaac-flath.tech/posts/NeuralNetworks/ChatBots.html</link>
  <description><![CDATA[ 





<p>I developed a process and app for creating and deploying chatbots for support and question answering purposes for Novetta. This solution focused on practicality including minimizing the dataset needed, minimizing training/retraining needed, eliminating the need to retrain if policies change, and empowering domain experts to expand and improve the responses of without requiring a ML engineer for every tweak.</p>
<p>This approach was built on the sentence transformer (siamese BERT) architecture and the core machine learning technology was semantic similarity. I built it using dash, but any deployment method could be used (slack bot, email bot, web app, etc.)</p>
<p>To read the blog post <a href="https://web.archive.org/web/20221114235423/https://www.novetta.com/2021/06/chatbots/">click here</a></p>
<blockquote class="blockquote">
<p>Note: I believe this approach is still valid today as of 2024. The more common approach today would be to use an LLM, and pull in the answer to the prompt (RAG) to let the LLM generate a response rather than using a fixed set of responses. However, in some cases it is advantageous to have vetted responses with no risk of halucination.</p>
</blockquote>



 ]]></description>
  <category>Neural Networks</category>
  <guid>https://isaac-flath.tech/posts/NeuralNetworks/ChatBots.html</guid>
  <pubDate>Wed, 23 Jun 2021 04:00:00 GMT</pubDate>
  <media:content url="https://isaac-flath.tech/posts/_TopicImages/NeuralNetwork.jpg" medium="image" type="image/jpeg"/>
</item>
<item>
  <title>Multi-Armed Bandits</title>
  <dc:creator>Isaac Flath</dc:creator>
  <link>https://isaac-flath.tech/posts/Other/MultiArmedBandits.html</link>
  <description><![CDATA[ 





<p><strong>Background:</strong> Multi Armed Bandits (MAB) are a method of choosing the best action from a bunch of options. In order to choose the best action there are several problems to solve. These are:</p>
<ol type="1">
<li>How do you know what action is “best”?</li>
<li>What if the “best” action changes over time? How do you know it’s changed?</li>
<li>How do I balance choosing the best action with collecting new information?</li>
</ol>
<p><strong>Purpose:</strong> The purpose of this post is to explain what a Multi Armed Bandit (MAB) is, and how it solves those problems.</p>
<section id="mab-setup-requirements" class="level1" data-number="1">
<h1 data-number="1"><span class="header-section-number">1</span> MAB Setup Requirements</h1>
<p>In it’s essence, MAB is just A/B testing in an intelligent and automated way. Because it is like A/B testing it has very similar requirements for setup, but because it is automated it often requires defining these items with a bit more precision. Let’s start with what we need to have before we can use a MAB.</p>
<p><strong>Things to Define</strong> The things needed to set up new actions are the same as needed to set up an A/B test:</p>
<ol type="1">
<li>What the action is (ie send an email)</li>
<li>When selected, what should be done (ie use x template to send automated email to y customer)</li>
<li>What is the success criteria</li>
<li>What is the metric</li>
</ol>
<p>Most of the above is business information that business stakeholders decide in conjunction with technical teams. The tricky piece is <strong>all metrics must be comparable to each other</strong>. This is easy if it’s all emails and you just want to measure click through rate, but sometimes comparisons are harder. A common approach is to <strong>define each of these in terms of dollars</strong> (if possible).</p>
<div class="callout callout-style-default callout-note callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Example
</div>
</div>
<div class="callout-body-container callout-body">
<p>Which is better: A 10% click through email rate, or 2% phone answering rate? Without defining it in terms of dollars (profit or revenue), how do you know which is better for the business?</p>
</div>
</div>
</section>
<section id="terminology" class="level1" data-number="2">
<h1 data-number="2"><span class="header-section-number">2</span> Terminology</h1>
<p>Before we go further there are 2 terms we need to understand:</p>
<ul>
<li><strong>Exploitation:</strong> This simply means we are going to pick the action we think is best based on the metric</li>
<li><strong>Exploration:</strong> This means we are not going to pick the best action, but rather we are going to survey other action. One particular action may change in effectiveness over time and we want to spend some amount of time exploring so we can stay on top of these changes.</li>
</ul>
</section>
<section id="the-minimal-implementation" class="level1" data-number="3">
<h1 data-number="3"><span class="header-section-number">3</span> The Minimal Implementation</h1>
<p>Let’s describe what the simplest implementation would look like. The point of this is to understand the core of what a MAB is. Once we understand that we can look at all the ‘tricks’ that are used to make it fit a particular business and work better.</p>
<p>First we will do 2 things:</p>
<ol type="1">
<li>What percent of the time will be exploiting vs exploring (see terminology section above)</li>
<li>Calculate metrics for all actions</li>
</ol>
<p>Then loop through this repeatedly:</p>
<ol type="1">
<li>Pick action (Using probability to define whether we are exploiting or exploring)</li>
<li>Update data with results when available</li>
<li>Recalculate metrics using new data</li>
<li>Repeat</li>
</ol>
<p>This is the simplest MAB we can create. Let’s look at what we need to do to make it ‘smarter’ and fit a business.</p>
</section>
<section id="enhancements-customization" class="level1" data-number="4">
<h1 data-number="4"><span class="header-section-number">4</span> Enhancements &amp; Customization</h1>
<p>Now that we understand what a MAB is, let’s look at how to make it smarter. Which of these we do is problem dependent, but these are the key ideas to consider.</p>
<section id="use-segments" class="level2" data-number="4.1">
<h2 data-number="4.1" class="anchored" data-anchor-id="use-segments"><span class="header-section-number">4.1</span> 1. Use segments</h2>
<p><strong>Rather than calculate metrics over the entire universe of customers.</strong></p>
<p>Different segments of customers may behave differently. The “best” action for 1 group of customers may be different than the “best action” for a different group of customers. Instead of treating all customers equal, break them into segments so we can personalize actions more.</p>
<div class="callout callout-style-default callout-note callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Example
</div>
</div>
<div class="callout-body-container callout-body">
<p>One segment could be “people over 65 that live in a cold climate area that has opened at least 1 email in the past”</p>
</div>
</div>
</section>
<section id="use-smarter-exploration-methods" class="level2" data-number="4.2">
<h2 data-number="4.2" class="anchored" data-anchor-id="use-smarter-exploration-methods"><span class="header-section-number">4.2</span> 2. Use smarter exploration methods</h2>
<p><strong>Rather than picking exploration actions based on random chance use statistics to determine which need more sampling</strong></p>
<p>The most common 2 methods of defining exploration:</p>
<ul>
<li><strong>Thompson Sampling:</strong> Choose best action based on random belief based on the distributions rather than just the metric. 1 action may be better overall but based on a random sample in the distribution a ‘less good’ action may be better than a ‘best action’ based on distribution overlap.<br>
</li>
<li><strong>Upper Confidence Bound:</strong> Choose based on how confident you are in your measurements. The is no need to explore a category you have high confidence in (ie very stable with lots of data).</li>
</ul>
</section>
<section id="incorporate-business-logic" class="level2" data-number="4.3">
<h2 data-number="4.3" class="anchored" data-anchor-id="incorporate-business-logic"><span class="header-section-number">4.3</span> 3. Incorporate business logic</h2>
<p>There are 2 main places this can be added</p>
<section id="action-selection" class="level3" data-number="4.3.1">
<h3 data-number="4.3.1" class="anchored" data-anchor-id="action-selection"><span class="header-section-number">4.3.1</span> Action Selection</h3>
<p>Sometimes not all actions are appropriate or we want to modify the probability an action is selected based on specific customer behavior. Let’s look at a couple examples of how we can weave in business logic.</p>
<div class="callout callout-style-default callout-note callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Example
</div>
</div>
<div class="callout-body-container callout-body">
<p>If no phone number on file all actions related to email cannot be selected</p>
</div>
</div>
<p>This is the simplest example of a business rule. It could be that overall sending an email is the best action for customers, but we wouldn’t want to choose an email action if we have no way to reach out to them.</p>
<div class="callout callout-style-default callout-note callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Example
</div>
</div>
<div class="callout-body-container callout-body">
<p>If have customer has not answered the last 10 phone calls, reduce call action probabilities by 10%</p>
</div>
</div>
<p>This is a simple example. Making a phone call may be the best way overall to make a sale, but we have information on this specific customer that they do not answer the phone. We may still want to try on occasion, but less often for this specific customer.</p>
<div class="callout callout-style-default callout-note callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Example
</div>
</div>
<div class="callout-body-container callout-body">
<p>If a customer has bought X products before, remove Y offer from consideration</p>
</div>
</div>
<p>This is where it’s important to incorporate human expertise and knowledge of a business in. The best technical solutions don’t ignore human expertise, but rather enhance human expertise and help scale that expertise to more customers.</p>
</section>
<section id="action-execution" class="level3" data-number="4.3.2">
<h3 data-number="4.3.2" class="anchored" data-anchor-id="action-execution"><span class="header-section-number">4.3.2</span> Action Execution</h3>
<p>You can have some generic actions such as “Send Offer Email” and insert business logic there. For example “Send Offer Email” may send template 1 with cruise destinations for landlocked states or template 2 with resort destinations for people in ocean border states.</p>
</section>
</section>
<section id="deep-learning" class="level2" data-number="4.4">
<h2 data-number="4.4" class="anchored" data-anchor-id="deep-learning"><span class="header-section-number">4.4</span> 4. Deep Learning</h2>
<p>This is rarely the best starting point and requires a great deal of expertise. Rather than picking actions based on metric you could pick an action based on predicted outcomes using an output of NN (meaning NN needs to be updated in real time).</p>
<p>Using deep learning can often improve accuracy quite a bit, but it comes with a lot of negatives as well.</p>
<p><strong>Pros:</strong> + Increased accuracy</p>
<p><strong>Cons:</strong> + Harder to change, add, and remove actions + Less “Interpretable”, meaning it is harder to understand rationale behind what/why certain actions are considered “best” + Much longer to set up and much harder to maintain over time + Higher risk of hidden biases</p>
<p>Think carefully before going this route! Using deep learning for this is an incredibly powerful approach in the right situations, but those situations are not as common as many people believe.</p>
</section>
</section>
<section id="code-it-up" class="level1" data-number="5">
<h1 data-number="5"><span class="header-section-number">5</span> Code it up!</h1>
<p>Here we will code the simplest example so we can see a skeleton of how it works and get you started on the path of implementing one for your use-case.</p>
<div id="cell-15" class="cell">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb1-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> pandas <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> pd</span>
<span id="cb1-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> collections <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> defaultdict </span>
<span id="cb1-3"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> numpy <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> np</span>
<span id="cb1-4"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> math, statistics, random</span></code></pre></div>
</div>
<p>First let’s load and take a look at our data. The dataset we will be using is website latency. We want to pick the website at each given moment with the lowest latency.</p>
<div class="callout callout-style-default callout-note callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Note
</div>
</div>
<div class="callout-body-container callout-body">
<p>This dataset is easy because it’s very easy to have comparable metrics. We don’t have to worry about comparing phone calls to emails, we have the same universal metric for each action.</p>
</div>
</div>
<div id="cell-17" class="cell">
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb2-1">df <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pd.read_csv(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'../_data/univ-latencies/univ-latencies.txt'</span>)</span>
<span id="cb2-2">df.head()</span></code></pre></div>
<div class="cell-output cell-output-display">
<div>


<table class="dataframe caption-top table table-sm table-striped small" data-quarto-postprocess="true" data-border="1">
<thead>
<tr class="header">
<th data-quarto-table-cell-role="th"></th>
<th data-quarto-table-cell-role="th">acu-edu</th>
<th data-quarto-table-cell-role="th">acadiau-ca</th>
<th data-quarto-table-cell-role="th">adrian-edu</th>
<th data-quarto-table-cell-role="th">agnesscott-edu</th>
<th data-quarto-table-cell-role="th">aims-edu</th>
<th data-quarto-table-cell-role="th">uni-freiburg-de</th>
<th data-quarto-table-cell-role="th">alfred-edu</th>
<th data-quarto-table-cell-role="th">alvernia-edu</th>
<th data-quarto-table-cell-role="th">alverno-edu</th>
<th data-quarto-table-cell-role="th">american-edu</th>
<th data-quarto-table-cell-role="th">...</th>
<th data-quarto-table-cell-role="th">williams-edu</th>
<th data-quarto-table-cell-role="th">wsc-nodak-edu</th>
<th data-quarto-table-cell-role="th">winona-msus-edu</th>
<th data-quarto-table-cell-role="th">wpi-edu</th>
<th data-quarto-table-cell-role="th">wright-edu</th>
<th data-quarto-table-cell-role="th">yale-edu</th>
<th data-quarto-table-cell-role="th">yu-edu</th>
<th data-quarto-table-cell-role="th">yorku-ca</th>
<th data-quarto-table-cell-role="th">upenn-edu</th>
<th data-quarto-table-cell-role="th">ens-fr</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td data-quarto-table-cell-role="th">0</td>
<td>396</td>
<td>381</td>
<td>488</td>
<td>506</td>
<td>333</td>
<td>1327</td>
<td>132</td>
<td>70</td>
<td>456</td>
<td>121</td>
<td>...</td>
<td>220</td>
<td>1898</td>
<td>434</td>
<td>125</td>
<td>304</td>
<td>94</td>
<td>460</td>
<td>347</td>
<td>532</td>
<td>429</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">1</td>
<td>271</td>
<td>261</td>
<td>488</td>
<td>504</td>
<td>276</td>
<td>1084</td>
<td>89</td>
<td>23</td>
<td>409</td>
<td>34</td>
<td>...</td>
<td>263</td>
<td>1032</td>
<td>294</td>
<td>74</td>
<td>269</td>
<td>252</td>
<td>98</td>
<td>265</td>
<td>233</td>
<td>293</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">2</td>
<td>271</td>
<td>141</td>
<td>325</td>
<td>545</td>
<td>266</td>
<td>1078</td>
<td>86</td>
<td>27</td>
<td>837</td>
<td>33</td>
<td>...</td>
<td>409</td>
<td>891</td>
<td>292</td>
<td>77</td>
<td>288</td>
<td>41</td>
<td>78</td>
<td>261</td>
<td>114</td>
<td>300</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">3</td>
<td>268</td>
<td>136</td>
<td>324</td>
<td>1946</td>
<td>331</td>
<td>1342</td>
<td>88</td>
<td>24</td>
<td>531</td>
<td>35</td>
<td>...</td>
<td>361</td>
<td>421</td>
<td>298</td>
<td>76</td>
<td>228</td>
<td>42</td>
<td>153</td>
<td>266</td>
<td>322</td>
<td>532</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">4</td>
<td>273</td>
<td>136</td>
<td>321</td>
<td>549</td>
<td>290</td>
<td>1192</td>
<td>143</td>
<td>26</td>
<td>434</td>
<td>32</td>
<td>...</td>
<td>982</td>
<td>522</td>
<td>296</td>
<td>73</td>
<td>764</td>
<td>41</td>
<td>98</td>
<td>262</td>
<td>234</td>
<td>271</td>
</tr>
</tbody>
</table>

<p>5 rows × 760 columns</p>
</div>
</div>
</div>
<p>So first, we need to define out metrics and how we will update the metrics. As new data comes in we need to always keep track of the data so we can determine which is the best action and which we need to explore periodically.</p>
<div id="cell-19" class="cell">
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb3-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">class</span> Metrics:</span>
<span id="cb3-2">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__init__</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>):</span>
<span id="cb3-3">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.values <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> defaultdict(<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">lambda</span>: [])</span>
<span id="cb3-4">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.metrics <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">dict</span>()</span>
<span id="cb3-5">    </span>
<span id="cb3-6">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> update_metrics(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>):</span>
<span id="cb3-7">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">'''calculate the metrics for each action'''</span></span>
<span id="cb3-8">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.metrics <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">dict</span>() <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Reset metrics</span></span>
<span id="cb3-9">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> key <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.values.keys(): <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># For each action</span></span>
<span id="cb3-10">            <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.metrics[key] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> statistics.mean(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.values[key]) <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># average the latencies for our metric</span></span>
<span id="cb3-11">      </span>
<span id="cb3-12">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> add_data(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>,series):</span>
<span id="cb3-13">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> key <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> series.keys(): <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># for each action</span></span>
<span id="cb3-14">            <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.values[key].append(series[key]) <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Append the new data </span></span>
<span id="cb3-15">            <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.values[key]) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">7</span>: <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.values[key].pop(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>) <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># only keep last 7 values - older data is no longer relevant</span></span>
<span id="cb3-16">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.update_metrics() <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Update metrics using recent data</span></span></code></pre></div>
</div>
<p>Next, we need the actual Multi-Armed Bandit that can select actions based on the metrics the previous class calculates. Let’s build this now.</p>
<div id="cell-21" class="cell">
<div class="sourceCode cell-code" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb4-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">class</span> MAB:</span>
<span id="cb4-2">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__init__</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>,exploration_prob):</span>
<span id="cb4-3">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.exploration_prob <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> exploration_prob <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># User defined</span></span>
<span id="cb4-4">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.actions <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pd.DataFrame(columns<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'action'</span>,<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'latency'</span>,<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'min_latency'</span>,<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'regret'</span>])</span>
<span id="cb4-5">    </span>
<span id="cb4-6">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> perform_action(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>,m):</span>
<span id="cb4-7">        </span>
<span id="cb4-8">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Identify the "best" action based on the smallest average latency</span></span>
<span id="cb4-9">        ideal_action <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">min</span>(m.metrics, key<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>m.metrics.get) </span>
<span id="cb4-10">        </span>
<span id="cb4-11">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Based on exploration probabiliity choose either random exploration or choose the "best action"</span></span>
<span id="cb4-12">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> np.random.rand() <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.exploration_prob: action <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> random.choice(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">list</span>(m.metrics.keys()))</span>
<span id="cb4-13">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">else</span>: action <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> ideal_action</span>
<span id="cb4-14">            </span>
<span id="cb4-15">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Store results</span></span>
<span id="cb4-16">        idx <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> mab.actions.index.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">max</span>()<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span></span>
<span id="cb4-17">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> math.isnan(idx): idx <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span></span>
<span id="cb4-18">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.actions.loc[idx] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [action,m.metrics[action],m.metrics[ideal_action],m.metrics[action]<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>m.metrics[ideal_action]]</span>
<span id="cb4-19">    </span></code></pre></div>
</div>
<p>We can now use those to run through the entire dataset and choose actions. Regret measures the difference between the latency we chose and the latency of the best choice, which helps us understand the cost of our exploration.</p>
<div id="cell-23" class="cell">
<div class="sourceCode cell-code" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb5-1">m <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Metrics() <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Initialize Metrics</span></span>
<span id="cb5-2">mab <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> MAB(<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.15</span>) <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Initionalize our MAB with a 15% exploration probabilty</span></span>
<span id="cb5-3"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> i <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(df)): <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># for each point in time</span></span>
<span id="cb5-4">    m.add_data(series<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>df.iloc[i]) <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Add Data</span></span>
<span id="cb5-5">    mab.perform_action(m) <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Select an action and calculate results</span></span></code></pre></div>
</div>
<p>When we look at the results we see that the “best” action is not always the same but we are pretty good about selecting the best action anyway. We do this by sampling options to monitor how all the actions change over time through constant exploration (15% of the time). The regret column measures the difference between the latency of the option we selected and the ideal option which we can use to measure and tune the cost of our exploration.</p>
<div id="cell-25" class="cell">
<div class="sourceCode cell-code" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb6-1">mab.actions.sample(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>)</span></code></pre></div>
<div class="cell-output cell-output-display">
<div>


<table class="dataframe caption-top table table-sm table-striped small" data-quarto-postprocess="true" data-border="1">
<thead>
<tr class="header">
<th data-quarto-table-cell-role="th"></th>
<th data-quarto-table-cell-role="th">action</th>
<th data-quarto-table-cell-role="th">latency</th>
<th data-quarto-table-cell-role="th">min_latency</th>
<th data-quarto-table-cell-role="th">regret</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td data-quarto-table-cell-role="th">1274</td>
<td>pace-edu</td>
<td>18</td>
<td>18</td>
<td>0</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">990</td>
<td>pace-edu</td>
<td>16</td>
<td>16</td>
<td>0</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">899</td>
<td>pace-edu</td>
<td>18</td>
<td>18</td>
<td>0</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">1336</td>
<td>csustan-edu</td>
<td>86</td>
<td>11</td>
<td>75</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">1331</td>
<td>pace-edu</td>
<td>17</td>
<td>17</td>
<td>0</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">437</td>
<td>wcupa-edu</td>
<td>16</td>
<td>16</td>
<td>0</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">194</td>
<td>udel-edu</td>
<td>425</td>
<td>10</td>
<td>415</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">1308</td>
<td>pace-edu</td>
<td>16</td>
<td>16</td>
<td>0</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">1249</td>
<td>pace-edu</td>
<td>18</td>
<td>18</td>
<td>0</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">149</td>
<td>fitnyc-edu</td>
<td>12</td>
<td>12</td>
<td>0</td>
</tr>
</tbody>
</table>

</div>
</div>
</div>
</section>
<section id="conclusion" class="level1" data-number="6">
<h1 data-number="6"><span class="header-section-number">6</span> Conclusion</h1>
<p>I hope after reading this post you have an good technical foundation in what a multi-armed bandit is and how to code a very simple one. I hope in addition to that you understand what are some of the challenges to a successful implementation and full solution. I did not code up the variations that make this approach more powerful, but with this as a foundation and a little research you now should have all the tools you need to get started.</p>


</section>

 ]]></description>
  <category>Tabular Modeling</category>
  <guid>https://isaac-flath.tech/posts/Other/MultiArmedBandits.html</guid>
  <pubDate>Thu, 15 Apr 2021 04:00:00 GMT</pubDate>
  <media:content url="https://isaac-flath.tech/posts/_TopicImages/Algorithm.jpg" medium="image" type="image/jpeg"/>
</item>
<item>
  <title>Python Concurrency</title>
  <dc:creator>Isaac Flath</dc:creator>
  <link>https://isaac-flath.tech/posts/Python/PythonConcurrency.html</link>
  <description><![CDATA[ 





<section id="intro" class="level1" data-number="1">
<h1 data-number="1"><span class="header-section-number">1</span> Intro</h1>
<section id="who-is-this-for" class="level2" data-number="1.1">
<h2 data-number="1.1" class="anchored" data-anchor-id="who-is-this-for"><span class="header-section-number">1.1</span> Who is this for</h2>
<p>Data Scientists that want to learn what they need to know to effectively use parallel programming quickly and easily in their projects.</p>
</section>
<section id="what-questions-will-post-help-this-answer" class="level2" data-number="1.2">
<h2 data-number="1.2" class="anchored" data-anchor-id="what-questions-will-post-help-this-answer"><span class="header-section-number">1.2</span> What questions will post help this answer:</h2>
<ul>
<li>When I need to run something in parallel, should I use threads or processes?<br>
</li>
<li>How much of a speed up will I actually get?<br>
</li>
<li>What’s the easiest way run something in parallel in python without lots of complicated/annoying boilerplate?</li>
</ul>
</section>
<section id="inspiration" class="level2" data-number="1.3">
<h2 data-number="1.3" class="anchored" data-anchor-id="inspiration"><span class="header-section-number">1.3</span> Inspiration</h2>
<ul>
<li><a href="https://fastcore.fast.ai/parallel.html"><strong>The Fastcore library</strong></a> that was created by the fastai(https://www.fast.ai/) team led by <a href="https://twitter.com/jeremyphoward">Jeremy Howard</a>. It’s a really amazing library and has lots of really powerful features that I use on a daily basis. There’s a parallel module which I will be using for this post.</li>
<li><a href="https://python.hamel.dev/concurrency/"><strong>Super awesome article on Python Concurrency</strong></a> that was written by <a href="https://twitter.com/HamelHusain">Hamel Husain</a>. This is a great post that explains in detail exactly how it all works.</li>
</ul>
</section>
<section id="why-this-post" class="level2" data-number="1.4">
<h2 data-number="1.4" class="anchored" data-anchor-id="why-this-post"><span class="header-section-number">1.4</span> Why this post?</h2>
<ul>
<li>This will be application focused. Rather than examples such as a calculating fibonacci numbers, I will use real world examples for comparisons.</li>
<li>Rather than showing parallel processing from the foundations, we will be showing applications using the fastcore library.</li>
</ul>
<p>If you want low level and deep understanding you should study <a href="https://python.hamel.dev/concurrency/">Hamel’s post</a>. His article also covers topics I am not covering in this post. If you want a shortcut to get the information needed to apply and use parallel processing for data science this post is ideal as it covers the most critical pieces of information. I recommend reading this post then follow it up with Hamel’s post for a <a href="https://www.fast.ai/2016/10/08/teaching-philosophy/">top-down approach</a>.</p>
</section>
</section>
<section id="task-types" class="level1" data-number="2">
<h1 data-number="2"><span class="header-section-number">2</span> Task Types</h1>
<p>There are 2 major types of processes. In order to determine how to parallelize something you need to be able to identify which it is.</p>
<p><strong>CPU Bound:</strong> A CPU bound process is one that relies on the CPU. Any kind of extensive calculations are an example of this. A common example is calculating fibonacci numbers</p>
<p><strong>Not CPU Bound:</strong> A non CPU bound task is one that isn’t reliant on the CPU. The simplest example is a sleep command. The CPU doesn’t need to do much but it still needs to be monitored.</p>
<p>Let’s look at each and define a task more applicable to data science for each.</p>
<section id="cpu-bound-task" class="level2" data-number="2.1">
<h2 data-number="2.1" class="anchored" data-anchor-id="cpu-bound-task"><span class="header-section-number">2.1</span> CPU Bound Task</h2>
<p>Let’s imagine you are cooking. You are working on cutting your ingredients for a side-dish and also need to cook a separate dish that needs to be stirred constantly/non-stop. How can you speed that up? Well you cannot divide your time because the dish needs to be stirred non-stop. And while you are doing that, the cutting isn’t getting done. You simply can’t just jump back and forth. You could however speed it up by adding a second chef.</p>
<p>This is similar to the trade-off for <strong>parallelizing using processes</strong> in python. Each chef needs their own tools for their task. This translates to each process needing it’s own data in memory. This means data is often duplicated in memory for each process. But, if your constraint is the CPU this is the way to go!</p>
<p>For our CPU bound task we are going to train a bunch of decision trees. Of course, for basic architectures libraries will generally do the parallelization for you. As you start getting into more custom architectures, ideas, and tweaks that’s when it gets very important to know how to parallelize something.</p>
<p>The crude way to check if something is CPU bound you can start it and look at the utilization of the CPU as it runs. If it is maxed out without parallelization then it’s CPU bound.</p>
<div class="callout callout-style-default callout-tip callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Tip
</div>
</div>
<div class="callout-body-container callout-body">
<p>For CPU bound tasks you will want to parallelize using processes</p>
</div>
</div>
<section id="the-data" class="level3" data-number="2.1.1">
<h3 data-number="2.1.1" class="anchored" data-anchor-id="the-data"><span class="header-section-number">2.1.1</span> The Data</h3>
<p>We are going to use the iris dataset as an example. It’s too small to do a meaningful example so I duplicate it a bunch to make it large enough to whee we can see what the difference in time is.</p>
<div id="cell-9" class="cell">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb1-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> sklearn.datasets <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> load_iris</span>
<span id="cb1-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> datetime <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> datetime</span>
<span id="cb1-3"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> sklearn <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> tree</span>
<span id="cb1-4"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> numpy <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> np</span>
<span id="cb1-5"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> fastcore.foundation <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span></span>
<span id="cb1-6"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> fastcore.parallel <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span></span>
<span id="cb1-7"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> random</span></code></pre></div>
</div>
<div id="cell-10" class="cell">
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb2-1">X, y <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> load_iris(return_X_y<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>)</span>
<span id="cb2-2"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> i <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">12</span>): X,y <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.concatenate((X,X)),np.concatenate((y,y))</span>
<span id="cb2-3"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f'Our big iris dataset has </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>X<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>shape[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>]<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;"> rows and </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>X<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>shape[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>]<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;"> columns'</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Our big iris dataset has 614400 rows and 4 columns</code></pre>
</div>
</div>
</section>
<section id="the-task" class="level3" data-number="2.1.2">
<h3 data-number="2.1.2" class="anchored" data-anchor-id="the-task"><span class="header-section-number">2.1.2</span> The Task</h3>
<p>We are going to train a tree many times. Of course, we wouldn’t want to train the same tree each time, so we will allow for passing in indexes so that we get a different random subset of the data to train our different trees on</p>
<div id="cell-12" class="cell">
<div class="sourceCode cell-code" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb4-1">idxs_all <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> L(L(random.sample(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(X)), <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">int</span>(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(X)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">.8</span>))) <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> i <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">50</span>))</span></code></pre></div>
</div>
<div id="cell-13" class="cell">
<div class="sourceCode cell-code" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb5-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> train_tree(idxs,X<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>X,y<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>y):</span>
<span id="cb5-2">    X_tmp,y_tmp <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> X[idxs],y[idxs]</span>
<span id="cb5-3">    clf <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> tree.DecisionTreeClassifier()</span>
<span id="cb5-4">    clf <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> clf.fit(X_tmp, y_tmp)</span>
<span id="cb5-5">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> clf</span></code></pre></div>
</div>
</section>
<section id="comparison" class="level3" data-number="2.1.3">
<h3 data-number="2.1.3" class="anchored" data-anchor-id="comparison"><span class="header-section-number">2.1.3</span> Comparison</h3>
<p>Great so let’s train all our decision trees. I told you above that we should use process for this but I will do all three options so we can compare times and validate that.</p>
<ul>
<li><strong>Option 1 - No Parallel:</strong> We will just use a standard for loop to do them sequentially.</li>
<li><strong>Option 2 - Threads:</strong> Parallelize using threads</li>
<li><strong>Option 3 - Processes:</strong> Parallelize using processes</li>
</ul>
<p>As you can see below the right approach to parallel processing for this task (processes) meant less than 1/4 the time to complete the task. But the wrong approach to parallel processing in this task (threads) helped some but not nearly as much. This is a great example of why it’s important to understand how parallel processing works and what the constraint is so you can make smart choices quickly.</p>
<div class="callout callout-style-default callout-tip callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Tip
</div>
</div>
<div class="callout-body-container callout-body">
<p>The <a href="https://fastcore.fast.ai/parallel.html#parallel">parallel</a> function I am using is from the <a href="https://fastcore.fast.ai/">fastcore</a> library. Set your number of workers, and apply the function in the first argument to all in the second and you are done. Threadpool boolean determines whether it uses threads or processes for parallelization.</p>
</div>
</div>
<div id="cell-15" class="cell">
<div class="sourceCode cell-code" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb6-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># No Parallel</span></span>
<span id="cb6-2">st <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> datetime.now()</span>
<span id="cb6-3">out <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> L()</span>
<span id="cb6-4"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> idxs <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> idxs_all: out.append(train_tree(idxs))</span>
<span id="cb6-5"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f'Completion time without parallel processing: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>datetime<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>now()<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>st<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Completion time without parallel processing: 0:00:11.251791</code></pre>
</div>
</div>
<div id="cell-16" class="cell">
<div class="sourceCode cell-code" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb8-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Parallel using Threads</span></span>
<span id="cb8-2">st <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> datetime.now()</span>
<span id="cb8-3">parallel(train_tree, idxs_all, threadpool<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>, n_workers<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">8</span>, progress<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span>)</span>
<span id="cb8-4"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f'Completion time with thread parallelization: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>datetime<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>now()<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>st<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Completion time with thread parallelization: 0:00:06.415588</code></pre>
</div>
</div>
<div id="cell-17" class="cell">
<div class="sourceCode cell-code" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb10-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Parallel using Processes</span></span>
<span id="cb10-2">st <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> datetime.now()</span>
<span id="cb10-3">parallel(train_tree, idxs_all, threadpool<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span>, n_workers<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>, progress<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span>)</span>
<span id="cb10-4"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(datetime.now()<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>st)</span>
<span id="cb10-5"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f'Completion time with process parallelization: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>datetime<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>now()<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>st<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>0:00:03.352727
Completion time with process parallelization: 0:00:03.353085</code></pre>
</div>
</div>
</section>
</section>
<section id="non-cpu-bound-task" class="level2" data-number="2.2">
<h2 data-number="2.2" class="anchored" data-anchor-id="non-cpu-bound-task"><span class="header-section-number">2.2</span> Non CPU Bound Task</h2>
<p>In another cooking analogy, imagine you are making hard boiled eggs and rice. If you are doing 1 after the other how could you speed that up? Well you could:</p>
<ol type="1">
<li>Start boiling the water for the egg</li>
<li>While the water for the egg is heating put the rice and water in the rice cooker and start that</li>
<li>Change tasks and add the egg to the hot water</li>
<li>Change tasks and take the rice out when done</li>
<li>Change tasks and take the egg out when done</li>
</ol>
<p>This is how <strong>parallelizing using threads</strong> works in python. Rather than adding a chef you just have 1 chef divide there time and switch between tasks quickly. This isn’t possible if the CPU core is maxed out, but if the constraint is not the CPU it can help a ton. If the CPU is maxed out, multi-tasking won’t actually speed anything up.</p>
<p>The two main examples of non CPU bound tasks are network related tasks (ie Upload/Download) or disk related takes (ie reading or writing files). This is fairly common in data science. If you are doing deep learning on images for example you probably have tens of thousands of images you need to read in in batches every epoch. That will be our example.</p>
<div class="callout callout-style-default callout-tip callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Tip
</div>
</div>
<div class="callout-body-container callout-body">
<p>For CPU bound tasks you will want to parallelize using threads</p>
</div>
</div>
<section id="the-data-1" class="level3" data-number="2.2.1">
<h3 data-number="2.2.1" class="anchored" data-anchor-id="the-data-1"><span class="header-section-number">2.2.1</span> The Data</h3>
<p>We are going to use IMAGENETTE_320 and download using <a href="https://docs.fast.ai/data.external.html">fastai’s external data module</a>. We have a list of image paths!</p>
<div id="cell-20" class="cell">
<div class="sourceCode cell-code" id="cb12" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb12-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> fastai.vision.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">all</span> <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span></span></code></pre></div>
</div>
<div id="cell-21" class="cell">
<div class="sourceCode cell-code" id="cb13" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb13-1">path <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> untar_data(URLs.IMAGENETTE_320)</span>
<span id="cb13-2"></span>
<span id="cb13-3">img_paths <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> get_image_files(path)</span>
<span id="cb13-4">img_paths <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">str</span>(o) <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> o <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> img_paths]</span>
<span id="cb13-5"></span>
<span id="cb13-6"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f'Number of images: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(img_paths)<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span>)</span>
<span id="cb13-7"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Thee examples of what's in this list:"</span>)</span>
<span id="cb13-8">img_paths[:<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>]</span></code></pre></div>
<div class="cell-output cell-output-display">

<style>
    /* Turns off some styling */
    progress {
        /* gets rid of default border in Firefox and Opera. */
        border: none;
        /* Needs to be in here for Safari polyfill so background images work as expected. */
        background-size: auto;
    }
    .progress-bar-interrupted, .progress-bar-interrupted::-webkit-progress-bar {
        background: #F44336;
    }
</style>
</div>
<div class="cell-output cell-output-display">

    <div>
      <progress value="341663744" class="" max="341663724" style="width:300px; height:20px; vertical-align: middle;"></progress>
      100.00% [341663744/341663724 00:18&lt;00:00]
    </div>
    
</div>
<div class="cell-output cell-output-stdout">
<pre><code>Number of images: 13394
Thee examples of what's in this list:</code></pre>
</div>
<div class="cell-output cell-output-display">
<pre><code>['/Users/isaacflath/.fastai/data/imagenette2-320/train/n03394916/ILSVRC2012_val_00046669.JPEG',
 '/Users/isaacflath/.fastai/data/imagenette2-320/train/n03394916/n03394916_58454.JPEG',
 '/Users/isaacflath/.fastai/data/imagenette2-320/train/n03394916/n03394916_32588.JPEG']</code></pre>
</div>
</div>
</section>
<section id="the-task-1" class="level3" data-number="2.2.2">
<h3 data-number="2.2.2" class="anchored" data-anchor-id="the-task-1"><span class="header-section-number">2.2.2</span> The Task</h3>
<p>We are going to load in our images for training. We will do it in batches of 128. We aren’t doing a full pipeline with augmentation and all that. All we are doing is reading the images in to see the speed up in that piece. Let’s read in one image and display it to familiarize ourselves with the task.</p>
<div id="cell-23" class="cell">
<div class="sourceCode cell-code" id="cb16" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb16-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> cv2</span>
<span id="cb16-2">batch_size<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">128</span></span>
<span id="cb16-3">img <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> cv2.imread(img_paths[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>])</span>
<span id="cb16-4">cv2.imshow(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'image'</span>,img)</span>
<span id="cb16-5">plt.imshow(img)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span> plt.axis(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'off'</span>)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span> plt.show()</span></code></pre></div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://isaac-flath.tech/posts/Python/PythonConcurrency_files/figure-html/cell-11-output-1.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
</div>
</section>
<section id="comparisons" class="level3" data-number="2.2.3">
<h3 data-number="2.2.3" class="anchored" data-anchor-id="comparisons"><span class="header-section-number">2.2.3</span> Comparisons</h3>
<p>Now we read the images in for the full dataset in batches of 128. I told you above that we should use threads for this but I will do all three options so we can compare times.</p>
<ul>
<li><strong>Option 1 - No Parallel:</strong> We will just use a standard for loop to do them sequentially.</li>
<li><strong>Option 2 - Threads:</strong> Parallelize using threads</li>
<li><strong>Option 3 - Processes:</strong> Parallelize using processes</li>
</ul>
<p>As you can see below the right approach to parallel processing for this task (threads) meant less than 1/3 the time to complete the task. But the wrong approach to parallel processing for this task (processes) means over 3x more time to complete the task. This is a great example of why it’s important to understand how parallel processing works and what the constraint is so you can make smart choices quickly.</p>
<div id="cell-25" class="cell">
<div class="sourceCode cell-code" id="cb17" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb17-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># No Parallel</span></span>
<span id="cb17-2">st <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> datetime.now()</span>
<span id="cb17-3"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> i <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">int</span>(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(img_paths)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span>batch_size)): </span>
<span id="cb17-4">  batch_paths <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> img_paths[i<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>batch_size:i<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>batch_size<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span>batch_size]</span>
<span id="cb17-5">  batch <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> L()</span>
<span id="cb17-6">  <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> img_path <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> batch_paths:</span>
<span id="cb17-7">    batch.append(cv2.imread(img_path))</span>
<span id="cb17-8"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(datetime.now()<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>st)</span>
<span id="cb17-9"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f'Completion time without parallel processing: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>datetime<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>now()<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>st<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>0:00:24.941654
Completion time without parallel processing: 0:00:24.941788</code></pre>
</div>
</div>
<div id="cell-26" class="cell">
<div class="sourceCode cell-code" id="cb19" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb19-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Parallel using Threads</span></span>
<span id="cb19-2">st <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> datetime.now()</span>
<span id="cb19-3"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> i <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">int</span>(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(img_paths)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">128</span>)):</span>
<span id="cb19-4">  batch_paths <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> img_paths[i<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">128</span>:i<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">128</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">128</span>]</span>
<span id="cb19-5">  parallel(cv2.imread, batch_paths, threadpool<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>, n_workers<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">8</span>, progress<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span>)</span>
<span id="cb19-6"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(datetime.now()<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>st)</span>
<span id="cb19-7"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f'Completion time with thread parallelization: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>datetime<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>now()<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>st<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>0:00:08.041621
Completion time with thread parallelization: 0:00:08.042516</code></pre>
</div>
</div>
<div id="cell-27" class="cell">
<div class="sourceCode cell-code" id="cb21" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb21-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Parallel using Processes</span></span>
<span id="cb21-2">st <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> datetime.now()</span>
<span id="cb21-3"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> i <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">int</span>(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(img_paths)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">128</span>)):</span>
<span id="cb21-4">  batch_paths <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> img_paths[i<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">128</span>:i<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">128</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">128</span>]</span>
<span id="cb21-5">  parallel(cv2.imread, batch_paths, threadpool<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span>, n_workers<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">8</span>, progress<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span>)</span>
<span id="cb21-6"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(datetime.now()<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>st)</span>
<span id="cb21-7"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f'Completion time with process parallelization: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>datetime<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>now()<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>st<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>0:01:13.452496
Completion time with process parallelization: 0:01:13.452966</code></pre>
</div>
</div>
</section>
</section>
</section>
<section id="processes-vs.-threads" class="level1" data-number="3">
<h1 data-number="3"><span class="header-section-number">3</span> Processes vs.&nbsp;threads</h1>
<p>I’d like a wrap up with a summary of processes vs.&nbsp;threads for data scientists.</p>
<div class="callout callout-style-default callout-note callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Note
</div>
</div>
<div class="callout-body-container callout-body">
<p>This is a section from <a href="https://python.hamel.dev/concurrency/#a-note-for-data-scientists-processes-vs-threads">Hamel’s article.</a> I cannot think of a clearer or more concise way of explaining this so I will just use his words. If you think this is helpful, consider reading that whole article.</p>
</div>
</div>
<ul>
<li><p>If you are downloading lots of files from the internet, consider using threads. This is because most of your time is spent on network I/O, not on the CPU. For example, this article demonstrates a 50% speedup when using threads compared to processes for downloading files.</p></li>
<li><p>If you are transforming or cleaning a large dataset, this work is mostly CPU bound so using processes makes sense. The only part of this that isn’t CPU-bound is reading and writing the data to disk.</p></li>
<li><p>If you just want to load a bunch of files into memory or write a bunch of files to disk, without really doing any transformations, consider using threads as the work is mostly disk I/O and not CPU bound.</p></li>
<li><p>Keep in mind that threads can be more memory efficient than processes because of differences in the way they work. So using lots of processes when you don’t need them can lead to memory bloat.</p></li>
</ul>
<p><strong>Most importantly</strong>, try avoid having to think about processes and threads where you can and use scientific computing libraries like numpy and write vectorized operations wherever you can. It is always worth being aware of the concurrency tools available in the library or framework you are using (especially numerical computing and other data science libraries) and consider using them when appropriate.</p>


</section>

 ]]></description>
  <category>Python</category>
  <category>Programming</category>
  <guid>https://isaac-flath.tech/posts/Python/PythonConcurrency.html</guid>
  <pubDate>Thu, 01 Apr 2021 04:00:00 GMT</pubDate>
  <media:content url="https://isaac-flath.tech/posts/_TopicImages/python.jpg" medium="image" type="image/jpeg"/>
</item>
<item>
  <title>CycleGAN Walk Through</title>
  <dc:creator>Isaac Flath</dc:creator>
  <link>https://isaac-flath.tech/posts/GenerativeModels/CycleGanWalkThrough.html</link>
  <description><![CDATA[ 





<p>In this post I will build on my <a href="../../posts/GenerativeModels/GANIntroduction.html">previous</a> <a href="../../posts/GenerativeModels/StyleGanComponents.html">posts</a> on GANs and talk about CycleGAN.</p>
<p>In StyleGAN, we took noise and generated an image realistic enough to fool the discriminator. In CycleGAN we take an image and modify it to a different class to make that modified image realistic enough to fool the discriminator into believing it’s that class.</p>
<p>I am going to walk through a great <a href="https://github.com/aitorzip/PyTorch-CycleGAN">Pytorch CycleGAN implementation</a> and explain what the pieces are doing in plain english so anyone can understand the important bits without diving through lots of code or reading an academic paper.</p>
<p>Before we jump in - here’s the three most important pieces to CycleGAN to understand if you want to skip to the most crucial bits. I labeled the key sections in the Table of Contents for you.</p>
<ol type="1">
<li>There are 2 generators and 2 discriminators being trained. 4 total models!</li>
<li>The Generator Loss function has 3 components: adversarial Loss, Cycle Loss, and Identity loss. Understanding these is key.</li>
<li>The Discriminator predicts real or fake for lots of different chunks of the image, not just 1 prediction for the whole image.</li>
</ol>
<p>These will be explained in detail as we go so don’t worry if that doesn’t completely make sense just yet. It will :)</p>
<p>So let’s get started!</p>
<section id="transforms" class="level1" data-number="1">
<h1 data-number="1"><span class="header-section-number">1</span> Transforms</h1>
<p>This implementation of CycleGAN is using basic transforms that are not unique to CycleGAN so I won’t be diving into detail on those in this post. Please post a comment or message me on twitter if you have questions or want a post that talks in more detail on transforms.</p>
<div id="2d446914" class="cell">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb1-1">transforms_train <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [ transforms.Resize(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">int</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">256</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.12</span>), Image.BICUBIC), </span>
<span id="cb1-2">                     transforms.RandomCrop(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">256</span>), </span>
<span id="cb1-3">                     transforms.RandomHorizontalFlip(),</span>
<span id="cb1-4">                     transforms.ToTensor(),</span>
<span id="cb1-5">                     transforms.Normalize((<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.5</span>,<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.5</span>,<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.5</span>), (<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.5</span>,<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.5</span>,<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.5</span>)) ]</span>
<span id="cb1-6">transforms_test <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [ transforms.ToTensor(),transforms.Normalize((<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.5</span>,<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.5</span>,<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.5</span>), (<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.5</span>,<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.5</span>,<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.5</span>)) ]</span></code></pre></div>
<div class="cell-output cell-output-stderr">
<pre><code>/var/folders/vs/j71s84gs4f7d059xxqrf71wc0000gn/T/ipykernel_75344/983886316.py:1: DeprecationWarning: BICUBIC is deprecated and will be removed in Pillow 10 (2023-07-01). Use Resampling.BICUBIC instead.
  transforms_train = [ transforms.Resize(int(256*1.12), Image.BICUBIC),</code></pre>
</div>
</div>
</section>
<section id="dataset" class="level1" data-number="2">
<h1 data-number="2"><span class="header-section-number">2</span> Dataset</h1>
<p>The dataset isn’t anything special other than a batch being images from both classes (A and B). This is a standard pytorch dataloader so I won’t cover what’s going on in this post, but there is a <a href="https://pytorch.org/tutorials/beginner/data_loading_tutorial.html">great tutorial</a> if you would like to understand this more.</p>
<p>There are 2 key things to notice here:</p>
<ul>
<li>A batch is a dictionary of images from class A and images from class B.</li>
<li>This example would be style transfer between summer and winter pictures (at Yosemite)</li>
</ul>
<div class="callout callout-style-default callout-note callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Note
</div>
</div>
<div class="callout-body-container callout-body">
<p>I have added a <code>show_batch</code> method to the dataloader. This is an idea I took from fastai and it I highly recommend making sure you have a very easy way to visualize anything you are working with. It will save you lots of time if you get that set up.</p>
</div>
</div>
<div id="30004146" class="cell">
<details class="code-fold">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb3-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">class</span> ImageDataset(Dataset):</span>
<span id="cb3-2">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__init__</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, root, transforms_<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>, unaligned<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span>, mode<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'train'</span>):</span>
<span id="cb3-3">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.transform <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> transforms.Compose(transforms_)</span>
<span id="cb3-4">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.unaligned <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> unaligned</span>
<span id="cb3-5">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.files_A <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">sorted</span>(glob.glob(os.path.join(root, <span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f'</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>mode<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">A'</span>) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'/*.*'</span>))[:<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">50</span>]</span>
<span id="cb3-6">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.files_B <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">sorted</span>(glob.glob(os.path.join(root, <span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f'</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>mode<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">B'</span>) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'/*.*'</span>))[:<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">50</span>]</span>
<span id="cb3-7">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__getitem__</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, index):</span>
<span id="cb3-8">        item_A <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.transform(Image.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">open</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.files_A[index <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.files_A)]))</span>
<span id="cb3-9"></span>
<span id="cb3-10">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.unaligned: item_B <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.transform(Image.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">open</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.files_B[random.randint(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.files_B) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)]))</span>
<span id="cb3-11">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">else</span>:              item_B <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.transform(Image.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">open</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.files_B[index <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.files_B)]))</span>
<span id="cb3-12"></span>
<span id="cb3-13">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> {<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'A'</span>: item_A, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'B'</span>: item_B}</span>
<span id="cb3-14"></span>
<span id="cb3-15">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__len__</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>): <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">max</span>(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.files_A), <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.files_B))</span>
<span id="cb3-16">    </span>
<span id="cb3-17">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> show_batch(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>,sets<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, cols<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>):</span>
<span id="cb3-18">        idxs <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> random.sample(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__len__</span>()), cols<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>sets)        </span>
<span id="cb3-19">        fig, ax <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> plt.subplots(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>sets, cols,figsize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>cols,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>sets))</span>
<span id="cb3-20">        </span>
<span id="cb3-21">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> r <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(sets):</span>
<span id="cb3-22">            <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> col <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>,cols):</span>
<span id="cb3-23">                row<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>r<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span></span>
<span id="cb3-24">                num <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> (row <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> cols <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> col)</span>
<span id="cb3-25">                x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>[idxs[num]][<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'A'</span>].permute(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>)</span>
<span id="cb3-26">                ax[row,col].imshow(<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.5</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> (x<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.</span>))<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span> ax[row,col].axis(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'off'</span>)</span>
<span id="cb3-27"></span>
<span id="cb3-28">                row<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>row<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span></span>
<span id="cb3-29">                num <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> (row <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> cols <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> col)</span>
<span id="cb3-30">                x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>[idxs[num]][<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'B'</span>].permute(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>)</span>
<span id="cb3-31">                ax[row,col].imshow(<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.5</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>(x<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.</span>))<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span> ax[row,col].axis(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'off'</span>)</span></code></pre></div>
</details>
</div>
<p>Rows 1 and 3 are summer pictures (class A) where rows 2 and 4 are winter pictures (class B)</p>
<div id="6685a487-1b56-4fb6-9d37-ecc1ff0b83e2" class="cell">
<div class="sourceCode cell-code" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb4-1">train_dataloader <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> DataLoader(ImageDataset(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'datasets/summer2winter_yosemite'</span>, transforms_<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>transforms_train, unaligned<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>),batch_size<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, shuffle<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>, num_workers<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">8</span>)</span>
<span id="cb4-2">train_dataloader.dataset.show_batch()</span></code></pre></div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://isaac-flath.tech/posts/GenerativeModels/CycleGanWalkThrough_files/figure-html/cell-5-output-1.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
</div>
</section>
<section id="models" class="level1" data-number="3">
<h1 data-number="3"><span class="header-section-number">3</span> Models</h1>
<p>We have discriminators and generators - let’s look briefly at what they output, then dive into some details.</p>
<ul>
<li>The discriminator outputs a bunch of predictions as to whether different portions of an image is a real image of that class or a fake image of that class</li>
<li>The generator is taking a real image and converting it to the other class. For example a picture of a lake in the Summer goes in and a picture of that same lake in the winter should come out (maybe adding snow for example).</li>
</ul>
<div class="callout callout-style-default callout-note callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Note
</div>
</div>
<div class="callout-body-container callout-body">
<p>I am assuming you have a general understanding of what the role of a discriminator vs generator is and how they train together. If you need a refresher <a href="GanIntroduction.ipynb">read this</a> section of my GAN Introduction blog post</p>
</div>
</div>
<section id="discriminator---key-1" class="level2" data-number="3.1">
<h2 data-number="3.1" class="anchored" data-anchor-id="discriminator---key-1"><span class="header-section-number">3.1</span> Discriminator - Key 1</h2>
<p>The most important thing to understand about any model is what it’s predicting. Let’s take a look at the last thing that is done before it’s output and understand that first.</p>
<ul>
<li><strong>avg_pool2d:</strong> At the end there’s average pooling, which is just calculated averages in different patches of the feature map. So really what we are predicting is not whether the image is real or fake, but splitting the image into lots of pieces and determining if each piece individually is real or fake.</li>
</ul>
<p>This gives the generator much more information to be able to optimize to. Predicting whether an image is real or fake is much easier than generating a whole image - so we want to help the generator as much as possible.</p>
<p>If you think about this intuitively - it makes perfect sense. If you were trying to draw a realistic still life and you showed it to an expert artist for feedback what kind of feedback would you like? Would you like them to tell you it looks real or looks fake and leave it at that? Or would you get more out of them breaking the painting into pieces, telling you what portions are realistic and what portions need more work? Of course, the latter is more helpful so that’s what we predict for the generator.</p>
<p>The rest of the discriminator is nothing special but let’s dive in a bit to prove that. Here’s the components:</p>
<ul>
<li><strong>Conv2d:</strong> When working with images convolutions are very common</li>
<li><strong>LeakyReLU:</strong> While ReLU is more common, Leaky ReLU is used. We don’t want the model to get stuck in a ‘no-training’ zone that exists with ReLU. GANs are harder to train well because of the additional complexity of the adversarial model so LeakyReLU works better on GANs general.</li>
<li><strong>InstanceNorm2d:</strong> <code>BatchNorm</code> is more common, but this is just a small tweak from that. If you think about the different meanings of the word “Instance” vs “Batch” you make be able to guess what the difference is. In short <code>BatchNorm</code> is normalizing across the entire batch (computing 1 mean/std). <code>InstanceNorm</code> is normalizing over the individual image (instance), so you have a mean and std for each image.</li>
</ul>
<div class="callout callout-style-default callout-note callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Note
</div>
</div>
<div class="callout-body-container callout-body">
<p>If you think through the impact of batch vs Instance normalization you may realize that with <code>BatchNorm</code> the training for a particular image is effected by which images happen to be in the same batch. This is because the mean and standard deviation are calculated across the entire batch, rather than for that image alone.</p>
</div>
</div>
<div id="68709b85" class="cell">
<details class="code-fold">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb5-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">class</span> Discriminator(nn.Module):</span>
<span id="cb5-2">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__init__</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, input_nc):</span>
<span id="cb5-3">        <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">super</span>(Discriminator, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>).<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__init__</span>()</span>
<span id="cb5-4"></span>
<span id="cb5-5">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># A bunch of convolutions one after another</span></span>
<span id="cb5-6">        model <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [   nn.Conv2d(input_nc, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">64</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>, stride<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, padding<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>),</span>
<span id="cb5-7">                    nn.LeakyReLU(<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.2</span>, inplace<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>) ]</span>
<span id="cb5-8"></span>
<span id="cb5-9">        model <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+=</span> [  nn.Conv2d(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">64</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">128</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>, stride<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, padding<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>),</span>
<span id="cb5-10">                    nn.InstanceNorm2d(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">128</span>), </span>
<span id="cb5-11">                    nn.LeakyReLU(<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.2</span>, inplace<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>) ]</span>
<span id="cb5-12"></span>
<span id="cb5-13">        model <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+=</span> [  nn.Conv2d(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">128</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">256</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>, stride<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, padding<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>),</span>
<span id="cb5-14">                    nn.InstanceNorm2d(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">256</span>), </span>
<span id="cb5-15">                    nn.LeakyReLU(<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.2</span>, inplace<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>) ]</span>
<span id="cb5-16"></span>
<span id="cb5-17">        model <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+=</span> [  nn.Conv2d(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">256</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">512</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>, padding<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>),</span>
<span id="cb5-18">                    nn.InstanceNorm2d(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">512</span>), </span>
<span id="cb5-19">                    nn.LeakyReLU(<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.2</span>, inplace<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>) ]</span>
<span id="cb5-20"></span>
<span id="cb5-21">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># FCN classification layer</span></span>
<span id="cb5-22">        model <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+=</span> [nn.Conv2d(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">512</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>, padding<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)]</span>
<span id="cb5-23"></span>
<span id="cb5-24">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.model <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> nn.Sequential(<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>model)</span>
<span id="cb5-25"></span>
<span id="cb5-26">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> forward(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, x):</span>
<span id="cb5-27">        x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>  <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.model(x)</span>
<span id="cb5-28">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Average pooling and flatten</span></span>
<span id="cb5-29">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> F.avg_pool2d(x, x.size()[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>:]).view(x.size()[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>], <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span></code></pre></div>
</details>
</div>
</section>
<section id="generator" class="level2" data-number="3.2">
<h2 data-number="3.2" class="anchored" data-anchor-id="generator"><span class="header-section-number">3.2</span> Generator</h2>
<p>The Generator is what generates the image. It’s got a lot of the same components as other Neural Networks. Let’s talk about the components.</p>
<p>Let’s break this apart and talk about each piece briefly.</p>
<section id="initial-layer" class="level3" data-number="3.2.1">
<h3 data-number="3.2.1" class="anchored" data-anchor-id="initial-layer"><span class="header-section-number">3.2.1</span> Initial Layer</h3>
<p>So this is the code from the implementation for the first bit of the generator (I cut off the rest to be shown later). Let’s understand this first.</p>
<p>We see all the same components we say above. <code>Conv2d</code> is doing convolutions (big 7x7 ones), we also have <code>InstanceNorm</code> like we saw in the Discriminator (discussed above), and a common activation function <code>ReLU</code>.</p>
<p>The new thing is this <code>ReflectionPad2d</code>.</p>
<div id="84b62a23" class="cell">
<div class="sourceCode cell-code" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb6-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">class</span> Generator(nn.Module):</span>
<span id="cb6-2">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__init__</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, input_nc, output_nc, n_residual_blocks<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">9</span>):</span>
<span id="cb6-3">        <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">super</span>(Generator, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>).<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__init__</span>()</span>
<span id="cb6-4"></span>
<span id="cb6-5">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Initial convolution block       </span></span>
<span id="cb6-6">        model <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [   nn.ReflectionPad2d(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>),</span>
<span id="cb6-7">                    nn.Conv2d(input_nc, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">64</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">7</span>),</span>
<span id="cb6-8">                    nn.InstanceNorm2d(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">64</span>),</span>
<span id="cb6-9">                    nn.ReLU(inplace<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>) ]</span></code></pre></div>
</div>
<p>So what is <code>ReflectionPad2d</code>? First, let’s look at what a convolution does. The blue in the gif below is the image, the white squares are padding. Normally they’re padded with nothing like in the illustration. What <code>ReflectionPad</code> does is pads that with a reflection of the image instead. In other words, we are using the pixels values of pixels on the edge to pad instead of just a pure white or pure black pixel.</p>
<div class="callout callout-style-default callout-note callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Note
</div>
</div>
<div class="callout-body-container callout-body">
<p>Fore more on convolutions <a href="https://towardsdatascience.com/a-comprehensive-guide-to-convolutional-neural-networks-the-eli5-way-3bd2b1164a53">go here</a>. The gif below comes from that guide by <a href="https://medium.com/@_sumitsaha_">Sumit Saha</a> and the guide contains a lot of other create information.</p>
</div>
</div>
<p><img src="https://miro.medium.com/max/395/1*1VJDP6qDY9-ExTuQVEOlVg.gif" class="img-fluid"></p>
<div class="callout callout-style-default callout-note callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Note
</div>
</div>
<div class="callout-body-container callout-body">
<p>Credit for Visualization: Vincent Dumoulin, Francesco Visin - <a href="https://arxiv.org/abs/1603.07285">A guide to convolution arithmetic for deep learning</a></p>
</div>
</div>
</section>
<section id="downsampling" class="level3" data-number="3.2.2">
<h3 data-number="3.2.2" class="anchored" data-anchor-id="downsampling"><span class="header-section-number">3.2.2</span> Downsampling</h3>
<p>We then go through several downsampling layers. A 3x3 convolution with stride 2 will result in a smaller feature map, which is exactly what we are doing to cause the downsampling. It’s all the usual suspects through: <code>convolutions</code>, <code>InstanceNorms</code>, and <code>ReLUs</code>.</p>
<div id="75bd66a6" class="cell">
<div class="sourceCode cell-code" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb7-1">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Downsampling</span></span>
<span id="cb7-2">        in_features <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">64</span></span>
<span id="cb7-3">        out_features <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> in_features<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span></span>
<span id="cb7-4">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> _ <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>):</span>
<span id="cb7-5">            model <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+=</span> [  nn.Conv2d(in_features, out_features, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>, stride<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, padding<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>),</span>
<span id="cb7-6">                        nn.InstanceNorm2d(out_features),</span>
<span id="cb7-7">                        nn.ReLU(inplace<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>) ]</span>
<span id="cb7-8">            in_features <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> out_features</span>
<span id="cb7-9">            out_features <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> in_features<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span></span></code></pre></div>
</div>
</section>
<section id="residual-blocks" class="level3" data-number="3.2.3">
<h3 data-number="3.2.3" class="anchored" data-anchor-id="residual-blocks"><span class="header-section-number">3.2.3</span> Residual Blocks</h3>
<p>Next we go through some residual blocks.</p>
<div id="47345aa2" class="cell">
<div class="sourceCode cell-code" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb8-1">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Residual blocks</span></span>
<span id="cb8-2">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> _ <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(n_residual_blocks):</span>
<span id="cb8-3">            model <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+=</span> [ResidualBlock(in_features)]</span></code></pre></div>
</div>
<p>When we look at residual blocks again, it’s all the same components in slightly different configurations as above. We have <code>ReflectionPad</code>, <code>Convolutions</code>, <code>InstanceNorm</code>, and <code>ReLUs</code>.</p>
<div id="0d4ca579" class="cell">
<div class="sourceCode cell-code" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb9-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">class</span> ResidualBlock(nn.Module):</span>
<span id="cb9-2">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__init__</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, in_features):</span>
<span id="cb9-3">        <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">super</span>(ResidualBlock, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>).<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__init__</span>()</span>
<span id="cb9-4"></span>
<span id="cb9-5">        conv_block <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [  nn.ReflectionPad2d(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>),</span>
<span id="cb9-6">                        nn.Conv2d(in_features, in_features, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>),</span>
<span id="cb9-7">                        nn.InstanceNorm2d(in_features),</span>
<span id="cb9-8">                        nn.ReLU(inplace<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>),</span>
<span id="cb9-9">                        nn.ReflectionPad2d(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>),</span>
<span id="cb9-10">                        nn.Conv2d(in_features, in_features, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>),</span>
<span id="cb9-11">                        nn.InstanceNorm2d(in_features)  ]</span>
<span id="cb9-12"></span>
<span id="cb9-13">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.conv_block <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> nn.Sequential(<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>conv_block)</span>
<span id="cb9-14"></span>
<span id="cb9-15">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> forward(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, x):</span>
<span id="cb9-16">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.conv_block(x)</span></code></pre></div>
</div>
</section>
<section id="upsampling" class="level3" data-number="3.2.4">
<h3 data-number="3.2.4" class="anchored" data-anchor-id="upsampling"><span class="header-section-number">3.2.4</span> Upsampling</h3>
<p>Next is upsampling. There is a new component here which <code>ConvTranspose</code>. Let’s take a look at what that is exactly.</p>
<div id="d451b3d4" class="cell">
<div class="sourceCode cell-code" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb10-1">        out_features <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> in_features<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">//</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span></span>
<span id="cb10-2">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> _ <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>):</span>
<span id="cb10-3">            model <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+=</span> [  nn.ConvTranspose2d(in_features, out_features, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>, stride<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, padding<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, output_padding<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>),</span>
<span id="cb10-4">                        nn.InstanceNorm2d(out_features),</span>
<span id="cb10-5">                        nn.ReLU(inplace<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>) ]</span>
<span id="cb10-6">            in_features <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> out_features</span>
<span id="cb10-7">            out_features <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> in_features<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">//</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span></span></code></pre></div>
</div>
<p>So what is this? Well essentially it’s a normal convolution that upsamples by creating padding between cells. Here’s a visual that shows what that looks like.</p>
<p><img src="https://i.stack.imgur.com/f2RiP.gif" class="img-fluid"></p>
<div class="callout callout-style-default callout-note callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Note
</div>
</div>
<div class="callout-body-container callout-body">
<p>Credit for Visualization: Vincent Dumoulin, Francesco Visin - <a href="https://arxiv.org/abs/1603.07285">A guide to convolution arithmetic for deep learning</a></p>
</div>
</div>
</section>
<section id="output-layer" class="level3" data-number="3.2.5">
<h3 data-number="3.2.5" class="anchored" data-anchor-id="output-layer"><span class="header-section-number">3.2.5</span> Output Layer</h3>
<p>Finally we have out output layer with a <code>Tanh</code> activation function.</p>
<div id="68e96043" class="cell">
<div class="sourceCode cell-code" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb11-1">        model <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+=</span> [  nn.ReflectionPad2d(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>),</span>
<span id="cb11-2">                    nn.Conv2d(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">64</span>, output_nc, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">7</span>),</span>
<span id="cb11-3">                    nn.Tanh() ]</span>
<span id="cb11-4"></span>
<span id="cb11-5">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.model <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> nn.Sequential(<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>model)</span></code></pre></div>
</div>
</section>
</section>
</section>
<section id="loss-functions" class="level1" data-number="4">
<h1 data-number="4"><span class="header-section-number">4</span> Loss Functions</h1>
<p>The model using the Adam Optimizer with a scheduler. I am going to skip over that and look at the most interesting and important part of CycleGAN. The loss functions!</p>
<p>If you recall, we have both generators and Discriminators. So we need a loss function for each. Let’s look at each.</p>
<section id="discriminator-loss" class="level2" data-number="4.1">
<h2 data-number="4.1" class="anchored" data-anchor-id="discriminator-loss"><span class="header-section-number">4.1</span> Discriminator Loss</h2>
<p>The discriminator loss is a standard adversarial loss. Let’s think through what we would need:</p>
<ul>
<li>Real images of a class (ie Summer Yosimite pictures)</li>
<li>Fake images of a class (ie generated Summer Yosimite pictures)</li>
<li>Discriminator predictions for whether each section of the image is real or fake</li>
</ul>
<p>So let’s say we generated the images with our generator and then we took the real images from our batch, the fake generated images, and ran that through our discriminator. Once we have that we use Mean Squared Error as the loss function.</p>
<p>Let’s see how this works. Everything is duplicated because we have 2 discriminators.</p>
<p><strong>Discriminator 1:</strong> Is each section of this Class A image real or fake?</p>
<div id="7c0a8567" class="cell">
<div class="sourceCode cell-code" id="cb12" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb12-1">        pred_real <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> netD_A(real_A) <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Predict whether real image is real or fake</span></span>
<span id="cb12-2">        loss_D_real <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> criterion_GAN(pred_real, target_real) </span>
<span id="cb12-3"></span>
<span id="cb12-4">        pred_fake <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> netD_A(fake_A.detach()) <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Predict whether fake image is real or fake</span></span>
<span id="cb12-5">        loss_D_fake <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> criterion_GAN(pred_fake, target_fake)</span>
<span id="cb12-6"></span>
<span id="cb12-7">        loss_D_A <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> (loss_D_real <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> loss_D_fake)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.5</span> <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Total loss</span></span>
<span id="cb12-8">        loss_D_A.backward() <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># backward pass</span></span></code></pre></div>
</div>
<p><strong>Discriminator 2:</strong> Is each section of this Class B image real or fake?</p>
<div id="445a0e11" class="cell">
<div class="sourceCode cell-code" id="cb13" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb13-1">        pred_real <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> netD_B(real_B) <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Predict whether real image is real or fake</span></span>
<span id="cb13-2">        loss_D_real <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> criterion_GAN(pred_real, target_real) </span>
<span id="cb13-3"></span>
<span id="cb13-4">        pred_fake <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> netD_B(fake_B.detach()) <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Predict whether fake image is real or fake</span></span>
<span id="cb13-5">        loss_D_fake <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> criterion_GAN(pred_fake, target_fake) </span>
<span id="cb13-6"></span>
<span id="cb13-7">        loss_D_B <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> (loss_D_real <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> loss_D_fake)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.5</span> <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Total loss</span></span>
<span id="cb13-8">        loss_D_B.backward() <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># backward pass</span></span></code></pre></div>
</div>
</section>
<section id="generator-loss---key-2" class="level2" data-number="4.2">
<h2 data-number="4.2" class="anchored" data-anchor-id="generator-loss---key-2"><span class="header-section-number">4.2</span> Generator Loss - Key 2</h2>
<p>The generator loss is the key to CycleGAN and it has three main parts to it.</p>
<ol type="1">
<li><p>Adversarial Loss: This is standard MSE Loss. This is the most straightforward loss.<br>
</p></li>
<li><p>Identity Loss: This is L1 Loss (pixel by pixel comparison to minimize the difference in pixel values). If my generator is trained to take a Summer picture and turn it into a Winter picture and I give it winter picture is should do nothing (identity function). The generator should look at the Winter Picture and determine that nothing needs to be done to make it a Winter picture as that’s what it already is. Identity loss is just trying this out and then comparing the input image with the output image.</p></li>
<li><p>Cycle Loss: This is where CycleGAN gets it’s name. L1 loss is just trying to minimize the difference in pixel values. But how does it have images to compare when it’s an unpaired dataset?</p>
<ul>
<li>Start with class A and run your Generator to create class B out of the Class A image</li>
<li>Take that class B image that was just generated, and run it through the other generator to create a class A image</li>
<li>If all you are doing is transferring styles you should get the exact same image back after the full cycle. Those are the 2 images being compared.</li>
</ul></li>
</ol>
<p>These three components get added up for the loss function. You can add weights to different portions to prioritize different aspects of the loss function.</p>
<p>So how does this look all together? You may notice everything is duplicated in the code. That’s because We have 2 generators:</p>
<ul>
<li>Class A -&gt; Class B or Summer -&gt; Winter</li>
<li>Class B -&gt; Class A or Winter -&gt; Summer</li>
</ul>
<p><strong>Adverserial Loss:</strong> Is it good enough to fool the discriminator?</p>
<p>This is the most straightforward and is standard MSE loss. The generator is optimizing to fool the Discriminator. Specifically the loss is being calculated on the discriminators prediction on fake images and a ‘truth label’ saying it is a real image. We know it’s not actually a real image, but the discriminator wants us to think so.</p>
<div id="ab381425" class="cell">
<div class="sourceCode cell-code" id="cb14" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb14-1">        fake_B <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> netG_A2B(real_A) <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Generate class B from class A</span></span>
<span id="cb14-2">        pred_fake <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> netD_B(fake_B) <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Discriminator predict is is real or fake</span></span>
<span id="cb14-3">        loss_GAN_A2B <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> criterion_GAN(pred_fake, target_real) <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Is discriminator fooled?</span></span>
<span id="cb14-4"></span>
<span id="cb14-5">        fake_A <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> netG_B2A(real_B) <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Generate class A from class B</span></span>
<span id="cb14-6">        pred_fake <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> netD_A(fake_A) <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Discriminator predict is is real or fake</span></span>
<span id="cb14-7">        loss_GAN_B2A <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> criterion_GAN(pred_fake, target_real) <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Is discriminator fooled?</span></span></code></pre></div>
</div>
<p><strong>Identity Loss:</strong> Is it making the minimum changes needed?</p>
<p>Identity loss is L1 loss (pixel by pixel comparison to minimize the difference in pixel values). If my generator is trained to take a Summer picture and turn it into a Winter picture and I give it winter picture, it should do nothing (identity function). The generator should look at the Winter Picture and determine that nothing needs to be done to make it a Winter picture as that’s what it already is. Identity loss is doing this exactly and comparing the input image with the output image. Since it should change nothing we can calculate the loss as the difference between the pixels.</p>
<div id="f0f2176a" class="cell">
<div class="sourceCode cell-code" id="cb15" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb15-1">        same_B <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> netG_A2B(real_B) <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Generate class B from class B</span></span>
<span id="cb15-2">        loss_identity_B <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> criterion_identity(same_B, real_B)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">5.0</span> <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Pixel Diff</span></span>
<span id="cb15-3"></span>
<span id="cb15-4">        same_A <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> netG_B2A(real_A) <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Generate class A from class A</span></span>
<span id="cb15-5">        loss_identity_A <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> criterion_identity(same_A, real_A)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">5.0</span> <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Pixel Diff</span></span></code></pre></div>
</div>
<p><strong>Cycle loss:</strong> Is it only changing style?</p>
<p>This is where CycleGAN gets it’s name. Cycle Loss is also an L1 Loss function - let’s take a look at what images it’s comparing. Here’s the process:</p>
<pre><code>+ Start with a class A image and run your Generator to generate a class B image
+ Take that generated class B image and run it through the other generator to create a class A image (full cycle)
+ Compare pixels between that generated Class A image should be identical to the original Class A input image
+ Repeat in the other direction</code></pre>
<p>If the only thing being changed is style then the generated Class A image that went through the full cycle should be identical to the original input Class A image. If however other things are getting changed, then you will have information loss and you the images will be different. By minimizing this pixel difference you are telling the model not to change the general content of the image, it can only change stylistic things.</p>
<div id="582a0c2a" class="cell">
<div class="sourceCode cell-code" id="cb17" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb17-1">        recovered_A <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> netG_B2A(fake_B) <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Generate Class A from fake Class B</span></span>
<span id="cb17-2">        loss_cycle_ABA <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> criterion_cycle(recovered_A, real_A)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">10.0</span> <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Pixel Diff</span></span>
<span id="cb17-3"></span>
<span id="cb17-4">        recovered_B <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> netG_A2B(fake_A) <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Generate Class B from fake Class A</span></span>
<span id="cb17-5">        loss_cycle_BAB <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> criterion_cycle(recovered_B, real_B)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">10.0</span> <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Pixel Diff</span></span></code></pre></div>
</div>
<p><strong>Total Generator Loss:</strong> Sum them all up into 1 loss function</p>
<div id="3f1905ab" class="cell">
<div class="sourceCode cell-code" id="cb18" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb18-1">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Total loss</span></span>
<span id="cb18-2">        loss_G <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> loss_identity_A <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> loss_identity_B <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> loss_GAN_A2B <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> loss_GAN_B2A <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> loss_cycle_ABA <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> loss_cycle_BAB <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Add all these losses up</span></span>
<span id="cb18-3">        loss_G.backward() <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># backward pass</span></span></code></pre></div>
</div>
</section>
</section>
<section id="conclusion" class="level1" data-number="5">
<h1 data-number="5"><span class="header-section-number">5</span> Conclusion</h1>
<p>That’s really the guts of it. You throw that with an optimizer and scheduler in a training loop and you are pretty close to done! Check out the repository linked at the start of the repository for the full implementation with all the details.</p>


</section>

 ]]></description>
  <category>Neural Networks</category>
  <category>Image Generation</category>
  <guid>https://isaac-flath.tech/posts/GenerativeModels/CycleGanWalkThrough.html</guid>
  <pubDate>Sat, 20 Mar 2021 04:00:00 GMT</pubDate>
  <media:content url="https://isaac-flath.tech/posts/_TopicImages/NeuralNetwork.jpg" medium="image" type="image/jpeg"/>
</item>
<item>
  <title>StyleGAN Components</title>
  <dc:creator>Isaac Flath</dc:creator>
  <link>https://isaac-flath.tech/posts/GenerativeModels/StyleGanComponents.html</link>
  <description><![CDATA[ 





<section id="intro" class="level1" data-number="1">
<h1 data-number="1"><span class="header-section-number">1</span> Intro</h1>
<p>In this post I will cover several components needed for style GAN and build a basic one using those blocks. I am not going to train it, or try to make a state of the art one. Things will be simplified to the simplest form possible to understand the concept. If you want to understand some of the key techniques used in modern SoTA GANs, this is the post for you!</p>
<p>A future post will be actually building a real StyleGAN model to produce high def images to show practical GANs in full size networks to create actual images. Reading this post first is highly recommended!</p>
<p>Inspiration for this post came from the <a href="deeplearning.ai">deeplearning.ai</a> GAN specialization. For more complete information on GANs in a structured course, check that course out!</p>
</section>
<section id="truncated-noise" class="level1" data-number="2">
<h1 data-number="2"><span class="header-section-number">2</span> Truncated Noise</h1>
<p>The first is an easy one to get us warmed up. This is not something used during training, but rather a technique you can use after training to control the diversity-quality trade-off when you generate images.</p>
<p>Generators work by taking in random noise. The random noise can be thought of a a random seed that the generators create images from. Normally we sample from the normal distribution. If you look at the normal distribution graph below you will realize that some values will be selected a lot, while others will be selected pretty rarely. If a value is in the tail, it will be selected much less frequently than a value close to the mean. So what does that mean? It means that for those particular values there will have been fewer examples to train with and will thus probably will result in lower quality images.</p>
<p>In order to deal with this issue we can truncate the normal distribution to sample from only the higher frequency areas. The reason this is a trade-off is because if we have fewer possible values (starting points), that mean means fewer possible images can be generated. In other words we will have less diverse outputs.</p>
<p><strong>So the key things to know are</strong>:</p>
<ul>
<li>Truncated Normal Distribution just cuts off values on each each based on some set parameter</li>
<li>Left graph shows normal distribution - right graphs show different levels of truncation</li>
<li>There is a diversity/quality trade-off that this technique allows you to make</li>
<li>Graphs are most diversity in output images to least diversity from left to right</li>
<li>Graphs are lowest quality images to highest quality images from left to right</li>
</ul>
<div id="cell-4" class="cell" data-execution_count="2">
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://isaac-flath.tech/posts/GenerativeModels/StyleGanComponents_files/figure-html/cell-2-output-1.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
</div>
</section>
<section id="noise-to-weight-mapping" class="level1" data-number="3">
<h1 data-number="3"><span class="header-section-number">3</span> Noise to Weight Mapping</h1>
<p>The next component is a noise to weight mapping. A generator gets a noise vector of random values from the normal distribution. This may be problematic. Not all of our features will follow the normal distribution - so trying to map normal distribution values to various features that follow other distributions gets messy.</p>
<p>This is especially problematic because we want to be able to independently control features in the output image. I don’t want to modify the direction the eyes are looking and have that also change facial features. I want to be able to tweak components without having a tangled mess of mappings.</p>
<p>To fix this we learn the distributions that are ideal for the noise vector. So random noise comes in, it gets passed through a Mapping Network and we end with a weight matrix <code>w</code>. Since a neural network can approximate any function, that means it can approximate any distribution so this should work. This lets your model learn represent things in a cleaner way and makes your mapping much less tangled so you can control features much easier.</p>
<p>The mapping network in StyleGAN is composed of 8 layers - but here’s a simplified version just to get the idea that it’s just a normal neural network that is mapping the noise vector (z) to the weights vector (w).</p>
<div id="cell-7" class="cell" data-execution_count="4">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb1-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">class</span> MappingNetwork(nn.Module):</span>
<span id="cb1-2">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__init__</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, z_dim, hidden_dim, w_dim):</span>
<span id="cb1-3">        <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">super</span>().<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__init__</span>()</span>
<span id="cb1-4"></span>
<span id="cb1-5">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.mapping <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> nn.Sequential(</span>
<span id="cb1-6">            nn.Linear(z_dim,      hidden_dim),  nn.ReLU(),</span>
<span id="cb1-7">            nn.Linear(hidden_dim, hidden_dim),  nn.ReLU(),</span>
<span id="cb1-8">            nn.Linear(hidden_dim, w_dim))</span>
<span id="cb1-9"></span>
<span id="cb1-10">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> forward(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, noise): <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.mapping(noise)</span>
<span id="cb1-11">    </span>
<span id="cb1-12">MappingNetwork(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">200</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">75</span>)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="4">
<pre><code>MappingNetwork(
  (mapping): Sequential(
    (0): Linear(in_features=100, out_features=200, bias=True)
    (1): ReLU()
    (2): Linear(in_features=200, out_features=200, bias=True)
    (3): ReLU()
    (4): Linear(in_features=200, out_features=75, bias=True)
  )
)</code></pre>
</div>
</div>
</section>
<section id="noise-injection" class="level1" data-number="4">
<h1 data-number="4"><span class="header-section-number">4</span> Noise Injection</h1>
<p>Next, we need a process for injecting random noise in various parts of the network. This is different than the weight vector we created above. We inject this additional noise to increase diversity. The way this works:</p>
<ol type="1">
<li>Create 1 weight for each channel (learned)</li>
<li>Create a noise tensor of random numbers the same size as your image, but with only 1 channel (random)</li>
<li>Multiply noise tensor by each of those values so you end with something same dimension as image and add this to the image</li>
</ol>
<p>That outputs the new image that includes the noise can continue down the network. Nothing special needs to happen other than this because we didn’t change any dimensions. Really it’s just a linear layer with random noise in it. You can see below that then image shape and the final shape are identical.</p>
<p>This happens in many places in the network before every AdaIN layer. So let’s see what the AdaIN layer is.</p>
<div id="cell-10" class="cell" data-execution_count="5">
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb3-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">class</span> InjectNoise(nn.Module):</span>
<span id="cb3-2">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__init__</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, channels):</span>
<span id="cb3-3">        <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">super</span>().<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__init__</span>()</span>
<span id="cb3-4">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.weight <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> nn.Parameter(torch.randn(channels)[<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>, :, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>])</span>
<span id="cb3-5"></span>
<span id="cb3-6">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> forward(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, image):</span>
<span id="cb3-7">        noise_shape <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> (image.shape[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>],<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>,image.shape[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>],image.shape[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>]) </span>
<span id="cb3-8">        noise <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.randn(noise_shape, device<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>image.device)</span>
<span id="cb3-9">        out <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> image <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.weight <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> noise</span>
<span id="cb3-10">        <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f'Image (input)                     </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>image<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>shape<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span>)        </span>
<span id="cb3-11">        <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f'Weight (step 1):                  </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>weight<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>shape<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span>)</span>
<span id="cb3-12">        <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f'Noise (step 2):                   </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>noise<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>shape<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span>)</span>
<span id="cb3-13">        <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f'weight * noise + image (ouput):   </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>out<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>shape<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span>)</span>
<span id="cb3-14">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> out</span>
<span id="cb3-15">tmp <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> InjectNoise(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">512</span>)(torch.randn(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">32</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">512</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>))</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Image (input)                     torch.Size([32, 512, 4, 4])
Weight (step 1):                  torch.Size([1, 512, 1, 1])
Noise (step 2):                   torch.Size([32, 1, 4, 4])
weight * noise + image (ouput):   torch.Size([32, 512, 4, 4])</code></pre>
</div>
</div>
</section>
<section id="adaptive-instance-normalization-adain" class="level1" data-number="5">
<h1 data-number="5"><span class="header-section-number">5</span> Adaptive Instance Normalization (AdaIN)</h1>
<p>To recap what we have so far:</p>
<ul>
<li>An image that has random noise injected into it from the Noise Injection Step</li>
<li>A transformed noise matrix from our mapping network <code>w</code></li>
</ul>
<p>We need to combine these and we need some sort of normalization. That is what this Adaptive Instance normalization is going to do. Just like the noise injection happens in many places in the network.</p>
<p>As previously mentioned, injecting <code>w</code> rather than just normally distributed noise gives us more control over the images generated. We are going to take our image after normalization, multiply it by a <code>scale</code> from the weight matrix and add a <code>shift</code> also from the weight matrix. Put another way, another linear layer. So in summary what we need to do is:</p>
<ol type="1">
<li>Normalize the image</li>
<li>Use a linear layer to map <code>w</code> to 1 value per channel to give us a <code>scale</code> tensor</li>
<li>Use a linear layer to map <code>w</code> to 1 value per channel to give us a <code>shift</code> tensor</li>
<li>output <code>style_tensor * normalized_image  + shift_tensor</code></li>
</ol>
<p>Take a look below at some the code for what it does and the shapes to understand the inputs and outputs. Input and output size is the same, but with normalization and injected weight tensor!</p>
<div id="cell-12" class="cell" data-execution_count="6">
<div class="sourceCode cell-code" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb5-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">class</span> AdaIN(nn.Module):</span>
<span id="cb5-2"></span>
<span id="cb5-3">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__init__</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, channels, w_dim):</span>
<span id="cb5-4">        <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">super</span>().<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__init__</span>()</span>
<span id="cb5-5">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.instance_norm <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> nn.InstanceNorm2d(channels)</span>
<span id="cb5-6">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.scale_transform <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> nn.Linear(w_dim, channels)</span>
<span id="cb5-7">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.shift_transform <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> nn.Linear(w_dim, channels)</span>
<span id="cb5-8"></span>
<span id="cb5-9">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> forward(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, image, w):</span>
<span id="cb5-10">        normalized_image <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.instance_norm(image)</span>
<span id="cb5-11">        scale_tensor <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.scale_transform(w)[:, :, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>]</span>
<span id="cb5-12">        shift_tensor <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.shift_transform(w)[:, :, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>]</span>
<span id="cb5-13">        transformed_image <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> scale_tensor <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> normalized_image <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> shift_tensor</span>
<span id="cb5-14">        </span>
<span id="cb5-15">        <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f'Image (input)                       </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>image<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>shape<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span>)        </span>
<span id="cb5-16">        <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f'normalized_image (step 1)           </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>normalized_image<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>shape<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span>)        </span>
<span id="cb5-17">        <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f'w (input)                           </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>w<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>shape<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span>)        </span>
<span id="cb5-18">        <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f'scale (step 2):                     </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>scale_tensor<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>shape<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span>)</span>
<span id="cb5-19">        <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f'shift (step 3):                     </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>shift_tensor<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>shape<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span>)</span>
<span id="cb5-20">        <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f'scale * norm_image + shift (ouput): </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>transformed_image<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>shape<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span>)</span>
<span id="cb5-21">        </span>
<span id="cb5-22">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> transformed_image</span>
<span id="cb5-23">tmp <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> AdaIN(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">512</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">256</span>)(torch.randn(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">32</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">512</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>),torch.randn(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">32</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">256</span>))</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Image (input)                       torch.Size([32, 512, 4, 4])
normalized_image (step 1)           torch.Size([32, 512, 4, 4])
w (input)                           torch.Size([32, 256])
scale (step 2):                     torch.Size([32, 512, 1, 1])
shift (step 3):                     torch.Size([32, 512, 1, 1])
scale * norm_image + shift (ouput): torch.Size([32, 512, 4, 4])</code></pre>
</div>
</div>
</section>
<section id="progressive-growing" class="level1" data-number="6">
<h1 data-number="6"><span class="header-section-number">6</span> Progressive Growing</h1>
<p>Now there’s one last piece we need to understand the main components of styleGAN. Progressive growing is just what it sounds like. The generator will create a small image and progressively grow the size. It doubles the image in size until getting the image to the required size. This allows for higher quality and resolution photos.</p>
<p>Intuitively this makes sense. It’d be much harder to generate an entire picture all at once that all meshes well together. Instead we put basic structures and build on it slowly by filling in more and more fine details over time as the image you are generating increases in size.</p>
<p>So let’s jump into it. Let’s create a re-usable block to implement this using the other components as well. Here’s what we need:</p>
<ol type="1">
<li>An upsampling layer (for progressive growing)</li>
<li>A convolutional layer (standard for image problems)</li>
<li>Random noise injection (we created that above)</li>
<li>An AdaIN layer (we created that above)</li>
<li>An activation (just like all neural networks need)</li>
</ol>
<div id="cell-15" class="cell" data-execution_count="7">
<div class="sourceCode cell-code" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb7-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">class</span> MinifiedStyleGANGeneratorBlock(nn.Module):</span>
<span id="cb7-2"></span>
<span id="cb7-3">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__init__</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, in_chan, out_chan, w_dim, kernel_size, starting_size, use_upsample<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>):</span>
<span id="cb7-4">        <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">super</span>().<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__init__</span>()</span>
<span id="cb7-5">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.use_upsample <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> use_upsample</span>
<span id="cb7-6">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.use_upsample: <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.upsample <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> nn.Upsample((starting_size), mode<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'bilinear'</span>)</span>
<span id="cb7-7">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.conv <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> nn.Conv2d(in_chan, out_chan, kernel_size, padding<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>) </span>
<span id="cb7-8">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.inject_noise <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> InjectNoise(out_chan)</span>
<span id="cb7-9">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.adain <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> AdaIN(out_chan, w_dim)</span>
<span id="cb7-10">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.activation <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> nn.LeakyReLU(<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.2</span>)</span>
<span id="cb7-11"></span>
<span id="cb7-12">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> forward(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, x, w):</span>
<span id="cb7-13">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.use_upsample: x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.upsample(x) <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># upsample        (step 1)</span></span>
<span id="cb7-14">        x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.conv(x)                           <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># conv layer      (step 2)</span></span>
<span id="cb7-15">        x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.inject_noise(x)                   <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># noise injection (step 3)        </span></span>
<span id="cb7-16">        x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.activation(x)                     <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># activation      (step 4)     </span></span>
<span id="cb7-17">        x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.adain(x, w)                       <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># AdaIN           (step 5)</span></span>
<span id="cb7-18">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> x</span></code></pre></div>
</div>
<p>Now, you can implement progressive growing and put it all together. Let’s see how that works in StyleGAN. As you can see we move from an 8x8 image to a 16x16 image. StyleGAn will do this many times.</p>
<p>Keep in mind all of this is simplified and scaled down from what is in StyleGAN. The purpose of this blog was to communicate the core concepts and techniques used in StyleGAN, not necessarily show the practical applications. Stay tuned for a blog that shows practical application of these concepts!</p>
<div id="cell-17" class="cell" data-execution_count="8">
<details class="code-fold">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb8-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">class</span> AdaIN(nn.Module):</span>
<span id="cb8-2">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__init__</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, channels, w_dim):</span>
<span id="cb8-3">        <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">super</span>().<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__init__</span>()</span>
<span id="cb8-4">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.instance_norm <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> nn.InstanceNorm2d(channels)</span>
<span id="cb8-5">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.scale_transform <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> nn.Linear(w_dim, channels)</span>
<span id="cb8-6">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.shift_transform <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> nn.Linear(w_dim, channels)</span>
<span id="cb8-7"></span>
<span id="cb8-8">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> forward(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, image, w):</span>
<span id="cb8-9">        normalized_image <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.instance_norm(image)</span>
<span id="cb8-10">        scale_tensor <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.scale_transform(w)[:, :, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>]</span>
<span id="cb8-11">        shift_tensor <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.shift_transform(w)[:, :, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>]</span>
<span id="cb8-12">        transformed_image <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> scale_tensor <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> normalized_image <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> shift_tensor</span>
<span id="cb8-13">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> transformed_image</span>
<span id="cb8-14">      </span>
<span id="cb8-15"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">class</span> InjectNoise(nn.Module):</span>
<span id="cb8-16">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__init__</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, channels):</span>
<span id="cb8-17">        <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">super</span>().<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__init__</span>()</span>
<span id="cb8-18">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.weight <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> nn.Parameter(torch.randn(channels)[<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>, :, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>])</span>
<span id="cb8-19"></span>
<span id="cb8-20">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> forward(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, image):</span>
<span id="cb8-21">        noise_shape <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> (image.shape[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>],<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>,image.shape[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>],image.shape[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>]) </span>
<span id="cb8-22">        noise <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.randn(noise_shape, device<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>image.device)</span>
<span id="cb8-23">        out <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> image <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.weight <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> noise</span>
<span id="cb8-24">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> out</span></code></pre></div>
</details>
</div>
<div id="cell-18" class="cell" data-execution_count="9">
<div class="sourceCode cell-code" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb9-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">class</span> MinifiedStyleGANGenerator(nn.Module):</span>
<span id="cb9-2"></span>
<span id="cb9-3">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__init__</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, z_dim, map_hidden_dim, w_dim, in_chan, out_chan, kernel_size, hidden_chan):</span>
<span id="cb9-4">        <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">super</span>().<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__init__</span>()</span>
<span id="cb9-5">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">map</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> MappingNetwork(z_dim, map_hidden_dim, w_dim)</span>
<span id="cb9-6">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.sc <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> nn.Parameter(torch.randn(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, in_chan, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>))</span>
<span id="cb9-7">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.block0 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> MinifiedStyleGANGeneratorBlock(in_chan, hidden_chan, w_dim, kernel_size, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>)</span>
<span id="cb9-8">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.block1 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> MinifiedStyleGANGeneratorBlock(hidden_chan, hidden_chan, w_dim, kernel_size, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">8</span>)</span>
<span id="cb9-9">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.block2 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> MinifiedStyleGANGeneratorBlock(hidden_chan, hidden_chan, w_dim, kernel_size, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">16</span>)</span>
<span id="cb9-10">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.block1_to_image <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> nn.Conv2d(hidden_chan, out_chan, kernel_size<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb9-11">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.block2_to_image <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> nn.Conv2d(hidden_chan, out_chan, kernel_size<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb9-12"></span>
<span id="cb9-13">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> upsample_to_match_size(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, smaller_image, bigger_image):</span>
<span id="cb9-14">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> F.interpolate(smaller_image, size<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>bigger_image.shape[<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>:], mode<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'bilinear'</span>)</span>
<span id="cb9-15"></span>
<span id="cb9-16">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> forward(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, noise, return_intermediate<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span>):</span>
<span id="cb9-17">        w <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">map</span>(noise) <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># This is our mapping network going from noise -&gt; w</span></span>
<span id="cb9-18">        x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.block0(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.sc, w) <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># w from mapping network is input here</span></span>
<span id="cb9-19">        </span>
<span id="cb9-20">        x1 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.block1(x, w) <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># w noise from mapping network is input here also</span></span>
<span id="cb9-21">        image1 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.block1_to_image(x1)</span>
<span id="cb9-22">        <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f'ImageSize1      </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>image1<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>shape<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span>)</span>
<span id="cb9-23">        </span>
<span id="cb9-24">        x2 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.block2(x1, w) <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># w noise from mapping network is input here also</span></span>
<span id="cb9-25">        image2 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.block2_to_image(x2)</span>
<span id="cb9-26">        <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f'ImageSize2      </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>image2<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>shape<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span>)</span>
<span id="cb9-27">        </span>
<span id="cb9-28">        x1_upsample <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.upsample_to_match_size(image1, image2)</span>
<span id="cb9-29">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.2</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> (image2) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.8</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> (x1_upsample)  </span>
<span id="cb9-30">      </span>
<span id="cb9-31">tmp <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> MinifiedStyleGANGenerator(z_dim<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">128</span>, map_hidden_dim<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1024</span>,w_dim<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">496</span>,in_chan<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">512</span>,out_chan<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>, kernel_size<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>, hidden_chan<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">256</span>)(get_truncated_noise(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">128</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.7</span>))</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>ImageSize1      torch.Size([10, 3, 8, 8])
ImageSize2      torch.Size([10, 3, 16, 16])</code></pre>
</div>
</div>


</section>

 ]]></description>
  <category>Neural Networks</category>
  <category>Image Generation</category>
  <guid>https://isaac-flath.tech/posts/GenerativeModels/StyleGanComponents.html</guid>
  <pubDate>Mon, 01 Mar 2021 05:00:00 GMT</pubDate>
  <media:content url="https://isaac-flath.tech/posts/_TopicImages/NeuralNetwork.jpg" medium="image" type="image/jpeg"/>
</item>
<item>
  <title>GAN Introduction</title>
  <dc:creator>Isaac Flath</dc:creator>
  <link>https://isaac-flath.tech/posts/GenerativeModels/GANIntroduction.html</link>
  <description><![CDATA[ 





<section id="purpose" class="level1" data-number="1">
<h1 data-number="1"><span class="header-section-number">1</span> Purpose</h1>
<p>This blog is targeted to people wanting a general intuition about GANs. We will talk about the most basic high level concepts to understand, not going to cover how to code one or build one</p>
<p>You do not need to understand GANs prior to reading this post. I do assume that you generally are familiar with modeling.</p>
</section>
<section id="what-is-a-gan-and-what-can-it-do" class="level1" data-number="2">
<h1 data-number="2"><span class="header-section-number">2</span> What is a GAN and what can it do?</h1>
<p>A GAN is a Generative Adversarial Network. They excel in creating data. Let’s take a look at a few examples:</p>
<section id="a-gan-can-enhance-images" class="level2" data-number="2.1">
<h2 data-number="2.1" class="anchored" data-anchor-id="a-gan-can-enhance-images"><span class="header-section-number">2.1</span> A GAN can enhance images</h2>
<p>Google Brain did research to show how GANs can be used to enhance images. The left super blurry unrecognizable pictures were given to a GAN. The Middle column is what the GAN made when enhancing the image. The right column is what the image should look like if the GAN was perfect.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://isaac-flath.tech/posts/_my_icons/SuperEnhancement.jpg" class="img-fluid figure-img"></p>
<figcaption>Image Enhancement</figcaption>
</figure>
</div>
</section>
<section id="a-gan-can-change-image-style" class="level2" data-number="2.2">
<h2 data-number="2.2" class="anchored" data-anchor-id="a-gan-can-change-image-style"><span class="header-section-number">2.2</span> A GAN can change image style</h2>
<p>We can also transfer images from one style to another. Whether that’s changing video of a horse to a zerbra or combining photos with art, <a href="https://medium.com/@purnasaigudikandula/artistic-neural-style-transfer-with-pytorch-1543e08cc38f">this medium aricle</a> shows a cool example!</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://isaac-flath.tech/posts/_my_icons/DogStyleTransfer.jpeg" class="img-fluid figure-img"></p>
<figcaption>Dog Style Transfer</figcaption>
</figure>
</div>
</section>
<section id="a-gan-can-create-new-images" class="level2" data-number="2.3">
<h2 data-number="2.3" class="anchored" data-anchor-id="a-gan-can-create-new-images"><span class="header-section-number">2.3</span> A GAN can create new images</h2>
<p>In the paper <a href="https://arxiv.org/pdf/1710.10196.pdf">Progressive Growing of GANs for Improved Quality, Stability, and Variation</a>, NVIDIA showed the capability of GANs to create realistic super resolution photos of people that do not exist. These are fictional people made up by the GAN.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://isaac-flath.tech/posts/_my_icons/SuperResolution.png" class="img-fluid figure-img"></p>
<figcaption>Super Resolution Images</figcaption>
</figure>
</div>
</section>
<section id="a-gan-can-help-you-draw" class="level2" data-number="2.4">
<h2 data-number="2.4" class="anchored" data-anchor-id="a-gan-can-help-you-draw"><span class="header-section-number">2.4</span> A GAN can help you draw</h2>
<p>NVIDIA again shows a really cool video of how basic sketches can be turned into realistic photos. I can imagine how this could help people create art, visualize designs, and more!</p>
<div class="quarto-video ratio ratio-16x9"><iframe data-external="1" src="https://www.youtube.com/embed/p5U4NgVGAwg" title="" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen=""></iframe></div>
</section>
<section id="a-gan-can-compose-music" class="level2" data-number="2.5">
<h2 data-number="2.5" class="anchored" data-anchor-id="a-gan-can-compose-music"><span class="header-section-number">2.5</span> A GAN can compose music</h2>
<p>Another example is this song that was composed by AI. The lyrics is a person, but the instrumentation is AI - a great example of Machine-Human collaboration. You can see the GAN understood basic musical phrasing, hits, understood it can build to hits and go quiet for a couple beats before a large hit to add impact. If I didn’t know, I wouldn’t have realized is was using AI</p>
<div class="quarto-video ratio ratio-16x9"><iframe data-external="1" src="https://www.youtube.com/embed/XUs6CznN8pw" title="" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen=""></iframe></div>
</section>
</section>
<section id="how-does-it-work" class="level1" data-number="3">
<h1 data-number="3"><span class="header-section-number">3</span> How Does it Work?</h1>
<p>This is more complex than your average Neural Network because it is relying on 2 (or more) Neural Networks training in conjunction. You have 2 models with different roles:</p>
<p>The Critic is the quality gauge on the Generator while the generator is what’s actually producing the data. Let’s look at a summary of each of those.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://isaac-flath.tech/posts/_my_icons/CriticGenerator.png" class="img-fluid figure-img"></p>
<figcaption>Critic Generator Summary</figcaption>
</figure>
</div>
<section id="how-they-train-together" class="level2" data-number="3.1">
<h2 data-number="3.1" class="anchored" data-anchor-id="how-they-train-together"><span class="header-section-number">3.1</span> How they train together</h2>
<p>There is a big loop where they pass information back and forth an dlearn. Here’s generally how it works</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://isaac-flath.tech/posts/_my_icons/GANTrainingLoop.png" class="img-fluid figure-img"></p>
<figcaption>GAN Training Loop</figcaption>
</figure>
</div>
</section>
</section>
<section id="first-challenges" class="level1" data-number="4">
<h1 data-number="4"><span class="header-section-number">4</span> First Challenges</h1>
<section id="co-learning" class="level2" data-number="4.1">
<h2 data-number="4.1" class="anchored" data-anchor-id="co-learning"><span class="header-section-number">4.1</span> Co-learning</h2>
<p>As these models learn together they need to be evenly match in terms of skill. This can be especially challenging because the critic has a much easier job. Think about it. You paint a fake Monet and I will determine whether it’s a real Monet or a fake. Who do you think will be more competent at their task? Clearly painting the Monet is the much harder job.</p>
<p>So what can we do about it? The simplest 2 approaches are:</p>
<ol type="1">
<li>Set how many times the generator gets updated vs the critic.</li>
<li>Set the learning rates different for the generator vs the critic</li>
</ol>
</section>
<section id="mode-collapse" class="level2" data-number="4.2">
<h2 data-number="4.2" class="anchored" data-anchor-id="mode-collapse"><span class="header-section-number">4.2</span> Mode Collapse</h2>
<p>Mode collapse happens when the generator finds a weakness in the critic and exploits it. For example, the generator might do really well with golden retrievers - so rather than making all types of dogs is just learns to make lots of golden retrievers.</p>
</section>
</section>
<section id="improvements-tweaks" class="level1" data-number="5">
<h1 data-number="5"><span class="header-section-number">5</span> Improvements &amp; Tweaks</h1>
<p>What I have covered above is simple data generation in an unsupervised manner. There’s several modification that can be made to let these GANs do fancier things - and Ill briefly touch on two of those here.</p>
<section id="conditional-gans" class="level2" data-number="5.1">
<h2 data-number="5.1" class="anchored" data-anchor-id="conditional-gans"><span class="header-section-number">5.1</span> Conditional GANs</h2>
<p>A conditional GAN is where you can tell it what kind of image you want. For example if you are generating different dog breeds, you tell the GAN you want a specific breed (ie Golden Retriever). The way this works:</p>
<ol type="1">
<li>The Generator is given a specific class to generate data for.</li>
<li>The Critic determines whether is is real or fake data for that class. For example rather than “Predict if this is a real dog or not” it’s “Predict if this is a real golden retriever or not”. In order to fool the critic, the generator now has to not just create a dog - but the right species of dog. The generator could predict a perfect image of a pitbull, but it would be easy for the critic to determine that it’s a not a real golden retriever as pitbulls look completely different!</li>
</ol>
</section>
<section id="controllable-gans" class="level2" data-number="5.2">
<h2 data-number="5.2" class="anchored" data-anchor-id="controllable-gans"><span class="header-section-number">5.2</span> Controllable GANs</h2>
<p>A Controllable GAN allows you to control different aspects of the image. For example, I want to be able to take an image and tell it to generate the same image but add a beard. Or generate the same image but make the person look older.</p>
<p>A bit of background and how it’s accomplished: A generator creates data from random noise vectors. These random noise vectors can be thought of as random seeds in a sense. If I give the generator the exact same vector of random numbers, it will generate the exact same data. So those random number translate to output features in the data, so you can figure out how they map and then tweak away!</p>
<p>Here’s an example of what Photoshop is working on when it comes to controllable GANs.</p>
<div class="quarto-video ratio ratio-16x9"><iframe data-external="1" src="https://www.youtube.com/embed/iJs_nqu8P08" title="" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen=""></iframe></div>


</section>
</section>

 ]]></description>
  <category>Neural Networks</category>
  <category>Image Generation</category>
  <guid>https://isaac-flath.tech/posts/GenerativeModels/GANIntroduction.html</guid>
  <pubDate>Sat, 20 Feb 2021 05:00:00 GMT</pubDate>
  <media:content url="https://isaac-flath.tech/posts/_TopicImages/NeuralNetwork.jpg" medium="image" type="image/jpeg"/>
</item>
</channel>
</rss>
